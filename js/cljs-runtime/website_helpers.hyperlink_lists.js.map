{"version":3,"sources":["website_helpers/hyperlink_lists.cljs"],"mappings":";AASA,6DAAA,7DAAMA,kIACHC;AADH,AAAA,0FAAA,gDAAA,2CAAA,mGAEiBA,vBACA,4BAAA,WAAA,vCAACC,vBACD,mEAAA,MAAA,zEAACA,gOACXD,nDACA,wDAAA,xDAACE,fACD,AAACC,vBACD,oGAAA,MAAA,1GAACF,vBACD,qIAAA,IAAA,zIAACA,1BACD,AAACG;;AAER,gDAAA,hDAAMC,wGACHC;AADH,AAAA,0FAAA,gDAAA,2CAAA,qDAEa,CAAA,8CAAA,zCAAU,gCAAA,IAAA,pCAACL,uBAAQK,4CAC7BA;;AAEH,4CAAA,5CAAMC,gGACHC,MAAMC,MAAMC;AADf,AAAA,0FAAA,mDAAA,mFAAA,iDAGQ,oDAAA,PAAKF,8BACV,mBAAA,jBAAI,UAAA,TAAMC,mBAER,6CAAA,mFAAA,hIAACE,0LACK,iBAAAC,qBAAA,kEAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA26EwC,AAAA6B,sBAAAlC;IA36ExCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAAA,gDACO,CAACX,wCAAAA,8CAAAA,RAAQuB,0BAAAA;;AADhB,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,wDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAAMoB;AAAN,AAAA,OAAAF,eAAA,mFAAA,wKAAA,AAAAH,wDAAA,AAAAI,eAAAnB,/LACO,CAACH,wCAAAA,8CAAAA,RAAQuB,0BAAAA;;;AADhB;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAWH;;;AAGtB,AAAA;;;2DAAA,mEAAAyB,9HAAeE;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,yFAAA,zFAAeD,oGAEXE;AAFJ,AAGG,8FAAA,AAAAC,vFAACC,uGAA0BC,8BAAaH;;;AAH3C,CAAA,yFAAA,zFAAeF,oGAIXM,MAAMJ;AAJV,AAKG;AAAA,AACE,IAAMK,eAAa,AAACb,gBAAM,+CAAA,WAAAc,1DAACC;AAAD,AAAS,OAACC,6CAAE,AAAA,mFAAAF,kBACA,CAAA,uDAAgBN;GAC1BI;AAF5B,AAAA,0FAAA,keAAA,mFAAA,qDAAA,kLAAA,zuBAIG,0CAAA,1CAACnC,sDACU,AAAA,6FAAYoC,cACZ5C,4DACX,0CAAA,1CAACQ,uDAAuB,AAAA,8FAAaoC,cAActC,wMAGlD,AAACe,gBAAM,AAAA,kIAA+BuB;;;;AAhB/C,CAAA,mFAAA,nFAAeP;;AAAf","names":["website-helpers.hyperlink-lists/markdown-path-to-html-link","path","clojure.string/replace","clojure.string.split","cljs.core/last","clojure.string/capitalize","website-helpers.hyperlink-lists/category-link","category","website-helpers.hyperlink-lists/link-list","title","links","link-fn","cljs.core.into","iter__5523__auto__","s__28003","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__28007","cljs.core/chunk-buffer","i__28006","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28002","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","link","var_args","G__28021","website-helpers.hyperlink-lists/categories-and-backlinks","js/Error","current-page-path","cljs.core/deref","website_helpers.hyperlink_lists.categories_and_backlinks","website-helpers.global/notes","notes","current-note","p1__28019#","cljs.core.filter","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.hyperlink-lists\n  (:require [clojure.string :refer [replace split capitalize]]\n            [website-helpers.global :as global]\n            [reagent.dom :as d]))\n\n; TODO make these not just pull from the sections, but actually make the html so\n; that we get working links\n\n\n(defn markdown-path-to-html-link\n  [path]\n  [:a {:href (-> path\n                 (replace \"content/\" \"/\")\n                 (replace \".md\" \"/\"))}\n   (-> path\n       (split \"/\")\n       (last)\n       (replace \".md\" \"\")\n       (replace \"-\" \" \")\n       (capitalize))])\n\n(defn category-link\n  [category]\n  [:a {:href (str \"/?\" (replace category \" \" \"-\") \"=true\")}\n   category])\n\n(defn link-list\n  [title links link-fn]\n  [:div\n   [:h3 (str title \": \")]\n   (if (nil? links)\n     \"\"\n     (into [:ul]\n           (for [link links]\n             [:li (link-fn link)])))])\n\n(defn ^:export categories-and-backlinks\n  \"current-page-path is a string like docs/visual-art/generative-art.md\"\n  ([current-page-path]\n   (categories-and-backlinks @global/notes current-page-path))\n  ([notes current-page-path]\n   (fn []\n     (let [current-note (first (filter #(= (:path %)\n                                           (str \"content/\" current-page-path))\n                                 notes))]\n       [:div\n        (link-list \"Backlinks\"\n                   (:backlinks current-note)\n                   markdown-path-to-html-link)\n        (link-list \"Categories\" (:categories current-note) category-link)\n        [:span\n         \"Page modified \"\n         (count (:modification-unix-timestamps current-note))\n         \" times.\"]]))))\n"]}