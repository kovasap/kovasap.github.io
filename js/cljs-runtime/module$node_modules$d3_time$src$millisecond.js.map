{
"version":3,
"file":"module$node_modules$d3_time$src$millisecond.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,YAAR,CAAuBJ,OAAQK,CAAAA,WAA/B,CAA6C,IAAK,EAElD,KAAIC,UAAYR,OAAA,CAAQ,0CAAR,CAEhB,OAAMO,YAAc,GAAIC,SAAUC,CAAAA,YAAd,EAA4B,EAAA,EAAM,EAAlC,CACjB,CAACC,IAAD,CAAOC,IAAP,CAAA,EAAgB,CACjBD,IAAKE,CAAAA,OAAL,CAAa,CAACF,IAAd,CAAqBC,IAArB,CADiB,CADC,CAGjB,CAACE,KAAD,CAAQC,GAAR,CAAA,EACMA,GADN,CACYD,KAJK,CAOpBX,QAAQK,CAAAA,WAAR,CAAsBA,WAEtBA,YAAYQ,CAAAA,KAAZ,CAAoBC,CAAAC,EAAK,CACvBD,CAAA,CAAIE,IAAKC,CAAAA,KAAL,CAAWH,CAAX,CACJ,OAAKI,SAAA,CAASJ,CAAT,CAAL,EAA0B,CAA1B,CAAsBA,CAAtB,CACU,CAAV,CAAMA,CAAN,CACO,GAAIR,SAAUC,CAAAA,YAAd,EAA4BC,IAAA;AAAQ,CACzCA,IAAKE,CAAAA,OAAL,CAAaM,IAAKC,CAAAA,KAAL,CAAWT,IAAX,CAAkBM,CAAlB,CAAb,CAAoCA,CAApC,CADyC,CAApC,CAEJ,CAACN,IAAD,CAAOC,IAAP,CAAA,EAAgB,CACjBD,IAAKE,CAAAA,OAAL,CAAa,CAACF,IAAd,CAAqBC,IAArB,CAA4BK,CAA5B,CADiB,CAFZ,CAIJ,CAACH,KAAD,CAAQC,GAAR,CAAA,GACOA,GADP,CACaD,KADb,EACsBG,CALlB,CADP,CAAqBT,WADrB,CAAqC,IAFd,CAczBL,QAAQI,CAAAA,YAAR,CADqBC,WAAYc,CAAAA,KAhCuE;",
"sources":["node_modules/d3-time/src/millisecond.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_time$src$millisecond\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.milliseconds = exports.millisecond = void 0;\n\nvar _interval = require(\"./interval.js\");\n\nconst millisecond = (0, _interval.timeInterval)(() => {// noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n}); // An optimized implementation for this simple case.\n\nexports.millisecond = millisecond;\n\nmillisecond.every = k => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return (0, _interval.timeInterval)(date => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nconst milliseconds = millisecond.range;\nexports.milliseconds = milliseconds;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","milliseconds","millisecond","_interval","timeInterval","date","step","setTime","start","end","every","k","millisecond.every","Math","floor","isFinite","range"]
}
