{"version":3,"sources":["website_helpers/graph.cljs"],"mappings":"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","names":["website-helpers.graph/is-branch-node?","node","cljs.core._EQ_","website-helpers.graph/is-distinguished-node?","website-helpers.graph/create-sim","viz-state","map__54990","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","width","height","center-x","center-y","G__54991","js/d3.forceSimulation","js/d3.forceLink","p1__54976#","js/d3.forceManyBody","js/d3.forceCenter","js/d3.forceRadial","p1__54977#","p1__54978#","p1__54979#","js/d3.forceCollide","js/d3.forceX","p1__54980#","js/d3.forceY","p1__54981#","p1__54982#","temp__5825__auto__","s","rid3.attrs/attrs","p1__54983#","p1__54984#","p1__54985#","p1__54986#","p1__54987#","p1__54988#","p1__54989#","website-helpers.graph/create-drag","sim","js/d3.drag","event","d","_","website-helpers.graph/merge-nodes","orig","new","id","orig-map","cljs.core.into","cljs.core.map_indexed","i","n","seq__54992","cljs.core/seq","chunk__54993","count__54994","i__54995","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","old","G__54998","G__54999","x","y","vx","vy","fx","fy","p__55001","map__55002","website-helpers.graph/update-sim!","alpha-target","links","nodes","old-nodes","new-nodes","p1__55000#","G__55003","website-helpers.graph/get-clj","cljs.core.js__GT_clj","website-helpers.graph/viz","graph-data","base-link","state-override-map","cljs.core.atom","cljs.core.merge","drag","group-color","js/d3.scaleOrdinal","category-color","js/d3.schemeCategory10","add-circles","sel","update-circles","p1__55004#","p1__55005#","p1__55006#","p1__55007#","p1__55008#","x__5130__auto__","y__5131__auto__","G__55015","remove-circles","add-text","p1__55009#","update-text","p1__55010#","p1__55011#","p1__55012#","p1__55013#","remove-text","rid3.core/viz","svg","ratom","map__55016","initial-alpha","_ratom","cljs.core.swap_BANG_","cljs.core/assoc","p1__55014#","js/Math.sqrt","_event","js/window.open","clojure.string/replace"],"sourcesContent":[";; Taken from https://gist.github.com/prook/9e5cc9144d34a991978a2fd31b4ee487\n;; and comment thread https://github.com/gadfly361/rid3/issues/10.\n;; See documentation at https://github.com/d3/d3-force\n\n(ns website-helpers.graph \n  (:require\n   [reagent.core :as r]\n   [clojure.string :refer [replace]]\n   [website-helpers.macros :refer-macros [seconds-taken]]\n   [website-helpers.global :as global]\n   [rid3.core :as rid3 :refer [rid3->]]))\n\n\n(defn is-branch-node?\n  [node]\n  (or (= 1 (.-group node)) (= 2 (.-group node))))\n\n(defn is-distinguished-node? \n  [node]\n  (or\n    (= 4 (.-group node))\n    (= 5 (.-group node))))\n\n; The docs at https://d3js.org/d3-force/simulation are helpful for tuning\n; these\n; parameters.\n(defn create-sim\n  [viz-state]\n  (let [{:keys [width height center-x center-y]} @viz-state]\n    (doto (js/d3.forceSimulation)\n      (.stop)\n      (.force \"link\"\n              (-> (js/d3.forceLink)\n                  (.strength 0.08)\n                  (.id #(.-index %))))\n      (.force \"charge\"\n              (-> (js/d3.forceManyBody)\n                  (.strength -70)))\n      (.force \"center\"\n              (-> (js/d3.forceCenter center-x center-y)\n                  (.strength 1.1)))\n      (.force \"radial-categories\"\n              (-> (js/d3.forceRadial 150 center-x center-y)\n                  (.strength #(if (and (= 2 (.-group %))\n                                       (not (= \"legend\" (.-label %))))\n                                0.03\n                                0))))\n      (.force \"radial-leaves\"\n              (-> (js/d3.forceRadial 500 center-x center-y)\n                  (.strength #(if (and (not (= 2 (.-group %)))\n                                       (not (= \"legend\" (.-label %))))\n                                0.02\n                                0))))\n      (.force \"collide\"\n              (-> (js/d3.forceCollide #(if (is-distinguished-node? %) 70 35))\n                  (.strength 1.1)))\n      ; This keeps legend nodes above the chart to the side.\n      (.force \"legendx\"\n              (-> (js/d3.forceX (* 0.5 center-x))\n                  (.strength #(if (= \"legend\" (.-label %)) 0.2 0))))\n      (.force \"legendy\"\n              (-> (js/d3.forceY (* 0.5 center-y))\n                  (.strength #(if (= \"legend\" (.-label %)) 0.2 0))))\n      ; Pull the singular legend node up to separate it from the rest of\n      ; the legend\n      (.force \"legendnodex\"\n              (-> (js/d3.forceX 0)\n                  (.strength #(if (= \"Legend\" (.-name %)) 0.3 0))))\n      (.on \"tick\"\n           (fn []\n             (when-let [s (:links-sel @viz-state)]\n               (rid3-> s\n                       {:x1 #(.. % -source -x)\n                        :y1 #(.. % -source -y)\n                        :x2 #(.. % -target -x)\n                        :y2 #(.. % -target -y)}))\n             (when-let [s (:nodes-sel @viz-state)]\n               (rid3-> s\n                       {:transform #(str \"translate(\" (.-x %) \",\" (.-y %) \")\")\n                        :x         #(.-x %)\n                        :y         #(.-y %)})))))))\n\n(defn create-drag\n  [sim]\n  (-> (js/d3.drag)\n      (.on \"start\" (fn started\n                     [event d _]\n                     (when (-> event .-active zero?)\n                       (-> sim\n                           (.alphaTarget 0.3)\n                           (.restart)))\n                     (set! (.-fx d) (.-x d))\n                     (set! (.-fy d) (.-y d))))\n      (.on \"drag\" (fn dragged\n                    [event d _]\n                    (set! (.-fx d) (.-x event))\n                    (set! (.-fy d) (.-y event))))\n      (.on \"end\" (fn ended\n                   [event d _]\n                   (when (-> event .-active zero?)\n                     (-> sim\n                         (.alphaTarget 0)))\n                   (set! (.-fx d) nil)\n                   (set! (.-fy d) nil)))))\n\n(defn merge-nodes\n  [orig new id]\n  (let [orig-map (into {} (map-indexed (fn [i n] [(id n) i]) orig))]\n    (doseq [n new]\n      (when-let [old (aget orig (orig-map (id n)))]\n        (when-let [x (.-x old)] (set! (.-x n) x))\n        (when-let [y (.-y old)] (set! (.-y n) y))\n        (when-let [vx (.-vx old)] (set! (.-vx n) vx))\n        (when-let [vy (.-vy old)] (set! (.-vy n) vy))\n        (when-let [fx (.-fx old)] (set! (.-fx n) fx))\n        (when-let [fy (.-fy old)] (set! (.-fy n) fy))))\n    new))\n\n(defn update-sim! [sim alpha-target {:keys [links nodes]}]\n  (let [old-nodes (.nodes sim)\n        new-nodes (merge-nodes old-nodes nodes #(.-name %))]\n    (doto sim\n      (.nodes new-nodes)\n      (-> (.force \"link\") (.links links))\n      (.alpha alpha-target)\n      (.restart))))\n\n(defn get-clj [node] (js->clj node :keywordize-keys true))\n\n(defn viz\n  [graph-data base-link state-override-map]\n  ; (prn (str \"rendering \" (count (:nodes @graph-data)) \" nodes\"))\n  #_(doall (for [node (:nodes graph-data)]\n             (prn (select-keys (js->clj node :keywordize-keys true) [:name]))))\n  ; TODO make this width and height the size of the user's screen by\n  ; default\n  (let [viz-state      (atom (merge {:width          2000\n                                     :height         1500\n                                     :center-x       1000\n                                     :center-y       750\n                                     ; The initial \"temperature\" of the\n                                     ; simulation.\n                                     :initial-alpha  4\n                                     :hover-text-sel nil\n                                     :links-sel      nil ;#(not (= 11\n                                                         ;(.-value %)))\n                                     :nodes-sel      nil} ;#(not (=\n                                                          ;\"legend\"\n                                    ;(.-label %)))}\n                                    state-override-map))\n        sim            (create-sim viz-state)\n        drag           (create-drag sim)\n        ;; See\n        ;; https://github.com/d3/d3-scale-chromatic/blob/main/README.md#api-reference\n        ;; for options. See https://stackoverflow.com/a/21208204 for\n        ;; custom schemes. Note that this returns colors IN THE ORDER IT\n        ;; IS CALLED, not based on the value it is called with (but it\n        ;; will return the same color for repeated values).  See\n        ;; https://observablehq.com/@d3/d3-scaleordinal.\n        ; grey \"#808080\"\n        group-color    (js/d3.scaleOrdinal\n                         [\"#ff7f00\" \"#377eb8\" \"#4daf4a\" \"#ffff00\" \"#984ea3\"])\n        category-color (js/d3.scaleOrdinal js/d3.schemeCategory10)\n        add-circles    (fn [sel] (rid3-> sel (.append \"ellipse\")))\n        update-circles (fn [sel]\n                         ; https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute\n                         ; is a good reference for different properties\n                         ; here.\n                         (rid3->\n                           sel\n                           (.selectAll \"ellipse\")\n                           {:stroke       \"#000\"\n                            ;#(group-color (.-group %))\n                            :stroke-width 1.5\n                            :stroke-opacity #(:stroke-opacity-mod (get-clj %))\n                            :rx           #(* (if (is-branch-node? %) 1.3 1)\n                                              (+ 15 (* 3 (count (.-name %)))))\n                            :ry           #(* (if (is-branch-node? %) 1.3 1)\n                                              (/ (max 25 (.-size %)) 1.8))\n                            :fill         #(group-color (.-group %))\n                            ; #(category-color (.-label %))\n                            :fill-opacity #(* 0.6\n                                              (:opacity-mod (get-clj %)))}))\n        remove-circles (fn [sel] (rid3-> sel (.selectAll \"ellipse\") (.remove)))\n        add-text       (fn [sel]\n                         (rid3-> sel (.append \"text\") (.text #(.-name %))))\n        update-text    (fn [sel]\n                         (rid3-> sel\n                                 (.selectAll \"text\")\n                                 {:text-anchor \"middle\"\n                                  :opacity     #(* 1.0\n                                                   (:opacity-mod (get-clj %)))\n                                  :font-size   #(if (is-branch-node? %)\n                                                  \"med\"\n                                                  \"small\")\n                                  :font-weight #(if (or (= 4 (.-group %))\n                                                        (= 5 (.-group %)))\n                                                  \"bold\"\n                                                  \"normal\")\n                                  :y           5}\n                                 (.text #(.-name %))))\n        remove-text    (fn [sel] (rid3-> sel (.selectAll \"text\") (.remove)))]\n    [rid3/viz\n     {:id     \"force-graph\"\n      :ratom  graph-data\n      :svg    {:did-mount  (fn [svg ratom]\n                             (let [{:keys [width height initial-alpha]}\n                                   @viz-state]\n                               (rid3-> svg\n                                       {:width   width\n                                        :height  height\n                                        :viewBox #js [0 0 width height]})\n                               (update-sim! sim initial-alpha @ratom)))\n               :did-update (fn [svg ratom] (update-sim! sim 0.5 @ratom))}\n      :pieces [{:kind            :elem-with-data\n                :class           \"links\"\n                :tag             \"line\"\n                :prepare-dataset (fn [ratom] (:links @ratom))\n                :did-mount       (fn [sel _ratom]\n                                   (swap! viz-state assoc :links-sel sel)\n                                   (rid3-> sel\n                                           {:stroke         \"#999\"\n                                            :stroke-opacity 0.6\n                                            :stroke-width   #(-> (.-value %)\n                                                                 js/Math.sqrt\n                                                                 (/ 2))}))}\n               {:kind            :elem-with-data\n                :class           \"nodes\"\n                :tag             \"g\"\n                :prepare-dataset (fn [ratom] (:nodes @ratom))\n                ; See\n                ; https://github.com/kovasap/reddit-tree/blob/main/src/reddit_tree/graph.cljs\n                ; for more possibilities here. By default just calls\n                ; did-mount\n                ; :did-update      (fn [sel _ratom])\n                :did-mount       (fn [sel _ratom]\n                                   (swap! viz-state assoc :nodes-sel sel)\n                                   ; Based on\n                                   ; https://stackoverflow.com/a/47401796\n                                   (remove-text sel)\n                                   (remove-circles sel)\n                                   (add-circles sel)\n                                   (add-text sel)\n                                   (update-circles sel)\n                                   (update-text sel)\n                                   (rid3-> sel\n                                           (.on \"dblclick\"\n                                                (fn [_event node]\n                                                  (js/window.open\n                                                    (str base-link\n                                                         (replace (.-path node)\n                                                                  #\" \"\n                                                                  \"+\")))))\n                                           (.call drag)))}]}]))\n"]}