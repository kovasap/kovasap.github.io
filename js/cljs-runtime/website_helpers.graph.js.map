{"version":3,"sources":["website_helpers/graph.cljs"],"mappings":"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","names":["website-helpers.graph/html","hiccup","sablono.server/render-static","sablono.interpreter/interpret","website-helpers.graph/is-branch-node?","node","cljs.core._EQ_","website-helpers.graph/is-distinguished-node?","website-helpers.graph/create-sim","viz-state","map__57992","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","width","height","center-x","center-y","G__57993","js/d3.forceSimulation","js/d3.forceLink","p1__57978#","js/d3.forceManyBody","js/d3.forceCenter","js/d3.forceRadial","p1__57979#","p1__57980#","p1__57981#","js/d3.forceCollide","js/d3.forceX","p1__57982#","js/d3.forceY","p1__57983#","p1__57984#","temp__5823__auto__","s","rid3.attrs/attrs","p1__57985#","p1__57986#","p1__57987#","p1__57988#","p1__57989#","p1__57990#","p1__57991#","website-helpers.graph/create-drag","sim","js/d3.drag","event","d","_","website-helpers.graph/merge-nodes","orig","new","id","orig-map","cljs.core.into","cljs.core.map_indexed","i","n","seq__57994","cljs.core/seq","chunk__57995","count__57996","i__57997","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","old","G__58000","G__58001","x","y","vx","vy","fx","fy","p__58003","map__58004","website-helpers.graph/update-sim!","alpha-target","links","nodes","old-nodes","new-nodes","p1__58002#","G__58005","website-helpers.graph/viz","ratom","base-link","state-override-map","cljs.core.atom","cljs.core.merge","drag","group-color","js/d3.scaleOrdinal","category-color","js/d3.schemeCategory10","add-circle","sel","p1__58006#","p1__58007#","p1__58008#","x__5130__auto__","y__5131__auto__","G__58013","add-text","p1__58009#","p1__58010#","p1__58011#","rid3.core/viz","svg","map__58014","initial-alpha","_ratom","cljs.core.swap_BANG_","cljs.core/assoc","p1__58012#","js/Math.sqrt","_event","js/window.open","clojure.string/replace","website-helpers.graph/prechew","app-state","cljs.core.update","cljs.core/clj->js"],"sourcesContent":[";; Taken from https://gist.github.com/prook/9e5cc9144d34a991978a2fd31b4ee487\n;; and comment thread https://github.com/gadfly361/rid3/issues/10.\n;; See documentation at https://github.com/d3/d3-force\n\n(ns website-helpers.graph \n  (:require\n   [sablono.core :as sab]\n   [sablono.server :as server]\n   [clojure.string :refer [replace]]\n   [rid3.core :as rid3 :refer [rid3->]]))\n\n\n(defn html\n  \"Turns hiccup like syntax into an HTML string.\"\n  [hiccup]\n  (server/render-static (sab/html hiccup)))\n\n(defn is-branch-node? \n  [node]\n  (or\n    (= 1 (.-group node))\n    (= 2 (.-group node))))\n\n(defn is-distinguished-node? \n  [node]\n  (or\n    (= 4 (.-group node))\n    (= 5 (.-group node))))\n\n; The docs at https://d3js.org/d3-force/simulation are helpful for tuning these\n; parameters.\n(defn create-sim\n  [viz-state]\n  (let [{:keys [width height center-x center-y]}\n        @viz-state]\n    (doto (js/d3.forceSimulation)\n      (.stop)\n      (.force \"link\" (-> (js/d3.forceLink)\n                         (.strength 0.08)\n                         (.id #(.-index %))))\n      (.force \"charge\" (-> (js/d3.forceManyBody)\n                           (.strength -70)))\n      (.force \"center\" (-> (js/d3.forceCenter center-x center-y)\n                           (.strength 1.1)))\n      (.force \"radial-categories\" (-> (js/d3.forceRadial 150 center-x center-y)\n                                      (.strength #(if (and\n                                                        (= 2 (.-group %))\n                                                        (not (= \"legend\" (.-label %))))\n                                                      0.03 0))))\n      (.force \"radial-leaves\" (-> (js/d3.forceRadial 500 center-x center-y)\n                                  (.strength #(if (and\n                                                    (not (= 2 (.-group %)))\n                                                    (not (= \"legend\" (.-label %))))\n                                                0.02 0))))\n      (.force \"collide\" (-> (js/d3.forceCollide #(if (is-distinguished-node? %)\n                                                     70 35))\n                            (.strength 1.1)))\n      ; This keeps legend nodes above the chart to the side.\n      (.force \"legendx\" (-> (js/d3.forceX (* 0.5 center-x))\n                            (.strength #(if (= \"legend\" (.-label %))\n                                            0.2 0))))\n      (.force \"legendy\" (-> (js/d3.forceY (* 0.5 center-y))\n                            (.strength #(if (= \"legend\" (.-label %))\n                                            0.2 0))))\n      ; Pull the singular legend node up to separate it from the rest of the\n      ; legend\n      (.force \"legendnodex\" (-> (js/d3.forceX 0)\n                                (.strength #(if (= \"Legend\" (.-name %))\n                                                0.3 0))))\n      (.on \"tick\" (fn []\n                    (when-let [s (:links-sel @viz-state)]\n                      (rid3-> s\n                              {:x1 #(.. % -source -x)\n                               :y1 #(.. % -source -y)\n                               :x2 #(.. % -target -x)\n                               :y2 #(.. % -target -y)}))\n                    (when-let [s (:nodes-sel @viz-state)]\n                      (rid3-> s\n                              {:transform\n                               #(str \"translate(\" (.-x %) \",\" (.-y %) \")\")\n                               :x #(.-x %)\n                               :y #(.-y %)})))))))\n\n(defn create-drag\n  [sim]\n  (-> (js/d3.drag)\n      (.on \"start\" (fn started\n                     [event d _]\n                     (when (-> event .-active zero?)\n                       (-> sim\n                           (.alphaTarget 0.3)\n                           (.restart)))\n                     (set! (.-fx d) (.-x d))\n                     (set! (.-fy d) (.-y d))))\n      (.on \"drag\" (fn dragged\n                    [event d _]\n                    (set! (.-fx d) (.-x event))\n                    (set! (.-fy d) (.-y event))))\n      (.on \"end\" (fn ended\n                   [event d _]\n                   (when (-> event .-active zero?)\n                     (-> sim\n                         (.alphaTarget 0)))\n                   (set! (.-fx d) nil)\n                   (set! (.-fy d) nil)))))\n\n(defn merge-nodes\n  [orig new id]\n  (let [orig-map (into {} (map-indexed (fn [i n] [(id n) i]) orig))]\n    (doseq [n new]\n      (when-let [old (aget orig (orig-map (id n)))]\n        (when-let [x (.-x old)] (set! (.-x n) x))\n        (when-let [y (.-y old)] (set! (.-y n) y))\n        (when-let [vx (.-vx old)] (set! (.-vx n) vx))\n        (when-let [vy (.-vy old)] (set! (.-vy n) vy))\n        (when-let [fx (.-fx old)] (set! (.-fx n) fx))\n        (when-let [fy (.-fy old)] (set! (.-fy n) fy))))\n    new))\n\n(defn update-sim! [sim alpha-target {:keys [links nodes]}]\n  (let [old-nodes (.nodes sim)\n        new-nodes (merge-nodes old-nodes nodes #(.-name %))]\n    (doto sim\n      (.nodes new-nodes)\n      (-> (.force \"link\") (.links links))\n      (.alpha alpha-target)\n      (.restart))))\n\n(defn viz\n  [ratom base-link state-override-map]\n  ; TODO make this width and height the size of the user's screen by default\n  (let [viz-state (atom (merge {:width 2000\n                                :height 1500\n                                :center-x 1000\n                                :center-y 750\n                                ; The initial \"temperature\" of the simulation.\n                                :initial-alpha 4\n                                :hover-text-sel nil\n                                :links-sel nil ;#(not (= 11 (.-value %))) \n                                :nodes-sel nil};#(not (= \"legend\" (.-label %)))}\n                               state-override-map))\n        sim (create-sim viz-state)\n        drag (create-drag sim)\n        ;; See\n        ;; https://github.com/d3/d3-scale-chromatic/blob/main/README.md#api-reference\n        ;; for options.\n        ;; See https://stackoverflow.com/a/21208204 for custom schemes.\n        ;; Note that this returns colors IN THE ORDER IT IS CALLED, not based\n        ;; on the value it is called with (but it will return the same color\n        ;; for repeated values).  See https://observablehq.com/@d3/d3-scaleordinal.\n        ; grey \"#808080\" \n        group-color (js/d3.scaleOrdinal [\"#ff7f00\" \"#377eb8\" \"#4daf4a\" \"#ffff00\" \"#984ea3\"]) \n        category-color (js/d3.scaleOrdinal js/d3.schemeCategory10)\n        add-circle (fn [sel]\n                     (rid3-> sel\n                             (.append \"ellipse\")\n                             {:stroke         \"#fff\"\n                                              ;#(group-color (.-group %))\n                              :stroke-width   1.5\n                              :rx             #(* (if (is-branch-node? %) 1.3 1)\n                                                  (+ 15 (* 3 (count (.-name %)))))\n                              :ry             #(* (if (is-branch-node? %) 1.3 1)\n                                                  (/ (max 25 (.-size %)) 1.8))\n                              :fill           #(group-color (.-group %))\n                                              ; #(category-color (.-label %))\n                              :fill-opacity   0.6}))\n        add-text (fn [sel]\n                   (rid3-> sel\n                           (.append \"text\")\n                           {:text-anchor \"middle\"\n                            :font-size #(if (is-branch-node? %)\n                                          \"med\"\n                                          \"small\")\n                            :font-weight #(if (or (= 4 (.-group %))\n                                                  (= 5 (.-group %)))\n                                            \"bold\"\n                                            \"normal\")\n                            :y 5}\n                           (.text #(.-name %))))]\n    (fn [ratom]\n      [rid3/viz\n       {:id     \"force-graph\"\n        :ratom  ratom\n        :svg    {:did-mount\n                 (fn [svg ratom]\n                   (let [{:keys [width height initial-alpha]} @viz-state]\n                     (rid3-> svg\n                             {:width   width\n                              :height  height\n                              :viewBox #js [0 0 width height]})\n                     (update-sim! sim initial-alpha @ratom)))\n                 :did-update\n                 (fn [svg ratom]\n                   (update-sim! sim 0.5 @ratom))}\n        :pieces [{:kind            :elem-with-data\n                  :class           \"links\"\n                  :tag             \"line\"\n                  :prepare-dataset (fn [ratom] (:links @ratom))\n                  :did-mount\n                  (fn [sel _ratom]\n                    (swap! viz-state assoc :links-sel sel)\n                    (rid3-> sel\n                            {:stroke         \"#999\"\n                             :stroke-opacity 0.6\n                             :stroke-width   #(-> (.-value %)\n                                                  js/Math.sqrt\n                                                  (/ 2))}))}\n                 {:kind            :elem-with-data\n                  :class           \"nodes\"\n                  :tag             \"g\"\n                  :prepare-dataset (fn [ratom] (:nodes @ratom))\n                  ; See\n                  ; https://github.com/kovasap/reddit-tree/blob/main/src/reddit_tree/graph.cljs\n                  ; for more possibilities here.\n                  :did-mount (fn [sel _ratom]\n                               (swap! viz-state assoc :nodes-sel sel)\n                               ; Based on https://stackoverflow.com/a/47401796\n                               (add-circle sel)\n                               (add-text sel)\n                               (rid3-> sel\n                                 (.on \"dblclick\"\n                                      (fn [_event node]\n                                        (js/window.open\n                                          (str base-link\n                                               (replace (.-path node)\n                                                        #\" \" \"+\")))))\n                                 (.call drag)))}]}])))\n\n(defn prechew\n  [app-state]\n  #_(doall (for [node (:nodes @app-state)]\n             (prn (:name node) (:categories node))))\n  (-> @app-state\n      (update :nodes clj->js)\n      (update :links clj->js)))\n"]}