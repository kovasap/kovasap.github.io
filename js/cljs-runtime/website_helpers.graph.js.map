{"version":3,"sources":["website_helpers/graph.cljs"],"mappings":"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","names":["website-helpers.graph/is-branch-node?","node","cljs.core._EQ_","website-helpers.graph/is-distinguished-node?","website-helpers.graph/node-name-length-to-multiline","website-helpers.graph/should-multiline-node?","cljs.core/count","website-helpers.graph/create-sim","viz-state","map__20780","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","width","height","center-x","center-y","G__20789","js/d3.forceSimulation","js/d3.forceLink","p1__20761#","js/d3.forceManyBody","js/d3.forceCenter","js/d3.forceRadial","p1__20762#","p1__20764#","p1__20765#","js/d3.forceCollide","js/d3.forceX","p1__20766#","js/d3.forceY","p1__20768#","p1__20769#","temp__5823__auto__","s","rid3.attrs/attrs","p1__20770#","p1__20771#","p1__20772#","p1__20773#","p1__20774#","p1__20775#","p1__20776#","website-helpers.graph/create-drag","sim","js/d3.drag","event","d","_","website-helpers.graph/merge-nodes","orig","new","id","orig-map","cljs.core.into","cljs.core.map_indexed","i","n","seq__20854","cljs.core/seq","chunk__20855","count__20856","i__20857","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","old","G__20872","G__20883","x","y","vx","vy","fx","fy","p__20895","map__20896","website-helpers.graph/update-sim!","alpha-target","links","nodes","old-nodes","new-nodes","p1__20894#","G__20901","website-helpers.graph/get-clj","cljs.core.js__GT_clj","website-helpers.graph/viz","graph-data","base-link","state-override-map","cljs.core.atom","cljs.core.merge","drag","group-color","js/d3.scaleOrdinal","category-color","js/d3.schemeCategory10","add-circles","sel","update-circles","p1__20922#","p1__20923#","p1__20926#","p1__20927#","p1__20928#","x__5130__auto__","y__5131__auto__","G__20996","remove-circles","add-text","text-sel","words","clojure.string.split","clojure.string.join","cljs.core.take","cljs.core.drop","p1__20932#","p1__20933#","update-text","p1__20934#","p1__20935#","remove-text","rid3.core/viz","svg","ratom","map__21016","initial-alpha","_ratom","cljs.core.swap_BANG_","cljs.core/assoc","p1__20943#","js/Math.sqrt","_event","js/window.open","clojure.string/replace"],"sourcesContent":[";; Taken from https://gist.github.com/prook/9e5cc9144d34a991978a2fd31b4ee487\n;; and comment thread https://github.com/gadfly361/rid3/issues/10.\n;; See documentation at https://github.com/d3/d3-force\n\n(ns website-helpers.graph \n  (:require\n   [reagent.core :as r]\n   [clojure.string :refer [replace split join]]\n   [website-helpers.macros :refer-macros [seconds-taken]]\n   [website-helpers.global :as global]\n   [rid3.core :as rid3 :refer [rid3->]]))\n\n\n(defn is-branch-node?\n  [node]\n  (or (= 1 (.-group node)) (= 2 (.-group node))))\n\n(defn is-distinguished-node? \n  [node]\n  (or\n    (= 4 (.-group node))\n    (= 5 (.-group node))\n    (= 6 (.-group node))))\n\n(def node-name-length-to-multiline 30) ; 13)\n(defn should-multiline-node?\n  [node]\n  (< node-name-length-to-multiline (count (.-name node))))\n\n; The docs at https://d3js.org/d3-force/simulation are helpful for tuning\n; these\n; parameters.\n(defn create-sim\n  [viz-state]\n  (let [{:keys [width height center-x center-y]} @viz-state]\n    (doto (js/d3.forceSimulation)\n      (.stop)\n      (.force \"link\"\n              (-> (js/d3.forceLink)\n                  (.strength 0.07)\n                  (.id #(.-index %))))\n      (.force \"charge\"\n              (-> (js/d3.forceManyBody)\n                  (.distanceMax 800)\n                  (.strength -80)))\n      (.force \"center\"\n              (-> (js/d3.forceCenter center-x center-y)\n                  (.strength 1.1)))\n      (.force \"radial-categories\"\n              (-> (js/d3.forceRadial 150 center-x center-y)\n                  (.strength #(if (and (= 2 (.-group %))\n                                       (not (= \"legend\" (.-label %))))\n                                0.03\n                                0))))\n      (.force \"radial-leaves\"\n              (-> (js/d3.forceRadial 500 center-x center-y)\n                  (.strength #(if (and (not (= 2 (.-group %)))\n                                       (not (= \"legend\" (.-label %))))\n                                0.02\n                                0))))\n      ; Ideally we would use https://github.com/adel-tahir/d3-ellipseCollide\n      ; here and forgo the multilining stuff that is being used to try to get\n      ; more circular nodes.\n      (.force \"collide\"\n              (-> (js/d3.forceCollide\n                    #(* (if (is-distinguished-node? %) 1.2 1)\n                        (if (should-multiline-node? %) 50 35)))\n                  (.strength 1.1)))\n      ; This keeps legend nodes above the chart to the side.\n      (.force \"legendx\"\n              (-> (js/d3.forceX (* 0.5 center-x))\n                  (.strength #(if (= \"legend\" (.-label %)) 0.2 0))))\n      (.force \"legendy\"\n              (-> (js/d3.forceY (* 0.5 center-y))\n                  (.strength #(if (= \"legend\" (.-label %)) 0.2 0))))\n      ; Pull the singular legend node up to separate it from the rest of\n      ; the legend\n      (.force \"legendnodex\"\n              (-> (js/d3.forceX 0)\n                  (.strength #(if (= \"Legend\" (.-name %)) 0.3 0))))\n      (.on \"tick\"\n           (fn []\n             (when-let [s (:links-sel @viz-state)]\n               (rid3-> s\n                       {:x1 #(.. % -source -x)\n                        :y1 #(.. % -source -y)\n                        :x2 #(.. % -target -x)\n                        :y2 #(.. % -target -y)}))\n             (when-let [s (:nodes-sel @viz-state)]\n               (rid3-> s\n                       {:transform #(str \"translate(\" (.-x %) \",\" (.-y %) \")\")\n                        :x         #(.-x %)\n                        :y         #(.-y %)})))))))\n\n(defn create-drag\n  [sim]\n  (-> (js/d3.drag)\n      (.on \"start\" (fn started\n                     [event d _]\n                     (when (-> event .-active zero?)\n                       (-> sim\n                           (.alphaTarget 0.3)\n                           (.restart)))\n                     (set! (.-fx d) (.-x d))\n                     (set! (.-fy d) (.-y d))))\n      (.on \"drag\" (fn dragged\n                    [event d _]\n                    (set! (.-fx d) (.-x event))\n                    (set! (.-fy d) (.-y event))))\n      (.on \"end\" (fn ended\n                   [event d _]\n                   (when (-> event .-active zero?)\n                     (-> sim\n                         (.alphaTarget 0)))\n                   (set! (.-fx d) nil)\n                   (set! (.-fy d) nil)))))\n\n(defn merge-nodes\n  [orig new id]\n  (let [orig-map (into {} (map-indexed (fn [i n] [(id n) i]) orig))]\n    (doseq [n new]\n      (when-let [old (aget orig (orig-map (id n)))]\n        (when-let [x (.-x old)] (set! (.-x n) x))\n        (when-let [y (.-y old)] (set! (.-y n) y))\n        (when-let [vx (.-vx old)] (set! (.-vx n) vx))\n        (when-let [vy (.-vy old)] (set! (.-vy n) vy))\n        (when-let [fx (.-fx old)] (set! (.-fx n) fx))\n        (when-let [fy (.-fy old)] (set! (.-fy n) fy))))\n    new))\n\n(defn update-sim! [sim alpha-target {:keys [links nodes]}]\n  (let [old-nodes (.nodes sim)\n        new-nodes (merge-nodes old-nodes nodes #(.-name %))]\n    (doto sim\n      (.nodes new-nodes)\n      (-> (.force \"link\") (.links links))\n      (.alpha alpha-target)\n      (.restart))))\n\n(defn get-clj [node] (js->clj node :keywordize-keys true))\n\n(defn viz\n  [graph-data base-link state-override-map]\n  ; (prn (str \"rendering \" (count (:nodes @graph-data)) \" nodes\"))\n  #_(doall (for [node (:nodes graph-data)]\n             (prn (select-keys (js->clj node :keywordize-keys true) [:name]))))\n  ; TODO make this width and height the size of the user's screen by\n  ; default\n  (let [viz-state      (atom (merge {:width          2000\n                                     :height         1500\n                                     :center-x       1000\n                                     :center-y       750\n                                     ; The initial \"temperature\" of the\n                                     ; simulation.\n                                     :initial-alpha  4\n                                     :hover-text-sel nil\n                                     :links-sel      nil ;#(not (= 11\n                                                         ;(.-value %)))\n                                     :nodes-sel      nil} ;#(not (=\n                                                          ;\"legend\"\n                                    ;(.-label %)))}\n                                    state-override-map))\n        sim            (create-sim viz-state)\n        drag           (create-drag sim)\n        ;; See\n        ;; https://github.com/d3/d3-scale-chromatic/blob/main/README.md#api-reference\n        ;; for options. See https://stackoverflow.com/a/21208204 for\n        ;; custom schemes. Note that this returns colors IN THE ORDER IT\n        ;; IS CALLED, not based on the value it is called with (but it\n        ;; will return the same color for repeated values).  See\n        ;; https://observablehq.com/@d3/d3-scaleordinal.\n        ; grey \"#808080\"\n        group-color    (js/d3.scaleOrdinal [\"#ffffff\"\n                                            \"#377eb8\"\n                                            \"#4daf4a\"\n                                            \"#ffff00\"\n                                            \"#ff7f00\"\n                                            \"#984ea3\"])\n        category-color (js/d3.scaleOrdinal js/d3.schemeCategory10)\n        add-circles    (fn [sel] (rid3-> sel (.append \"ellipse\")))\n        update-circles (fn [sel]\n                         ; https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute\n                         ; is a good reference for different properties\n                         ; here.\n                         (rid3-> sel\n                                 (.selectAll \"ellipse\")\n                                 {:stroke \"#000\"\n                                  ;#(group-color (.-group %))\n                                  :stroke-width 1.5\n                                  :stroke-opacity #(:stroke-opacity-mod\n                                                     (get-clj %))\n                                  :rx #(* (if (is-branch-node? %) 1.3 1)\n                                          (if (should-multiline-node? %)\n                                            (+ 15 (* 2 (count (.-name %))))\n                                            (+ 15 (* 3 (count (.-name %))))))\n                                  :ry #(* (if (is-branch-node? %) 1.3 1)\n                                          (if (should-multiline-node? %)\n                                            (max 25 (.-size %))\n                                            (/ (max 25 (.-size %)) 1.8)))\n                                  :fill #(group-color (.-group %))\n                                  ; #(category-color (.-label %))\n                                  :fill-opacity\n                                  #(* 0.6 (:opacity-mod (get-clj %)))}))\n        remove-circles (fn [sel] (rid3-> sel (.selectAll \"ellipse\") (.remove)))\n        add-text       (fn [sel]\n                         (let [text-sel (.append sel \"text\")]\n                           (rid3-> text-sel\n                                   (.filter should-multiline-node?)\n                                   (.append \"tspan\")\n                                   {:x \"0\" :dy \"-0.7em\"}\n                                   (.text (fn [node]\n                                            (let [words (split (.-name node)\n                                                               #\"\\s\")]\n                                              (join \" \"\n                                                    (take (/ (count words) 2)\n                                                          words))))))\n                           (rid3-> text-sel\n                                   (.filter should-multiline-node?)\n                                   (.append \"tspan\")\n                                   {:x \"0\" :dy \"1.4em\"}\n                                   (.text (fn [node]\n                                            (let [words (split (.-name node)\n                                                               #\"\\s\")]\n                                              (join \" \"\n                                                    (drop (/ (count words) 2)\n                                                          words))))))\n                           (rid3-> text-sel\n                                   (.filter #(not (should-multiline-node? %)))\n                                   (.text #(.-name %)))))\n        update-text    (fn [sel]\n                         (rid3-> sel\n                                 (.selectAll \"text\")\n                                 {:text-anchor \"middle\"\n                                  :opacity     #(* 1.0\n                                                   (:opacity-mod (get-clj %)))\n                                  :font-size   #(if (is-branch-node? %)\n                                                  \"med\"\n                                                  \"small\")\n                                  ; :font-weight #(if (or (= 4 (.-group\n                                  ; %))\n                                  ;                       (= 5 (.-group\n                                  ;                       %))\n                                  ;                 \"bold\"\n                                  ;                 \"normal\")\n                                  :y           5}))\n        remove-text    (fn [sel] (rid3-> sel (.selectAll \"text\") (.remove)))]\n    [rid3/viz\n     {:id     \"force-graph\"\n      :ratom  graph-data\n      :svg    {:did-mount  (fn [svg ratom]\n                             (let [{:keys [width height initial-alpha]}\n                                   @viz-state]\n                               (rid3-> svg\n                                       {:width   width\n                                        :height  height\n                                        :viewBox #js [0 0 width height]})\n                               (update-sim! sim initial-alpha @ratom)))\n               :did-update (fn [svg ratom] (update-sim! sim 0.5 @ratom))}\n      :pieces [{:kind            :elem-with-data\n                :class           \"links\"\n                :tag             \"line\"\n                :prepare-dataset (fn [ratom] (:links @ratom))\n                :did-mount       (fn [sel _ratom]\n                                   (swap! viz-state assoc :links-sel sel)\n                                   (rid3-> sel\n                                           {:stroke         \"#999\"\n                                            :stroke-opacity 0.6\n                                            :stroke-width   #(-> (.-value %)\n                                                                 js/Math.sqrt\n                                                                 (/ 2))}))}\n               {:kind            :elem-with-data\n                :class           \"nodes\"\n                :tag             \"g\"\n                :prepare-dataset (fn [ratom] (:nodes @ratom))\n                ; See\n                ; https://github.com/kovasap/reddit-tree/blob/main/src/reddit_tree/graph.cljs\n                ; for more possibilities here. By default just calls\n                ; did-mount\n                ; :did-update      (fn [sel _ratom])\n                :did-mount       (fn [sel _ratom]\n                                   (swap! viz-state assoc :nodes-sel sel)\n                                   ; Based on\n                                   ; https://stackoverflow.com/a/47401796\n                                   (remove-text sel)\n                                   (remove-circles sel)\n                                   (add-circles sel)\n                                   (add-text sel)\n                                   (update-circles sel)\n                                   (update-text sel)\n                                   (rid3-> sel\n                                           (.on \"dblclick\"\n                                                (fn [_event node]\n                                                  (js/window.open\n                                                    (str base-link\n                                                         (replace (.-path node)\n                                                                  #\" \"\n                                                                  \"+\")))))\n                                           (.call drag)))}]}]))\n"]}