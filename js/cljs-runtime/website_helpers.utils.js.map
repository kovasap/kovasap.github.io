{"version":3,"sources":["website_helpers/utils.cljs"],"mappings":"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","names":["website-helpers.utils/get-selected-vars","selections","cljs.core/set","iter__5523__auto__","s__53663","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__53665","cljs.core/chunk-buffer","i__53664","vec__53666","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__53662","cljs.core/chunk-rest","vec__53669","cljs.core/first","cljs.core/cons","cljs.core/rest","var","selected","website-helpers.utils/my-md->hiccup","string","cljs.core.into","cljs.core/last","markdown-to-hiccup.core/component","markdown_to_hiccup.core.md__GT_hiccup","website-helpers.utils/parse-params","url","js/window","param-strs","clojure.string.split","clojure.string/includes?","s__53674","b__53676","i__53675","vec__53677","iter__53673","vec__53680","k","v","p1__53672#","cljs.core.map","clojure.string/replace","website-helpers.utils/get-url-param-selections","vars","url-params","cljs.core/reset!","s__53684","b__53686","i__53685","iter__53683","cljs.core/deref","cljs.core/contains?","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.utils\n  (:require\n    [markdown-to-hiccup.core :refer [md->hiccup component]]\n    [clojure.string :refer [split includes? replace]]))\n\n(defn get-selected-vars\n  {:malli/schema [:=> [:cat [:map-of :string :boolean]]\n                  [:set :string]]}\n  [selections]\n  (set (for [[var selected] selections\n             :when selected]\n         var)))\n\n(defn my-md->hiccup\n  [string]\n  (into [:span] (rest (rest (last (component (md->hiccup string)))))))\n\n(my-md->hiccup \"[Slipways](https://slipways.net/)\")\n\n(my-md->hiccup   \"This includes watching videos from channels like\n  [Veritasium](https://www.youtube.com/user/1veritasium), \n  [CGP Grey](https://www.youtube.com/user/CGPGrey),\n  and [Kurzgesagt](https://www.youtube.com/user/Kurzgesagt).\")\n\n(defn parse-params\n  \"Parse URL parameters into a hashmap\"\n  []\n  (let [url (.-location js/window)\n        param-strs (-> url (split #\"\\?\") last (split #\"\\&\"))]\n    (if (includes? (str url) \"?\")\n      (into {} (for [[k v] (map #(split % #\"=\") param-strs)]\n                 [(replace k #\"\\+\" \" \") v]))\n      {})))\n\n(defn get-url-param-selections\n  {:malli/schema [:=> [:cat [:set :string]\n                            :any]  ; Actually an ratom\n                  [:map-of :string :boolean]]}\n  [vars url-params]\n  (reset! url-params (parse-params))\n  (into {} (for [var vars]\n              [var (contains? @url-params var)])))\n"]}