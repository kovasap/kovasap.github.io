{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__47699","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","xs__6385__auto__","cljs.core/first","iterys__5519__auto__","s__47701","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__47703","cljs.core/chunk-buffer","i__47702","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47700","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__47698","note","category","website-helpers.notes/get-notes-by-directory","s__47711","s__47713","b__47715","i__47714","iter__47712","iter__47710","var_args","G__47742","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__47756","vec__47760","cljs.core.nth","_","v","s__47764","b__47766","i__47765","vec__47768","iter__47763","vec__47773","notes-map","cljs.core/contains?","G__47777","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__47782","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/get-notes-by-fn","f","cljs.core/update-vals","cljs.core/group-by","website-helpers.notes/creation-time","cljs.core/min","website-helpers.notes/timestamp->month","timestamp","js/Date","website-helpers.notes/month-name-to-index","month-name","G__47793","website-helpers.notes/month->timestamp","date-string","vec__47798","year-str","clojure.string.split","year","js/parseInt","month-index","and__5043__auto__","js-date","js/Math.floor","website-helpers.notes/last-modification-time","cljs.core/max","website-helpers.notes/organization-schemes","cljs.core.comp","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","p__47846","map__47849","cljs.core/--destructure-map","cljs.core.get","website-helpers.notes/note->link","cur-page-note","recently-created-notes","recently-modified-notes","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","recentcy-data","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__47879#","cljs.core.filter","p__47882","map__47883","website-helpers.notes/make-nested-note-html","notes-by-category","cur-page","categories-with-recently-modified-notes","categories-with-recently-created-notes","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__47889","b__47891","i__47890","vec__47895","iter__47888","vec__47912","subtree","p1__47881#","k","cljs.core/int?","cljs.core/Keyword","cljs.core/name","G__47933","cljs.core.prn","s__47903","b__47905","i__47904","iter__47902","s__47919","b__47921","i__47920","iter__47918","cljs.core/vals","clojure.string/capitalize","website-helpers.notes/num-recently-modified-notes-to-highlight","website-helpers.notes/num-recently-created-notes-to-highlight","website-helpers.notes/in?","coll","elm","p1__47935#","cljs.core/some","website-helpers.notes/get-recently-created-notes","cljs.core/set","cljs.core.take","website-helpers.notes/get-categories-with-recently-created-notes","cljs.core.map","website-helpers.notes/get-recently-modified-notes","p1__47940#","cljs.core.remove","website-helpers.notes/get-categories-with-recently-modified-notes","website-helpers.notes/get-recentcy-data","website-helpers.notes/overlap?","set1","set2","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/get-notes-for-categories","selected-categories","p1__47941#","clojure.set/subset?","website-helpers.notes/make-nested-note-list","organization-fn","G__47950","website-helpers.notes/set-one-to-true","ks","k-to-true","s__47952","b__47954","i__47953","iter__47951","website-helpers.notes/most-recent-lists","p1__47959#","p1__47960#","p1__47961#","website-helpers.notes/sync-url-params!","vars","js/URL","seq__47962","chunk__47963","count__47964","i__47965","vec__47972","c__5568__auto__","cljs.core/chunk-first","vec__47975","cljs.core/next","var","value","website-helpers.notes/make-index-menu","organization-scheme","reagent.core.atom","cljs.core/keys","cljs.core/deref","website-helpers.global/notes","website-helpers.common-components/dropdown-select-list","website-helpers.global/category-selections","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/not","website-helpers.global/sync-category-selections!","p__47982","vec__47983","_v","cljs.core/reset!","website-helpers.common-components/input-style","website-helpers.global/show-unselected-nodes-in-graph?","website-helpers.global/graph-update-num","cljs.core/inc","selected-organization-scheme","s__47987","b__47989","i__47988","vec__47990","iter__47986","vec__47993","scheme","selected?","website-helpers.utils/get-selected-vars","G__47997","website-helpers.notes/random-page","website_helpers.notes.random_page","cljs.core/rand-nth","clojure.string.join"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components\n     :refer\n     [input-style dropdown-select-list]]\n    [website-helpers.utils :refer [get-selected-vars]]\n    [website-helpers.global :as global]\n    [clojure.set :refer [union difference intersection subset?]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n; ---------- Organizing Notes ----------------------------------------\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n(defn get-notes-by-directory\n  \"Returns a map of path categories (derived from directories) to all notes\n  with that category.\"\n  [notes]\n  (apply merge-with\n    (partial merge-with union)\n    {}\n    (for [note     notes\n          category (:path-categories note)]\n      {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n; Not a recursively nested grouping like some of the others\n(defn get-notes-by-fn\n  [notes f]\n  (update-vals (group-by f notes) (fn [v] {:notes v})))\n\n(defn creation-time\n  [note]\n  (apply min (:modification-unix-timestamps note)))\n\n(defn timestamp->month\n  [timestamp]\n  (.toLocaleString (js/Date. (* timestamp 1000))\n                   \"en-US\"\n                   #js {:month \"long\" :year \"numeric\"}))\n  \n(defn month-name-to-index [month-name]\n  (case month-name\n    \"January\" 0\n    \"February\" 1\n    \"March\" 2\n    \"April\" 3\n    \"May\" 4\n    \"June\" 5\n    \"July\" 6\n    \"August\" 7\n    \"September\" 8\n    \"October\" 9\n    \"November\" 10\n    \"December\" 11\n    nil))\n\n(defn month->timestamp [date-string]\n  (let [[month-name year-str] (clojure.string/split date-string #\" \")\n        year (js/parseInt year-str)\n        month-index (month-name-to-index month-name)]\n    (if (and month-index year)\n      (let [js-date (new js/Date year month-index 1)]\n        ;; Convert milliseconds to seconds and floor to ensure it's an integer\n        (js/Math.floor (/ (.getTime js-date) 1000)))\n      nil)))\n\n(defn last-modification-time\n  [note]\n  (apply max (:modification-unix-timestamps note)))\n\n(def organization-schemes\n  {:directory        get-notes-by-directory\n   :most-recently-created\n   (fn [notes] (get-notes-by-fn notes (comp timestamp->month creation-time)))\n   :most-recently-changed\n   (fn [notes]\n     (get-notes-by-fn notes (comp timestamp->month last-modification-time)))\n   :category         get-notes-by-category\n   :largest-category get-notes-by-largest-category})\n\n; ------------- Constucting nested HTML list ---------------------------\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note {:keys [recently-created-notes recently-modified-notes]}]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)\n   \" \"\n   (if (contains? recently-created-notes note) \"+\" \"\")\n   (if (contains? recently-modified-notes note) \"*\" \"\")])\n\n(defn note-to-li\n  [note cur-page-note recentcy-data]\n  [:li {:key (:path note)}\n   (note->link note cur-page-note recentcy-data)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n\n(defn make-nested-note-html\n  [notes-by-category\n   cur-page\n   {:keys [categories-with-recently-modified-notes\n           categories-with-recently-created-notes]\n    :as   recentcy-data}]\n  (into\n    [:ul]\n    (reduce concat\n      (for [[category subtree] (sort-by #(let [k (first %)]\n                                           (cond (not (nil? (month->timestamp\n                                                              k)))\n                                                 (- (month->timestamp k))\n                                                 (string? k) k\n                                                 (int? k) (- k)\n                                                 (keyword? k) (name k)\n                                                 (nil? k) (- 1000)\n                                                 :else (doto k prn)))\n                                        notes-by-category)]\n        (if (= category :notes)\n          (into []\n                (for [note subtree]\n                  (note-to-li note cur-page recentcy-data)))\n          [[:li {:key category}\n            [:details {:id   category\n                       :open (or\n                               ; Expand all menus for the current page.\n                               (contains? (:categories cur-page) category)\n                               ; Expand all menus if there are few\n                               ; enough items\n                               (> 5\n                                  (count (reduce concat\n                                           (vals notes-by-category)))))}\n             [:summary\n              [:strong\n               (capitalize category)\n               \" \"\n               (if (contains? categories-with-recently-created-notes\n                              category) \"+\" \"\")\n               (if (contains? categories-with-recently-modified-notes\n                              category) \"*\" \"\")]]\n             (make-nested-note-html subtree cur-page recentcy-data)]]])))))\n\n; -------------------------- Recency Logic --------------------------------\n\n(def num-recently-modified-notes-to-highlight 10)\n(def num-recently-created-notes-to-highlight 5)\n\n(defn in? \n  \"true if coll contains elm\"\n  [coll elm]  \n  (some #(= elm %) coll))\n\n(defn get-recently-created-notes\n  [notes]\n  (set (take num-recently-created-notes-to-highlight\n             (reverse (sort-by creation-time notes)))))\n\n(defn get-categories-with-recently-created-notes\n  [notes]\n  (apply union (map :categories (get-recently-created-notes notes))))\n    \n\n(defn get-recently-modified-notes\n  [notes]\n  (let [recently-created-notes (get-recently-created-notes notes)]\n    (set (take num-recently-modified-notes-to-highlight\n               (reverse (sort-by last-modification-time\n                                 (remove #(in? recently-created-notes %)\n                                   notes)))))))\n\n(defn get-categories-with-recently-modified-notes\n  [notes]\n  (apply union (map :categories (get-recently-modified-notes notes))))\n\n(defn get-recentcy-data\n  [notes]\n  {:recently-modified-notes (get-recently-modified-notes notes)\n   :recently-created-notes (get-recently-created-notes notes)\n   :categories-with-recently-created-notes\n   (get-categories-with-recently-created-notes notes)\n   :categories-with-recently-modified-notes\n   (get-categories-with-recently-modified-notes notes)})\n\n; -------------------------------------------------------------------------\n\n(defn overlap?\n  [set1 set2]\n  (not (empty? (intersection set1 set2))))\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (if (= 0 (count selected-categories))\n    (set notes)\n    (set (filter ; #(overlap? selected-categories (:categories %))\n           #(subset? selected-categories (:categories %))\n           notes))))\n\n(defn make-nested-note-list\n  [notes selected-categories organization-fn]\n  (make-nested-note-html\n    (organization-fn (get-notes-for-categories notes selected-categories))\n    (get-cur-page-note notes)\n    (get-recentcy-data notes)))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.)\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn set-one-to-true\n  [ks k-to-true]\n  (assoc (into {}\n               (for [k ks]\n                 [k false]))\n    k-to-true true))\n\n(defn most-recent-lists\n  [notes cur-page-note]\n  (let [recently-created-notes (take 5\n                                     (reverse (sort-by creation-time notes)))]\n    [:div\n     [:strong \"Most recently created:\"]\n     (into [:ul]\n           (map #(note-to-li % cur-page-note {}) recently-created-notes))\n     [:strong \"Most recently modified:\"]\n     (into [:ul]\n           (map #(note-to-li % cur-page-note {})\n             (take 5\n                   (reverse (sort-by last-modification-time\n                                     (remove #(in? recently-created-notes %)\n                                       notes))))))]))\n\n(defn sync-url-params!\n  {:malli/schema [:=> [:cat [:map-of :string :boolean]] :nil]}\n  [vars]\n  (let [url (js/URL. (. js/window -location))]\n    (doseq [[var value] vars]\n      (if value\n        (.. url -searchParams (set var value))\n        (.. url -searchParams (delete var)))\n      (.. js/window -history (pushState nil \"\" (.toString url))))))\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  []\n  (let [organization-scheme (r/atom (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     :largest-category))]\n    (fn []\n      (let [notes         @global/notes\n            cur-page-note (get-cur-page-note notes)]\n        [:div\n         ; (most-recent-lists notes cur-page-note)\n         [:div\n          [dropdown-select-list\n           global/category-selections\n           \"Select Categories\"\n           (fn [k v]\n             (swap! global/category-selections assoc k (not v))\n             (sync-url-params! @global/category-selections)\n             (global/sync-category-selections!))\n           \"checkbox\"]]\n         [:div\n          [dropdown-select-list\n           organization-scheme\n           ; Title of dropdown is selected value\n           (str \"Organize by \"\n                (name (some (fn [[k v]] (if v k nil)) @organization-scheme)))\n           (fn [k _v]\n             (reset! organization-scheme (set-one-to-true\n                                           (keys organization-schemes)\n                                           k)))\n           \"radio\"]]\n         [:div\n          [:input {:type      \"checkbox\"\n                   :name      \"show-unselected-nodes-in-graph\"\n                   :style     input-style\n                   :checked   @global/show-unselected-nodes-in-graph?\n                   :on-change (fn [_]\n                                (swap! global/graph-update-num inc)\n                                (swap! global/show-unselected-nodes-in-graph?\n                                  not))}]\n          \"Show unselected pages in graph?\"]\n         (let [selected-organization-scheme (first (for [[scheme selected?]\n                                                         @organization-scheme\n                                                         :when selected?]\n                                                     scheme))]\n           (make-nested-note-list\n             notes\n             (get-selected-vars @global/category-selections)\n             (selected-organization-scheme organization-schemes)))\n         [:div\n          [:small\n           [:em\n            \"Sections/pages with * indicate they contain recent modifications.\"]]]\n         [:div\n          [:small\n           [:em \"Sections/pages with + indicate recent page additions.\"]]]]))))\n\n\n(defn ^:export random-page\n  ([] (random-page @global/notes))\n  ([notes]\n   (fn []\n     (let [note (rand-nth notes)]\n       [:p\n        [:strong \"Random Page: \"]\n        (note->link note nil {})\n        [:span {:style {:font-size \"70%\"}}]\n        \" (\"\n        (join \", \" (:categories note))\n        \")\"]))))\n"]}