{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/sync-url-params!","vars","url","js/URL","js/window","seq__57505","cljs.core/seq","chunk__57506","count__57507","i__57508","vec__57516","cljs.core.nth","temp__5825__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__57519","cljs.core/first","cljs.core/next","var","value","website-helpers.notes/select-category!","category","currently-selected?","cljs.core.prn","cljs.core.swap_BANG_","website-helpers.global/category-selections","cljs.core/assoc","cljs.core/not","cljs.core/deref","website-helpers.global/sync-category-selections!","website-helpers.notes/toggle-category!","cljs.core/update","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__57535","cljs.core/LazySeq","xs__6385__auto__","iterys__5519__auto__","s__57537","c__5521__auto__","size__5522__auto__","b__57539","cljs.core/chunk-buffer","i__57538","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57536","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__57534","note","website-helpers.notes/get-notes-by-directory","s__57564","s__57566","b__57568","i__57567","iter__57565","iter__57563","var_args","G__57583","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__57588","vec__57589","_","v","s__57593","b__57595","i__57594","vec__57597","iter__57592","vec__57600","notes-map","cljs.core/contains?","G__57604","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__57609","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/get-notes-by-fn","f","cljs.core/update-vals","cljs.core/group-by","website-helpers.notes/creation-time","cljs.core/min","website-helpers.notes/timestamp->month","timestamp","js/Date","website-helpers.notes/month-name-to-index","month-name","G__57629","website-helpers.notes/month->timestamp","date-string","vec__57637","year-str","clojure.string.split","year","js/parseInt","month-index","and__5043__auto__","js-date","js/Math.floor","website-helpers.notes/last-modification-time","cljs.core/max","website-helpers.notes/organization-schemes","cljs.core.comp","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","p__57656","map__57661","cljs.core/--destructure-map","cljs.core.get","website-helpers.notes/note->link","cur-page-note","recently-created-notes","recently-modified-notes","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","recentcy-data","website-helpers.notes/get-cur-page-note","possible-notes","p1__57697#","cljs.core.filter","p__57722","map__57723","website-helpers.notes/make-nested-note-html","notes-by-category","cur-page","categories-with-recently-modified-notes","categories-with-recently-created-notes","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__57728","b__57730","i__57729","vec__57738","iter__57727","vec__57750","subtree","p1__57718#","k","cljs.core/int?","cljs.core/Keyword","cljs.core/name","G__57761","s__57742","b__57744","i__57743","iter__57741","s__57754","b__57756","i__57755","iter__57753","cljs.core/vals","clojure.string/capitalize","website-helpers.notes/num-recently-modified-notes-to-highlight","website-helpers.notes/num-recently-created-notes-to-highlight","website-helpers.notes/in?","coll","elm","p1__57762#","cljs.core/some","website-helpers.notes/get-recently-created-notes","cljs.core/set","cljs.core.take","website-helpers.notes/get-categories-with-recently-created-notes","cljs.core.map","website-helpers.notes/get-recently-modified-notes","p1__57767#","cljs.core.remove","website-helpers.notes/get-categories-with-recently-modified-notes","website-helpers.notes/get-recentcy-data","website-helpers.notes/overlap?","set1","set2","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/get-notes-for-categories","selected-categories","p1__57776#","clojure.set/subset?","website-helpers.notes/make-nested-note-list","organization-fn","G__57777","website-helpers.notes/set-one-to-true","ks","k-to-true","s__57779","b__57781","i__57780","iter__57778","website-helpers.notes/most-recent-lists","p1__57782#","p1__57783#","p1__57784#","website-helpers.notes/make-index-menu","organization-scheme","reagent.core.atom","cljs.core/keys","website-helpers.global/notes","website-helpers.common-components/dropdown-select-list","p__57789","vec__57790","_v","cljs.core/reset!","website-helpers.common-components/input-style","website-helpers.global/show-unselected-nodes-in-graph?","website-helpers.global/graph-update-num","cljs.core/inc","website-helpers.global/include-home-node-in-graph?","selected-organization-scheme","s__57796","b__57798","i__57797","vec__57800","iter__57795","vec__57803","scheme","selected?","website-helpers.utils/get-selected-vars","G__57808","website-helpers.notes/random-page","website_helpers.notes.random_page","cljs.core/rand-nth","clojure.string.join"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components\n     :refer\n     [input-style dropdown-select-list]]\n    [website-helpers.utils :refer [get-selected-vars]]\n    [website-helpers.global :as global]\n    [clojure.set :refer [union difference intersection subset?]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n; ---------- Category Selection ---------------------------------------\n\n(defn sync-url-params!\n  {:malli/schema [:=> [:cat [:map-of :string :boolean]] :nil]}\n  [vars]\n  (let [url (js/URL. (. js/window -location))]\n    (doseq [[var value] vars]\n      (if value\n        (.. url -searchParams (set var value))\n        (.. url -searchParams (delete var)))\n      (.. js/window -history (pushState nil \"\" (.toString url))))))\n\n(defn select-category!\n  [category currently-selected?]\n  (prn \"setting \" category \" to \" currently-selected?)\n  (swap! global/category-selections assoc category (not currently-selected?))\n  (sync-url-params! @global/category-selections)\n  (global/sync-category-selections!))\n\n(defn toggle-category!\n  [category]\n  (prn \"toggling \" category)\n  (swap! global/category-selections update category not)\n  (sync-url-params! @global/category-selections)\n  (global/sync-category-selections!))\n\n; ---------- Organizing Notes ----------------------------------------\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n(defn get-notes-by-directory\n  \"Returns a map of path categories (derived from directories) to all notes\n  with that category.\"\n  [notes]\n  (apply merge-with\n    (partial merge-with union)\n    {}\n    (for [note     notes\n          category (:path-categories note)]\n      {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n; Not a recursively nested grouping like some of the others\n(defn get-notes-by-fn\n  [notes f]\n  (update-vals (group-by f notes) (fn [v] {:notes v})))\n\n(defn creation-time\n  [note]\n  (apply min (:modification-unix-timestamps note)))\n\n(defn timestamp->month\n  [timestamp]\n  (.toLocaleString (js/Date. (* timestamp 1000))\n                   \"en-US\"\n                   #js {:month \"long\" :year \"numeric\"}))\n  \n(defn month-name-to-index [month-name]\n  (case month-name\n    \"January\" 0\n    \"February\" 1\n    \"March\" 2\n    \"April\" 3\n    \"May\" 4\n    \"June\" 5\n    \"July\" 6\n    \"August\" 7\n    \"September\" 8\n    \"October\" 9\n    \"November\" 10\n    \"December\" 11\n    nil))\n\n(defn month->timestamp [date-string]\n  (let [[month-name year-str] (clojure.string/split date-string #\" \")\n        year (js/parseInt year-str)\n        month-index (month-name-to-index month-name)]\n    (if (and month-index year)\n      (let [js-date (new js/Date year month-index 1)]\n        ;; Convert milliseconds to seconds and floor to ensure it's an integer\n        (js/Math.floor (/ (.getTime js-date) 1000)))\n      nil)))\n\n(defn last-modification-time\n  [note]\n  (apply max (:modification-unix-timestamps note)))\n\n(def organization-schemes\n  {:directory        get-notes-by-directory\n   :most-recently-created\n   (fn [notes] (get-notes-by-fn notes (comp timestamp->month creation-time)))\n   :most-recently-changed\n   (fn [notes]\n     (get-notes-by-fn notes (comp timestamp->month last-modification-time)))\n   :category         get-notes-by-category\n   :largest-category get-notes-by-largest-category})\n\n; ------------- Constucting nested HTML list ---------------------------\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note {:keys [recently-created-notes recently-modified-notes]}]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)\n   \" \"\n   (if (contains? recently-created-notes note) \"+\" \"\")\n   (if (contains? recently-modified-notes note) \"*\" \"\")])\n\n(defn note-to-li\n  [note cur-page-note recentcy-data]\n  [:li {:key (:path note)}\n   (note->link note cur-page-note recentcy-data)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n\n(defn make-nested-note-html\n  [notes-by-category\n   cur-page\n   {:keys [categories-with-recently-modified-notes\n           categories-with-recently-created-notes]\n    :as   recentcy-data}]\n  (into\n    [:ul]\n    (reduce concat\n      (for [[category subtree] (sort-by #(let [k (first %)]\n                                           (cond (not (nil? (month->timestamp\n                                                              k)))\n                                                 (- (month->timestamp k))\n                                                 (string? k) k\n                                                 (int? k) (- k)\n                                                 (keyword? k) (name k)\n                                                 (nil? k) (- 1000)\n                                                 :else (doto k prn)))\n                                        notes-by-category)]\n        (if (= category :notes)\n          (into []\n                (for [note subtree]\n                  (note-to-li note cur-page recentcy-data)))\n          [[:li {:key category}\n            [:details {:id   category\n                       :open (or\n                               ; Expand all menus for the current page.\n                               (contains? (:categories cur-page) category)\n                               ; Expand all menus if there are few enough\n                               ; items\n                               (> 5\n                                  (count (reduce concat\n                                           (vals notes-by-category)))))}\n             [:summary\n              [:strong\n               (capitalize category)\n               \" \"\n               (if (contains? categories-with-recently-created-notes category)\n                 \"+\"\n                 \"\")\n               (if (contains? categories-with-recently-modified-notes category)\n                 \"*\"\n                 \"\")]]\n             (make-nested-note-html subtree cur-page recentcy-data)]]])))))\n\n; -------------------------- Recency Logic --------------------------------\n\n(def num-recently-modified-notes-to-highlight 10)\n(def num-recently-created-notes-to-highlight 5)\n\n(defn in? \n  \"true if coll contains elm\"\n  [coll elm]  \n  (some #(= elm %) coll))\n\n(defn get-recently-created-notes\n  [notes]\n  (set (take num-recently-created-notes-to-highlight\n             (reverse (sort-by creation-time notes)))))\n\n(defn get-categories-with-recently-created-notes\n  [notes]\n  (apply union (map :categories (get-recently-created-notes notes))))\n    \n\n(defn get-recently-modified-notes\n  [notes]\n  (let [recently-created-notes (get-recently-created-notes notes)]\n    (set (take num-recently-modified-notes-to-highlight\n               (reverse (sort-by last-modification-time\n                                 (remove #(in? recently-created-notes %)\n                                   notes)))))))\n\n(defn get-categories-with-recently-modified-notes\n  [notes]\n  (apply union (map :categories (get-recently-modified-notes notes))))\n\n(defn get-recentcy-data\n  [notes]\n  {:recently-modified-notes (get-recently-modified-notes notes)\n   :recently-created-notes (get-recently-created-notes notes)\n   :categories-with-recently-created-notes\n   (get-categories-with-recently-created-notes notes)\n   :categories-with-recently-modified-notes\n   (get-categories-with-recently-modified-notes notes)})\n\n; -------------------------------------------------------------------------\n\n(defn overlap?\n  [set1 set2]\n  (not (empty? (intersection set1 set2))))\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (if (= 0 (count selected-categories))\n    (set notes)\n    (set (filter ; #(overlap? selected-categories (:categories %))\n           #(subset? selected-categories (:categories %))\n           notes))))\n\n(defn make-nested-note-list\n  [notes selected-categories organization-fn]\n  (make-nested-note-html\n    (organization-fn (get-notes-for-categories notes selected-categories))\n    (get-cur-page-note notes)\n    (get-recentcy-data notes)))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.)\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn set-one-to-true\n  [ks k-to-true]\n  (assoc (into {}\n               (for [k ks]\n                 [k false]))\n    k-to-true true))\n\n(defn most-recent-lists\n  [notes cur-page-note]\n  (let [recently-created-notes (take 5\n                                     (reverse (sort-by creation-time notes)))]\n    [:div\n     [:strong \"Most recently created:\"]\n     (into [:ul]\n           (map #(note-to-li % cur-page-note {}) recently-created-notes))\n     [:strong \"Most recently modified:\"]\n     (into [:ul]\n           (map #(note-to-li % cur-page-note {})\n             (take 5\n                   (reverse (sort-by last-modification-time\n                                     (remove #(in? recently-created-notes %)\n                                       notes))))))]))\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  []\n  (let [organization-scheme (r/atom (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     :largest-category))]\n    (fn []\n      (let [notes         @global/notes\n            cur-page-note (get-cur-page-note notes)]\n        [:div\n         ; (most-recent-lists notes cur-page-note)\n         [:div\n          [dropdown-select-list\n           global/category-selections\n           \"Select Categories\"\n           select-category!\n           \"checkbox\"]]\n         [:div\n          [dropdown-select-list\n           organization-scheme\n           ; Title of dropdown is selected value\n           (str \"Organize by \"\n                (name (some (fn [[k v]] (if v k nil)) @organization-scheme)))\n           (fn [k _v]\n             (reset! organization-scheme (set-one-to-true\n                                           (keys organization-schemes)\n                                           k)))\n           \"radio\"]]\n         [:div\n          [:input {:type      \"checkbox\"\n                   :name      \"show-unselected-nodes-in-graph\"\n                   :style     input-style\n                   :checked   @global/show-unselected-nodes-in-graph?\n                   :on-change (fn [_]\n                                (swap! global/graph-update-num inc)\n                                (swap! global/show-unselected-nodes-in-graph?\n                                  not))}]\n          \"Show unselected pages in graph?\"]\n         [:div\n          [:input {:type      \"checkbox\"\n                   :name      \"include-home-node-in-graph\"\n                   :style     input-style\n                   :checked   @global/include-home-node-in-graph?\n                   :on-change (fn [_]\n                                (swap! global/graph-update-num inc)\n                                (swap! global/include-home-node-in-graph?\n                                  not))}]\n          \"Include home node in graph?\"]\n         (let [selected-organization-scheme (first (for [[scheme selected?]\n                                                         @organization-scheme\n                                                         :when selected?]\n                                                     scheme))]\n           (make-nested-note-list\n             notes\n             (get-selected-vars @global/category-selections)\n             (selected-organization-scheme organization-schemes)))\n         [:div\n          [:small\n           [:em\n            \"Sections/pages with * indicate they contain recent modifications.\"]]]\n         [:div\n          [:small\n           [:em \"Sections/pages with + indicate recent page additions.\"]]]]))))\n\n\n(defn ^:export random-page\n  ([] (random-page @global/notes))\n  ([notes]\n   (fn []\n     (let [note (rand-nth notes)]\n       [:p\n        [:strong \"Random Page: \"]\n        (note->link note nil {})\n        [:span {:style {:font-size \"70%\"}}]\n        \" (\"\n        (join \", \" (:categories note))\n        \")\"]))))\n"]}