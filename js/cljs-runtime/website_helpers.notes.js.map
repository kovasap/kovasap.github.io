{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__59159","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","xs__6383__auto__","cljs.core/first","iterys__5519__auto__","s__59161","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__59163","cljs.core/chunk-buffer","i__59162","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__59160","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__59158","note","category","var_args","G__59165","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__59166","vec__59167","cljs.core.nth","_","v","s__59171","b__59173","i__59172","vec__59174","iter__59170","vec__59177","notes-map","cljs.core/contains?","G__59181","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__59182","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","cljs.core/set","website-helpers.all-data/notes","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note->link","cur-page-note","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__59185#","cljs.core.filter","website-helpers.notes/make-subtree","notes-by-category","cur-page","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__59188","b__59190","i__59189","vec__59191","iter__59187","vec__59198","subtree","p1__59186#","k","cljs.core/name","s__59195","b__59197","i__59196","iter__59194","s__59202","b__59204","i__59203","iter__59201","cljs.core/vals","clojure.string/capitalize","website-helpers.notes/overlap?","set1","set2","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/get-notes-for-categories","selected-categories","p1__59205#","clojure.set/subset?","website-helpers.notes/notes-by-category-to-children-tree","categories-to-idx","s__59207","b__59209","i__59208","vec__59210","iter__59206","vec__59213","cljs.core/vec","cljs.core.get","website-helpers.notes/organize-notes-by-category","website-helpers.notes/index-categories","num-notes","s__59217","b__59219","i__59218","vec__59220","iter__59216","vec__59223","i","c","cljs.core.map_indexed","cljs.core/vector","cljs.test/test-var","website-helpers.notes/to-tree","website-helpers.notes/example-categories","values__10762__auto__","cljs.core/List","result__10763__auto__","cljs.test/report","t__10813__auto__","e59226","cljs.core/=","website-helpers.notes/make-category-menu","website-helpers.notes/filter-category-selections","s__59228","b__59230","i__59229","iter__59227","cljs.core/keys","cljs.core/deref","website-helpers.global/url-params","website-helpers.notes/make-index-menu","category-selections","reagent.core.atom","website-helpers.utils/get-url-param-selections","website-helpers.common-components/dropdown-check-list","website-helpers.utils/get-selected-vars","website-helpers.notes/random-page","cljs.core/rand-nth","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-url-param-selections get-selected-vars]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.all-data :as ad]\n    [website-helpers.global :refer [url-params]]\n    [clojure.set :refer [union difference intersection subset?]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [cljs.test :refer (deftest is)]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n(get-notes-by-largest-category (set ad/notes))\n\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)])\n\n(defn note-to-li\n  [note cur-page-note]\n  [:li {:key (:name note)}\n   (note->link note cur-page-note)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n   \n(defn make-subtree\n  [notes-by-category cur-page]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] (sort-by #(let [k (first %)]\n                                               (if (string? k) k (name k)))\n                                            notes-by-category)]\n            (if (= category :notes)\n              (into [] (for [note subtree] (note-to-li note cur-page)))\n              [[:li {:key category}\n                [:details {:id   category\n                           :open (or\n                                   ; Expand all menus for the current page.\n                                   (contains? (:categories cur-page) category)\n                                   ; Expand all menus if there are few enough\n                                   ; items\n                                   (> 5\n                                      (count (reduce concat\n                                               (vals notes-by-category)))))}\n                 [:summary [:strong (capitalize category)]]\n                 (make-subtree subtree cur-page)]]])))))\n\n\n(defn overlap?\n  [set1 set2]\n  (not (empty? (intersection set1 set2))))\n\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (if (= 0 (count selected-categories))\n    (set notes)\n    (set (filter ; #(overlap? selected-categories (:categories %))\n           #(subset? selected-categories (:categories %))\n           notes))))\n\n(defn notes-by-category-to-children-tree\n  \"Converts a map produced by get-notes-by-category to a PageTree)\n  readable by page_graph.cljs logic.\"\n  [notes-by-category categories-to-idx]\n  (into []\n    (reduce concat\n      (for [[k v] notes-by-category]\n        (if (= :notes k)\n          (vec v)\n          [{:name k\n            :idx (get categories-to-idx k)\n            :children (notes-by-category-to-children-tree\n                        v categories-to-idx)}])))))\n\n(defn organize-notes-by-category\n  [notes selected-categories]\n  (get-notes-by-largest-category ; Change this for different organization!\n  ; (get-notes-by-category ; Change this for different organization!\n    (get-notes-for-categories notes selected-categories)))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n\n(deftest to-tree\n  (def example-categories #{\"a 1\" \"c\"})\n  (is (= (notes-by-category-to-children-tree\n          (organize-notes-by-category example-notes example-categories)\n          (index-categories example-categories (count example-notes)))\n         [{:name \"a 1\", :idx 5,\n           :children\n           [{:name \"c\", :idx 4,\n             :children\n             [{:name \"4\", :markdown \"text 4\", :path \"content/docs/4.md\",\n               :title \"t-4\", :categories #{\"c\" \"a 1\"}}]}\n            {:name \"b\", :idx nil,\n             :children\n             [{:name \"1\", :markdown \"text 1\", :path \"content/docs/1.md\",\n               :title \"t-1\", :categories #{\"b\" \"a 1\"}}]}\n            {:name \"2\", :markdown \"text 2\", :path \"content/docs/2.md\",\n             :title \"t-2\", :categories #{\"a 1\"}}]}\n          {:name \"3\", :markdown \"text 3\", :path \"content/docs/3.md\",\n           :title \"t-3\", :categories #{\"c\"}}])))\n\n(defn make-category-menu\n  [notes selected-categories]\n  (make-subtree (organize-notes-by-category notes selected-categories)\n                (get-cur-page-note notes)))\n\n; (organize-notes-by-category\n;   ad/notes \n;   (get-selected-vars {\"...\" false, \"Social\" false, \"Lifestyle Optimizations\" false}))\n\n(defn filter-category-selections\n  [notes]\n  (into {} (for [category (keys (get-notes-by-category notes))]\n              [category (contains? @url-params category)])))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.\")\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-category-menu\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  [notes]\n  (let [category-selections (r/atom\n                              (get-url-param-selections\n                                (set (keys (filter-category-selections notes)))\n                                url-params))]\n    (fn [] [:div\n            [:div\n             [dropdown-check-list category-selections \"Select Categories\"]]\n            (make-category-menu notes\n                                (get-selected-vars @category-selections))])))\n\n\n(defn ^:export random-page\n  [notes]\n  (fn []\n    (let [note (rand-nth notes)]\n      [:p \"Random Page: \" (note->link note nil)\n       [:span {:style {:font-size \"70%\"}}\n        \" (\" (join \", \" (:categories note)) \")\"]])))\n"]}