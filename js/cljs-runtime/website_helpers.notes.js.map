{"version":3,"sources":["website_helpers/notes.cljs"],"mappings":"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","names":["website-helpers.notes/Note","website-helpers.notes/ex-note","n","categories","website-helpers.notes/example-notes","website-helpers.notes/get-notes-by-category","notes","cljs.core.apply","cljs.core/merge-with","cljs.core.partial","clojure.set/union","iter__5523__auto__","s__28809","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","xs__6385__auto__","cljs.core/first","iterys__5519__auto__","s__28812","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__28814","cljs.core/chunk-buffer","i__28813","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28811","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__28808","note","category","website-helpers.notes/get-notes-by-directory","s__28852","s__28854","b__28856","i__28855","iter__28853","iter__28851","var_args","G__28888","website-helpers.notes/get-largest-category","js/Error","website_helpers.notes.get_largest_category","categories-to-ignore","cljs.core/reverse","cljs.core.sort_by","p__28897","vec__28900","cljs.core.nth","_","v","s__28904","b__28906","i__28905","vec__28915","iter__28903","vec__28944","notes-map","cljs.core/contains?","G__29008","website-helpers.notes/get-notes-by-largest-category","website_helpers.notes.get_notes_by_largest_category","vec__29081","largest-category","largest-notes","other-notes","clojure.set.difference","cljs.core.merge","cljs.core.conj","website-helpers.notes/get-notes-by-fn","f","cljs.core/update-vals","cljs.core/group-by","website-helpers.notes/creation-time","cljs.core/min","website-helpers.notes/timestamp->month","timestamp","js/Date","website-helpers.notes/month-name-to-index","month-name","G__29211","website-helpers.notes/month->timestamp","date-string","vec__29247","year-str","clojure.string.split","year","js/parseInt","month-index","and__5043__auto__","js-date","js/Math.floor","website-helpers.notes/last-modification-time","cljs.core/max","website-helpers.notes/organization-schemes","cljs.core.comp","website-helpers.notes/path->url","path","clojure.string/replace-first","clojure.string/replace","website-helpers.notes/note->link","cur-page-note","attrs","cljs.core._EQ_","cljs.core.assoc","website-helpers.notes/note-to-li","website-helpers.notes/get-cur-page-note","possible-notes","url","js/window","p1__29416#","cljs.core.filter","website-helpers.notes/make-nested-note-html","notes-by-category","cur-page","cljs.core.into","cljs.core.reduce","cljs.core/concat","s__29472","b__29474","i__29473","vec__29509","iter__29471","vec__29630","subtree","p1__29445#","k","cljs.core/int?","cljs.core/Keyword","cljs.core/name","G__29708","cljs.core.prn","s__29528","b__29530","i__29529","iter__29527","s__29652","b__29654","i__29653","iter__29651","cljs.core/vals","clojure.string/capitalize","website-helpers.notes/overlap?","set1","set2","cljs.core/empty?","clojure.set.intersection","website-helpers.notes/get-notes-for-categories","selected-categories","cljs.core/set","p1__29726#","clojure.set/subset?","website-helpers.notes/make-nested-note-list","organization-fn","G__29741","website-helpers.notes/set-one-to-true","ks","k-to-true","s__29758","b__29760","i__29759","iter__29757","website-helpers.notes/organization-radios","organization-scheme","s__29783","b__29785","i__29784","vec__29802","iter__29782","vec__29826","cljs.core/deref","scheme","selected","website-helpers.common-components/input-style","cljs.core/reset!","cljs.core/keys","website-helpers.notes/make-index-menu","reagent.core.atom","website-helpers.common-components/dropdown-check-list","website-helpers.global/category-selections","website-helpers.global/sync-category-selections!","website-helpers.global/show-unselected-nodes-in-graph?","cljs.core.swap_BANG_","website-helpers.global/graph-update-num","cljs.core/inc","cljs.core/not","selected-organization-scheme","s__29871","b__29873","i__29872","vec__29883","iter__29870","vec__29888","selected?","website-helpers.global/notes","website-helpers.utils/get-selected-vars","G__29911","website-helpers.notes/random-page","website_helpers.notes.random_page","cljs.core/rand-nth","clojure.string.join","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.notes\n  (:require\n    [website-helpers.common-components :refer [input-style dropdown-check-list]]\n    [website-helpers.utils :refer [get-url-param-selections get-selected-vars]]\n    [website-helpers.global :as global]\n    [clojure.set :refer [union difference intersection subset?]]\n    [clojure.string :refer [capitalize replace replace-first join]]\n    [reagent.core :as r]))\n\n(def Note\n  [:map [:categories [:set :string]]\n        [:markdown :string]\n        [:links [:sequential :string]]\n        [:path :string]\n        [:name :string]])\n\n(defn ex-note\n  [n categories]\n  {:name n :markdown (str \"text \" n) :path (str \"content/docs/\" n \".md\")\n   :title (str \"t-\" n) :categories categories})\n\n(def example-notes\n  [(ex-note \"1\" #{\"a 1\" \"b\"})\n   (ex-note \"2\" #{\"a 1\"})\n   (ex-note \"3\" #{\"c\"})\n   (ex-note \"4\" #{\"a 1\" \"c\"})])\n\n; ---------- Organizing Notes ----------------------------------------\n\n(defn get-notes-by-category\n  \"Returns a map of categories to all notes with that category.\"\n  ; {:malli/schema [:=> [:cat [:sequential Note]]\n  ;                 [:map-of :keyword [:sequential Note]]]\n  [notes]\n  (apply merge-with (partial merge-with union) {}\n         (for [note notes\n               category (:categories note)]\n           {category {:notes #{note}}})))\n\n(defn get-notes-by-directory\n  \"Returns a map of path categories (derived from directories) to all notes\n  with that category.\"\n  [notes]\n  (apply merge-with\n    (partial merge-with union)\n    {}\n    (for [note     notes\n          category (:path-categories note)]\n      {category {:notes #{note}}})))\n\n\n; (get-notes-by-category example-notes)\n\n\n(defn get-largest-category\n  ([notes] (get-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (first\n     (reverse\n       (sort-by (fn [[_ v]] (count v))\n                (for [[category notes-map] (get-notes-by-category notes)\n                      :when (not (contains? categories-to-ignore category))]\n                  [category (:notes notes-map)]))))))\n\n\n; (get-largest-category example-notes #{})\n\n\n(defn get-notes-by-largest-category\n  ([notes] (get-notes-by-largest-category notes #{}))\n  ([notes categories-to-ignore]\n   (if (or (nil? notes) (<= (count notes) 1))\n     {:notes notes}\n     (let [[largest-category largest-notes]\n           (get-largest-category notes categories-to-ignore)\n           other-notes (difference notes largest-notes)]\n       ; I don't really understand why this if works\n       (if (nil? largest-notes)\n         {:notes notes}\n         (merge\n           {largest-category (get-notes-by-largest-category\n                               largest-notes (conj categories-to-ignore\n                                                   largest-category))}\n           (get-notes-by-largest-category other-notes categories-to-ignore)))))))\n\n; Not a recursively nested grouping like some of the others\n(defn get-notes-by-fn\n  [notes f]\n  (update-vals (group-by f notes) (fn [v] {:notes v})))\n\n(defn creation-time\n  [note]\n  (apply min (:modification-unix-timestamps note)))\n\n(defn timestamp->month\n  [timestamp]\n  (.toLocaleString (js/Date. (* timestamp 1000))\n                   \"en-US\"\n                   #js {:month \"long\" :year \"numeric\"}))\n  \n(defn month-name-to-index [month-name]\n  (case month-name\n    \"January\" 0\n    \"February\" 1\n    \"March\" 2\n    \"April\" 3\n    \"May\" 4\n    \"June\" 5\n    \"July\" 6\n    \"August\" 7\n    \"September\" 8\n    \"October\" 9\n    \"November\" 10\n    \"December\" 11\n    nil))\n\n(defn month->timestamp [date-string]\n  (let [[month-name year-str] (clojure.string/split date-string #\" \")\n        year (js/parseInt year-str)\n        month-index (month-name-to-index month-name)]\n    (if (and month-index year)\n      (let [js-date (new js/Date year month-index 1)]\n        ;; Convert milliseconds to seconds and floor to ensure it's an integer\n        (js/Math.floor (/ (.getTime js-date) 1000)))\n      nil)))\n\n(defn last-modification-time\n  [note]\n  (apply max (:modification-unix-timestamps note)))\n\n(def organization-schemes\n  {:directory        get-notes-by-directory\n   :most-recently-created\n   (fn [notes] (get-notes-by-fn notes (comp timestamp->month creation-time)))\n   :most-recently-changed\n   (fn [notes]\n     (get-notes-by-fn notes (comp timestamp->month last-modification-time)))\n   :category         get-notes-by-category\n   :largest-category get-notes-by-largest-category})\n\n; ------------- Constucting nested HTML list ---------------------------\n\n(defn path->url\n  [path]\n  (-> path\n      (replace-first \"content\" \"\")\n      (replace #\".md\" \"/\")))\n\n\n(defn note->link\n  [note cur-page-note]\n  [:a\n   (let [attrs {:href (path->url (:path note))}]\n     (if (= cur-page-note note)\n       (assoc attrs :style {:font-style \"italic\"})\n       attrs))\n   (:title note)])\n\n(defn note-to-li\n  [note cur-page-note]\n  [:li {:key (:path note)}\n   (note->link note cur-page-note)])\n\n\n(defn get-cur-page-note\n  [possible-notes]\n  (let [url (.. js/window -location -pathname)]\n    (first (filter #(= (path->url (:path %)) url) possible-notes))))\n\n\n(defn make-nested-note-html\n  [notes-by-category cur-page]\n  (into [:ul]\n        (reduce concat\n          (for [[category subtree] (sort-by\n                                     #(let [k (first %)]\n                                        (cond (not (nil? (month->timestamp k)))\n                                              (- (month->timestamp k))\n                                              (string? k)  k\n                                              (int? k)     (- k)\n                                              (keyword? k) (name k)\n                                              (nil? k)     (- 1000)\n                                              :else        (doto k prn)))\n                                     notes-by-category)]\n            (if (= category :notes)\n              (into []\n                    (for [note subtree]\n                      (note-to-li note cur-page)))\n              [[:li {:key category}\n                [:details {:id   category\n                           :open (or\n                                   ; Expand all menus for the current\n                                   ; page.\n                                   (contains? (:categories cur-page) category)\n                                   ; Expand all menus if there are few\n                                   ; enough items\n                                   (> 5\n                                      (count (reduce concat\n                                               (vals notes-by-category)))))}\n                 [:summary [:strong (capitalize category)]]\n                 (make-nested-note-html subtree cur-page)]]])))))\n\n; -------------------------------------------------------------------------\n\n(defn overlap?\n  [set1 set2]\n  (not (empty? (intersection set1 set2))))\n\n(defn get-notes-for-categories\n  [notes selected-categories]\n  (if (= 0 (count selected-categories))\n    (set notes)\n    (set (filter ; #(overlap? selected-categories (:categories %))\n           #(subset? selected-categories (:categories %))\n           notes))))\n\n(defn make-nested-note-list\n  [notes selected-categories organization-fn]\n  (make-nested-note-html\n    (organization-fn (get-notes-for-categories notes selected-categories))\n    (get-cur-page-note notes)))\n\n; Every category gets its own place in the top-level menu, meaning that notes   \n; with multiple categories will appear in multiple places.)\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-category)\n\n; Every note has a unique spot, as determined by nested categories (based on\n; the category's size).\n; (make-nested-note-list\n;   example-notes example-selected-categories get-notes-by-largest-category)\n\n(defn set-one-to-true\n  [ks k-to-true]\n  (assoc (into {}\n               (for [k ks]\n                 [k false]))\n    k-to-true true))\n  \n(defn organization-radios\n  [organization-scheme]\n  [:div\n   [:strong \"Organize by...\"]\n   (into [:ul {:style {:list-style-type \"none\" :padding 0 :margin 0}}]\n         (for [[scheme selected] @organization-scheme]\n           [:li {:key scheme}\n            [:input {:type      \"radio\"\n                     :name      \"organization-scheme\"\n                     :style     input-style\n                     :checked   selected\n                     :on-change (fn [_]\n                                  (reset! organization-scheme\n                                    (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     scheme)))}]\n            scheme]))])\n\n(defn ^:export make-index-menu\n  ; {:malli/schema [:=> [:cat [:sequential Note] ReagentComponent]]}\n  []\n  (let [organization-scheme (r/atom (set-one-to-true (keys\n                                                       organization-schemes)\n                                                     :most-recently-changed))]\n    (fn [] [:div\n            [:div\n             [dropdown-check-list\n              global/category-selections\n              \"Select Categories\"\n              global/sync-category-selections!]]\n            [:div\n             [:input {:type      \"checkbox\"\n                      :name      \"show-unselected-nodes-in-graph\"\n                      :style     input-style\n                      :checked   @global/show-unselected-nodes-in-graph?\n                      :on-change (fn [_]\n                                   (swap! global/graph-update-num inc)\n                                   (swap!\n                                     global/show-unselected-nodes-in-graph?\n                                     not))}]\n             \"Show unselected pages in graph?\"]\n            [organization-radios organization-scheme]\n            (let [selected-organization-scheme\n                  (first (for [[scheme selected?] @organization-scheme\n                               :when selected?]\n                           scheme))]\n              (make-nested-note-list\n                @global/notes\n                (get-selected-vars @global/category-selections)\n                (selected-organization-scheme organization-schemes)))])))\n\n\n(defn ^:export random-page\n  ([] (random-page @global/notes))\n  ([notes]\n   (fn []\n     (let [note (rand-nth notes)]\n       [:p\n        \"Random Page: \"\n        (note->link note nil)\n        [:span {:style {:font-size \"70%\"}}]\n        \" (\"\n        (join \", \" (:categories note))\n        \")\"]))))\n"]}