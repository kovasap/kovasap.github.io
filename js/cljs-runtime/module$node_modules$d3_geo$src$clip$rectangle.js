shadow$provide.module$node_modules$d3_geo$src$clip$rectangle=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(x0,y0,x1,y1){function interpolate(from,to,direction,stream){var a=0,a1=0;if(null==from||(a=corner(from,direction))!==(a1=corner(to,direction))||0>comparePoint(from,to)^0<direction){do stream.point(0===a||3===a?x0:x1,1<a?y1:y0);while((a=(a+
direction+4)%4)!==a1)}else stream.point(to[0],to[1])}function corner(p,direction){return(0,_math.abs)(p[0]-x0)<_math.epsilon?0<direction?0:3:(0,_math.abs)(p[0]-x1)<_math.epsilon?0<direction?2:1:(0,_math.abs)(p[1]-y0)<_math.epsilon?0<direction?1:0:0<direction?3:2}function compareIntersection(a,b){return comparePoint(a.x,b.x)}function comparePoint(a,b){var ca=corner(a,1),cb=corner(b,1);return ca!==cb?ca-cb:0===ca?b[1]-a[1]:1===ca?a[0]-b[0]:2===ca?a[1]-b[1]:b[0]-a[0]}return function(stream){function point$jscomp$0(x,
y){x0<=x&&x<=x1&&y0<=y&&y<=y1&&activeStream.point(x,y)}function linePoint(x,y){var v=x0<=x&&x<=x1&&y0<=y&&y<=y1;polygon&&ring$jscomp$0.push([x,y]);if(first)x__=x,y__=y,v__=v,first=!1,v&&(activeStream.lineStart(),activeStream.point(x,y));else if(v&&v_)activeStream.point(x,y);else{var a=[x_=Math.max(clipMin,Math.min(clipMax,x_)),y_=Math.max(clipMin,Math.min(clipMax,y_))],b=[x=Math.max(clipMin,Math.min(clipMax,x)),y=Math.max(clipMin,Math.min(clipMax,y))];(0,_line.default)(a,b,x0,y0,x1,y1)?(v_||(activeStream.lineStart(),
activeStream.point(a[0],a[1])),activeStream.point(b[0],b[1]),v||activeStream.lineEnd(),clean=!1):v&&(activeStream.lineStart(),activeStream.point(x,y),clean=!1)}x_=x;y_=y;v_=v}var activeStream=stream,bufferStream=(0,_buffer.default)(),segments,polygon,ring$jscomp$0,x__,y__,v__,x_,y_,v_,first,clean,clipStream={point:point$jscomp$0,lineStart:function(){clipStream.point=linePoint;polygon&&polygon.push(ring$jscomp$0=[]);first=!0;v_=!1;x_=y_=NaN},lineEnd:function(){segments&&(linePoint(x__,y__),v__&&v_&&
bufferStream.rejoin(),segments.push(bufferStream.result()));clipStream.point=point$jscomp$0;v_&&activeStream.lineEnd()},polygonStart:function(){activeStream=bufferStream;segments=[];polygon=[];clean=!0},polygonEnd:function(){for(var startInside,i=startInside=0,n=polygon.length;i<n;++i){var ring=polygon[i],j=1,m=ring.length,point=ring[0],b0=point[0];for(point=point[1];j<m;++j){var a0=b0;var a1=point;point=ring[j];b0=point[0];point=point[1];a1<=y1?point>y1&&(b0-a0)*(y1-a1)>(point-a1)*(x0-a0)&&++startInside:
point<=y1&&(b0-a0)*(y1-a1)<(point-a1)*(x0-a0)&&--startInside}}i=clean&&startInside;n=(segments=(0,_d3Array.merge)(segments)).length;if(i||n)stream.polygonStart(),i&&(stream.lineStart(),interpolate(null,null,1,stream),stream.lineEnd()),n&&(0,_rejoin.default)(segments,compareIntersection,startInside,interpolate,stream),stream.polygonEnd();activeStream=stream;segments=polygon=ring$jscomp$0=null}};return clipStream}};var _math=require("module$node_modules$d3_geo$src$math"),_buffer=_interopRequireDefault(require("module$node_modules$d3_geo$src$clip$buffer")),
_line=_interopRequireDefault(require("module$node_modules$d3_geo$src$clip$line")),_rejoin=_interopRequireDefault(require("module$node_modules$d3_geo$src$clip$rejoin")),_d3Array=require("module$node_modules$d3_array$src$index"),clipMax=1E9,clipMin=-clipMax}
//# sourceMappingURL=module$node_modules$d3_geo$src$clip$rectangle.js.map
