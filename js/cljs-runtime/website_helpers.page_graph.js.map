{"version":3,"sources":["website_helpers/page_graph.cljs"],"mappings":"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","names":["website-helpers.page-graph/PageTree","website-helpers.page-graph/example-page-tree","website-helpers.page-graph/get-category-links","nodes","categories-to-idx","cljs.core.reduce","cljs.core/concat","iter__5523__auto__","s__48005","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__48007","cljs.core/chunk-buffer","i__48006","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48004","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","node","cljs.core.into","s__48014","b__48016","i__48015","iter__48013","s__48024","b__48026","i__48025","iter__48023","category","idx","cljs.core.get","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","website-helpers.page-graph/update-nodes","seq48031","G__48032","cljs.core/next","self__5754__auto__","update-fns","s__48037","b__48039","i__48038","iter__48036","n","fexpr__48040","fexpr__48041","cljs.core.apply","cljs.core/comp","website-helpers.page-graph/scale-size","p1__48045#","cljs.core.update","Math/sqrt","website-helpers.page-graph/opacity-mod-min","website-helpers.page-graph/opacity-mod-max","website-helpers.page-graph/assign-opacity-mod","earliest-mod-time","latest-mod-time","categories","cljs.core.assoc","node-mod-time","cljs.core/max","cljs.core._EQ_","clojure.set.intersection","website-helpers.page-graph/stroke-opacity-mod-min","website-helpers.page-graph/stroke-opacity-mod-max","website-helpers.page-graph/assign-stroke-opacity-mod","least-mod-num","most-mod-num","node-mod-num","website-helpers.page-graph/assign-group","most-recently-modified-paths","most-recently-created-paths","cljs.core/contains?","website-helpers.page-graph/strip-extension","cljs.core/last","p1__48063#","clojure.string.split","p1__48064#","clojure.string/replace","p1__48065#","website-helpers.page-graph/fix-path","p1__48066#","website-helpers.page-graph/capitalize-words","s","cljs.core.map","clojure.string/capitalize","clojure.string.join","website-helpers.page-graph/prettify-name","p1__48067#","website-helpers.page-graph/index-categories","num-notes","s__48069","b__48071","i__48070","vec__48072","cljs.core.nth","iter__48068","vec__48075","i","c","cljs.core.map_indexed","cljs.core/vector","website-helpers.page-graph/notes-to-graph","show-unselected-nodes?","notes","selected-categories","all-categories","starting-idx","website-helpers.notes/get-notes-for-categories","p1__48078#","cljs.core/min","p1__48079#","cljs.core.remove","cljs.core/nil?","cljs.core/set","website-helpers.notes/get-recently-modified-notes","website-helpers.notes/get-recently-created-notes","idxed-notes","idxed-categories","category-to-node","cljs.core.prn","cljs.core.concat","p1__48080#","p1__48081#","p1__48082#","p1__48083#","p1__48084#","website_helpers.page_graph.update_nodes","cljs.core.dissoc","s__48086","b__48088","i__48087","vec__48089","iter__48085","vec__48092","_","website-helpers.page-graph/build-graph-data","notes-atom","category-selections-atom","start__27896__auto__","js/Date.now","ret__27897__auto__","cljs.core/deref","website-helpers.utils/get-selected-vars","cljs.core/keys","cljs.core/clj->js","website-helpers.page-graph/page-graph-from-notes","options","website-helpers.global/graph-update-num","website-helpers.graph/viz","reagent.core.track","website-helpers.global/show-unselected-nodes-in-graph?","website-helpers.global/notes","website-helpers.global/category-selections","cljs.core.js__GT_clj","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.page-graph\n  (:require [clojure.set :refer [intersection]]\n            [website-helpers.graph :as g]\n            [website-helpers.notes :as n]\n            [website-helpers.global :as global]\n            [website-helpers.macros :refer-macros [seconds-taken]]\n            [website-helpers.utils :refer [get-selected-vars]]\n            [clojure.string :refer [split replace join capitalize]]\n            [reagent.core :as r]))\n\n(def PageTree\n  [:map [:name :string]\n        [:size :int]\n        [:sequential PageTree]])\n\n(def example-page-tree\n  [{:name \"manifesto.md\", :size 10074}\n   {:name \"climbing\", :size 4096,\n    :children [{:name \"media.md\", :size 592}\n               {:name \"safety-checklist.md\", :size 3276}\n               {:name \"event-reports\", :size 4096,\n                :children [{:name \"2019-10-7-namaste-wall-zion.md\", :size 1899}\n                           {:name \"2020-8-10-lake-erie.md\", :size 1225}\n                           {:name \"2020-8-12-mile-high-club.md\", :size 10662}\n                           {:name \"first-512.md\", :size 214}\n                           {:name \"mcmahon-hall.md\", :size 928}]}]}\n   {:name \"datavis\", :size 4096,\n    :children [{:name \"reddit-tree.md\", :size 551}\n               {:name \"seattle-rain.md\", :size 2105}]}\n   {:name \"gamedev\", :size 4096,\n    :children [{:name \"common-patterns.md\", :size 2276}\n               {:name \"gamedev-context.md\", :size 246}\n               {:name \"my-projects.md\", :size 1131}\n               {:name \"game-ideas\", :size 4096,\n                :children [{:name \"farming-video-game.md\", :size 786}\n                           {:name \"roguelike-base-builder.md\", :size 2019}\n                           {:name \"safe-building-designer.md\", :size 507}]}\n               {:name \"mechanic-ideas\", :size 4096,\n                :children [{:name \"character-alignment.md\", :size 436}\n                           {:name \"low-friction-turn-based-tactics.md\", :size 3187}]}]}\n   {:name \"gaming\", :size 4096,\n    :children [{:name \"buying-games.md\", :size 912}\n               {:name \"chess.md\", :size 297}\n               {:name \"fps-principles.md\", :size 6329}\n               {:name \"oxygen-not-included.md\", :size 472}\n               {:name \"recommendations.md\", :size 326}]}\n   {:name \"health-and-longevity\", :size 4096,\n    :children [{:name \"aging-science.md\", :size 94}\n               {:name \"avoiding-accidents.md\", :size 244}\n               {:name \"biomarker-correlator.md\", :size 188}\n               {:name \"causes-of-death.md\", :size 703}\n               {:name \"chronic-stress.md\", :size 26}\n               {:name \"circadian-rhythm.md\", :size 72}\n               {:name \"continuous-glucose-monitoring.md\", :size 1384}\n               {:name \"cooking.md\", :size 9101}\n               {:name \"dental-health.md\", :size 135}\n               {:name \"dna-testing.md\", :size 670}\n               {:name \"exercise.md\", :size 29}\n               {:name \"fasting.md\", :size 4493}\n               {:name \"finding-care.md\", :size 275}\n               {:name \"food.md\", :size 16612}\n               {:name \"influences.md\", :size 8329}\n               {:name \"misc-research.md\", :size 409}\n               {:name \"my-physiological-states.md\", :size 636}\n               {:name \"sleep.md\", :size 4462}\n               {:name \"tracking-health.md\", :size 4196}]}\n   {:name \"hydroponics\", :size 4096,\n    :children [{:name \"journal.md\", :size 1525}\n               {:name \"my-setup.md\", :size 4052}]}\n   {:name \"investing-and-finances\", :size 4096,\n    :children [{:name \"comprehensive-housing-return-estimator.md\", :size 11714}\n               {:name \"financial-independence.md\", :size 745}\n               {:name \"housing.md\", :size 1515}\n               {:name \"influences.md\", :size 1368}\n               {:name \"monthly-costs-of-car-ownership.md\", :size 475}\n               {:name \"strategies.md\", :size 1243}\n               {:name \"taxes.md\", :size 2727}]}\n   {:name \"lifelogging\", :size 4096,\n    :children [{:name \"camera.md\", :size 869}\n               {:name \"influences.md\", :size 250}\n               {:name \"what-and-why.md\", :size 8752}]}])\n\n; (defn tree-seq-adding-path\n;   \"Like tree-seq, but takes in a tree of maps and a unique :tree-path key to\n;   each map.\n;   \n;   See https://clojuredocs.org/clojure.core/tree-seq#example-62780fc7e4b0b1e3652d75ea\"\n;   [branch? children root]\n;   (let [walk (fn walk [path node]\n;                (lazy-seq\n;                 (cons (assoc node :tree-path (str path \"/\" (:name node)))\n;                  (when (branch? node)\n;                    (mapcat (partial walk (str path \"/\" (:name node)))\n;                            (children node))))))]\n;     (walk nil root)))\n; \n; \n; (tree-seq-adding-path associative? :children\n;                       {:name \"home\" :children example-page-tree})\n; \n; (defn get-idxed-nodes\n;   [tree]\n;   (let [idxed-nodes\n;         (map-indexed\n;            (fn [i n] (assoc n :idx i))\n;            (tree-seq-adding-path associative? :children\n;                                  {:name \"home\" :children tree}))\n;         idxes-by-path (into {} (for [node idxed-nodes]\n;                                  [(:tree-path node) (:idx node)]))]\n;     (prn idxes-by-path)\n;     ; Now we update the one level deep children with the indicies\n;     (for [n idxed-nodes]\n;       (update n :children\n;               (fn [children]\n;                 (into [] (for [c children]\n;                            (assoc c :idx (get idxes-by-path\n;                                               (str (:tree-path n)\n;                                                    \"/\" (:name c)))))))))))\n; \n; (get-idxed-nodes (n/notes-by-category-to-children-tree\n;                     (n/organize-notes-by-category\n;                       n/example-notes #{\"a 1\" \"c\"})))\n\n(defn get-category-links\n  [nodes categories-to-idx]\n  (reduce concat\n          (for [node nodes]\n            (into [] (for [category (:categories node)\n                           :let [idx (get categories-to-idx category)]\n                           :when idx]\n                       {:source (:idx node)\n                        :target idx\n                        :value 3})))))\n\n(defn update-nodes\n  [nodes & update-fns]\n  (into [] (for [n nodes]\n             ((apply comp update-fns) n))))\n\n(defn scale-size\n  [node]\n  (update node :size #(if (nil? %)\n                        20\n                        (Math/sqrt (/ % 10)))))\n\n\n(def opacity-mod-min 0.5)\n(def opacity-mod-max 1.0)\n(defn assign-opacity-mod\n  [node earliest-mod-time latest-mod-time categories]\n  (assoc node\n    :opacity-mod\n    (let [node-mod-time (apply max (:modification-unix-timestamps node))]\n      (cond (= #{} (intersection categories (:categories node)))\n            (- opacity-mod-min 0.3)\n            (nil? node-mod-time) opacity-mod-max\n            (= earliest-mod-time latest-mod-time) opacity-mod-max\n            :else (+ opacity-mod-min\n                     (* (- opacity-mod-max opacity-mod-min)\n                        (/ (- node-mod-time earliest-mod-time)\n                           (- latest-mod-time earliest-mod-time))))))))\n\n(def stroke-opacity-mod-min 0.0)\n(def stroke-opacity-mod-max 1.0)\n(defn assign-stroke-opacity-mod\n  [node least-mod-num most-mod-num categories]\n  (assoc node\n    :stroke-opacity-mod\n    (let [node-mod-num (count (:modification-unix-timestamps node))]\n      (cond (= #{} (intersection categories (:categories node)))\n            stroke-opacity-mod-min\n            (nil? node-mod-num) stroke-opacity-mod-min\n            (= least-mod-num most-mod-num) stroke-opacity-mod-min\n            :else (+ stroke-opacity-mod-min\n                     (* (- stroke-opacity-mod-max stroke-opacity-mod-min)\n                        (/ (- node-mod-num least-mod-num)\n                           (- most-mod-num least-mod-num))))))))\n  \n\n(defn assign-group\n  [node most-recently-modified-paths most-recently-created-paths]\n  (assoc node :group (cond\n                       ; This is a special case we are overloading the \"group\"\n                       ; concept for, since i couldn't figure out how to get a\n                       ; new field through the clj->js conversion.\n                       (contains? most-recently-modified-paths (:path node)) 4\n                       (contains? most-recently-created-paths (:path node)) 5\n                       (contains? (:categories node) \"Important\") 5\n                       ; A normal page\n                       (or (nil? (:children node))\n                           (= 0 (count (:children node)))) 3\n                       ; A category \n                       (<= 0 (count (:children node))) 2)))\n\n(defn strip-extension\n  [node]\n  (if (= \".\" (last (:name node)))\n    node\n    (-> node\n        (update :name #(first (split % #\"\\.\")))\n        (update :path #(replace (first (split % #\"\\.\"))\n                                #\"content/\" \"\"))\n        (update :tree-path #(first (split % #\"\\.\"))))))\n\n(defn fix-path\n  [node]\n  (update node :tree-path #(replace % #\"/home\" \"docs/\")))\n\n(defn capitalize-words \n  \"Capitalize every word in a string\"\n  [s]\n  (->> (split (str s) #\"\\b\") \n       (map capitalize)\n       (join)))\n\n(defn prettify-name\n  [node]\n  (update node :name #(-> %\n                         (replace #\"-\" \" \")\n                         (capitalize-words))))\n\n(defn index-categories\n  [categories num-notes]\n  (into {} (for [[i c] (map-indexed vector categories)]\n             [c (+ num-notes i)])))\n\n(defn notes-to-graph\n  [show-unselected-nodes? notes selected-categories all-categories]\n  (let [starting-idx      9 ; leave room for HOME and LEGEND and\n                            ; other legend nodes\n        categories        (if (= 0 (count selected-categories))\n                            all-categories\n                            selected-categories)\n        notes             (if show-unselected-nodes?\n                            notes\n                            (n/get-notes-for-categories notes\n                                                        selected-categories))\n        most-mod-num      (apply max\n                            (map #(count (:modification-unix-timestamps %))\n                              notes))\n        least-mod-num     (apply min\n                            (map #(count (:modification-unix-timestamps %))\n                              notes))\n        earliest-mod-time (apply min\n                            (remove nil?\n                              (reduce concat\n                                (map :modification-unix-timestamps notes))))\n        latest-mod-time   (apply max\n                            (remove nil?\n                              (reduce concat\n                                (map :modification-unix-timestamps notes))))\n        most-recently-modified-paths\n        (set (map :path (n/get-recently-modified-notes notes)))\n        most-recently-created-paths\n        (set (map :path (n/get-recently-created-notes notes)))\n        idxed-notes       (map-indexed (fn [i n]\n                                         (assoc n :idx (+ starting-idx i)))\n                                       notes)\n        categories-to-idx (if show-unselected-nodes? all-categories categories)\n        idxed-categories  (assoc (index-categories categories-to-idx\n                                                   (+ starting-idx\n                                                      (count idxed-notes)))\n                            \"HOME\" 0)\n        category-to-node  (fn [c]\n                            {:name      c\n                             :idx       (get idxed-categories c)\n                             :path      (str \"?\" c \"=true\")\n                             :tree-path \"\"\n                             ; hack for group coloring\n                             :children  [1 1]})]\n    ; (prn \"making \" (count notes) \" nodes\")\n    (prn \"The most modified page was changed \" most-mod-num \" times.\")\n    (prn \"The least modified page was changed \" least-mod-num \" times.\")\n    (prn \"The page changed the earliest was changed at \" earliest-mod-time)\n    (prn \"The page changed the latest was changed at \" latest-mod-time)\n    {:nodes\n     (concat\n       [{:name \"Home\" :idx 0 :group 1 :size 20 :label \"home\" :opacity-mod 1}\n        {:name        \"Legend\"\n         :idx         1\n         :group       1\n         :size        20\n         :label       \"legend\"\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1}\n        {:name        \"Category (double-click to filter graph)\"\n         :idx         2\n         :group       2\n         :size        20\n         :label       \"legend\"\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1}\n        {:name        \"Lighter nodes were edited longer ago\"\n         :idx         3\n         :group       3\n         :size        10\n         :stroke-opacity-mod 0.5\n         :label       \"legend\"\n         :opacity-mod 0.5}\n        {:name        \"Nodes with darker outlines have been edited more times.\"\n         :idx         4\n         :group       3\n         :size        10\n         :stroke-opacity-mod 1.0\n         :label       \"legend\"\n         :opacity-mod 1}\n        {:name        \"Page (double-click to view)\"\n         :idx         5\n         :group       3\n         :size        20\n         :label       \"legend\"\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1}\n        {:name        \"Recently Modified Page (double-click to view)\"\n         :idx         6\n         :group       4\n         :size        20\n         :label       \"legend\"\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1}\n        {:name        \"Recently Added Page (double-click to view)\"\n         :idx         6\n         :group       5\n         :size        20\n         :label       \"legend\"\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1}\n        {:name        \"Important Page (double-click to view)\"\n         :idx         7\n         :group       6\n         :size        20\n         :stroke-opacity-mod 0.5\n         :opacity-mod 1\n         :label       \"legend\"}]\n       (update-nodes\n         (concat idxed-notes (map category-to-node categories-to-idx))\n         prettify-name\n         fix-path\n         strip-extension\n         scale-size\n         #(assign-group %\n                        most-recently-modified-paths\n                        most-recently-created-paths)\n         #(assign-opacity-mod % earliest-mod-time latest-mod-time categories)\n         #(assign-stroke-opacity-mod % least-mod-num most-mod-num categories)\n         #(assoc % :label (first (:categories %)))\n         #(dissoc % :markdown)))\n     :links (concat ; TODO make only links from\n                    ; organize-notes-by-category\n              ; appear if the number of links is overwhelming\n              (get-category-links idxed-notes idxed-categories)\n              ; All categories link to home\n              ; TODO make only categories from organize-notes-by-category\n              ; appear here\n              (for [[_ i] idxed-categories]\n                {:source 0 :target i :value 3})\n              ; setup LEGEND nodes\n              [; Do not connect the legend node to the center\n               ;{:source 0 :target 1 :value 11}\n               {:source 1 :target 2 :value 11}\n               {:source 2 :target 3 :value 11}\n               {:source 2 :target 4 :value 11}\n               {:source 2 :target 5 :value 11}])}))\n\n(defn build-graph-data\n  [show-unselected-nodes? notes-atom category-selections-atom]\n  (seconds-taken \"Built graph data\"\n                 (-> (notes-to-graph @show-unselected-nodes?\n                                     @notes-atom\n                                     (get-selected-vars\n                                       @category-selections-atom)\n                                     (set (keys @category-selections-atom)))\n                     (update :nodes clj->js)\n                     (update :links clj->js))))\n\n(defn ^:export page-graph-from-notes\n  [options]\n  (fn [] [:div\n          ; Wherever this changes, the component is completely reset\n          ; https://cljdoc.org/d/reagent/reagent/2.0.0-alpha2/doc/frequently-asked-questions/how-do-i-force-component-re-creation-\n          ; I struggled a lot with residual state accumulating in the\n          ; graph viz when updating the input data, leading to lots of\n          ; wierd bugs I couldn't fix.\n          ^{:key @global/graph-update-num}\n          (prn \"rerender \" @global/graph-update-num)\n          [g/viz\n           ; (r/track build-graph-data global/notes\n           ; global/category-selections)\n           (r/track build-graph-data\n                    global/show-unselected-nodes-in-graph?\n                    global/notes\n                    global/category-selections)\n           \"https://kovasap.github.io/\"\n           (js->clj options :keywordize-keys true)]]))\n"]}