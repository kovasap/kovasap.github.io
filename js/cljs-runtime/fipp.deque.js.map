{"version":3,"sources":["fipp/deque.cljc"],"mappings":";AAKA,AAAKA,oBAAOC;AAEZ,mBAAA,nBAAKC;AAEL,kBAAA,lBAAMC,4CAAMC;AAAZ,AACE,wDAAA,jDAACC,+CAAOD;;AAEV,AAAKE,mBAAM,AAACC,6CAAKC,eAAKN;AAEtB,oBAAA,pBAAMO,gDAAQC,EAAEC,MAAMC;AAAtB,AACE,oEAAA,mGAAA,hKAACC,gJAAYH,UAAGC,yFAAOC;;AAEzB,AAAKE,oBAAOC","names":["fipp.deque/create","cljs.core/vector","fipp.deque/empty","fipp.deque/popl","v","cljs.core.subvec","fipp.deque/conjr","cljs.core.fnil","cljs.core/conj","fipp.deque/conjlr","l","deque","r","clojure.core.rrb_vector.catvec","fipp.deque/concat","clojure.core.rrb-vector/catvec"],"sourcesContent":["(ns fipp.deque\n  \"Double-sided queue built on rrb vectors.\"\n  (:refer-clojure :exclude [empty concat])\n  (:require [clojure.core.rrb-vector :as rrb]))\n\n(def create vector)\n\n(def empty [])\n\n(defn popl [v]\n  (subvec v 1))\n\n(def conjr (fnil conj empty))\n\n(defn conjlr [l deque r]\n  (rrb/catvec [l] deque [r]))\n\n(def concat rrb/catvec)\n"]}