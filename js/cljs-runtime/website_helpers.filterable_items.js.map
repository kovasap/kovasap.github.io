{"version":3,"sources":["website_helpers/filterable_items.cljs"],"mappings":";AAYA,wCAAA,xCAAKA;AACL;;;2CAAA,3CAAKC;AAEL,uCAAA,vCAAKC;AACL;;;;+CAAA,mFAAA,yDAAA,mFAAA,sIAAA,mFAAA,sGAAA,mFAAA,yDAAA,mFAAA,gDAAA,mFAAA,qGAAA,mFAAA,8IAAA,mFAAA,sIAAA,mFAAA,jiDAAKC,qUAIOH,sCACAC,qLACSC,scAESF,wLACAA,sCAAKC,2LACLD,sCAAKC,qLAAiBC;AAEpD,wCAAA,mFAAA,mDAAA,mFAAA,4GAAA,mFAAA,qDAAA,mFAAA,uGAAA,mFAAA,6DAAA,mFAAA,l5BAAKE,4TACaH,8TACGC,0UACIF;AACzB,2CAAA,mFAAA,9HAAKK,uLACML,sCAAKI;AAEhB,4DAAA,mFAAA,mFAAA,mBAAA,+MAAA,mFAAA,gBAAA,mFAAA,mFAAA,oBAAA,0DAAA,mFAAA,2BAAA,mFAAA,uBAAA,0EAAA,mFAAA,2CAAA,mFAAA,oCAAA,oFAAA,mFAAA,OAAA,mBAAA,mFAAA,mFAAA,+CAAA,mFAAA,UAAA,GAAA,mFAAA,mBAAA,yCAAA,mFAAA,QAAA,GAAA,mFAAA,gBAAA,yCAAA,mFAAA,UAAA,GAAA,mFAAA,mBAAA,v2EAAKE;AAsBL,uDAAA,sCAAA,mFAAA,mBAAA,2MAAA,mFAAA,gBAAA,mFAAA,mFAAA,oBAAA,qEAAA,mFAAA,2BAAA,mFAAA,iCAAA,uGAAA,mFAAA,2CAAA,mFAAA,2FAAA,yGAAA,mFAAA,YAAA,mBAAA,mFAAA,mFAAA,WAAA,8CAAA,mFAAA,2CAAA,mFAAA,yBAAA,+DAAA,mFAAA,WAAA,WAAA,cAAA,iBAAA,mFAAA,mFAAA,wBAAA,oFAAA,mFAAA,wBAAA,0MAAA,mFAAA,sBAAA,8DAAA,mFAAA,4CAAA,mFAAA,2DAAA,oEAAA,mFAAA,OAAA,qBAAA,yCAAA,mFAAA,YAAA,+HAAA,mFAAA,QAAA,4BAAA,mFAAA,mFAAA,aAAA,gKAAA,mFAAA,iBAAA,gGAAA,mFAAA,oBAAA,qIAAA,mFAAA,2BAAA,wLAAA,mFAAA,uBAAA,wBAAA,mFAAA,QAAA,4BAAA,mFAAA,mFAAA,qBAAA,mFAAA,mDAAA,mFAAA,+BAAA,kOAAA,mFAAA,4BAAA,mFAAA,mFAAA,SAAA,wEAAA,mFAAA,uBAAA,4CAAA,mFAAA,4BAAA,mFAAA,mFAAA,qBAAA,mFAAA,sBAAA,6LAAA,mFAAA,mCAAA,mFAAA,4CAAA,4HAAA,mFAAA,QAAA,4BAAA,yCAAA,mFAAA,sBAAA,sVAAA,mFAAA,QAAA,4BAAA,yCAAA,mFAAA,sBAAA,6aAAA,mFAAA,QAAA,4BAAA,yCAAA,mFAAA,gCAAA,mhBAAA,mFAAA,OAAA,aAAA,sBAAA,yCAAA,mFAAA,sDAAA,2EAAA,mFAAA,OAAA,iBAAA,yCAAA,mFAAA,uCAAA,qZAAA,mFAAA,OAAA,iBAAA,yCAAA,mFAAA,QAAA,mDAAA,mFAAA,OAAA,aAAA,sBAAA,yCAAA,mFAAA,WAAA,wDAAA,iCAAA,mFAAA,mFAAA,4BAAA,kLAAA,mFAAA,aAAA,yCAAA,iCAAA,mFAAA,mFAAA,oCAAA,mFAAA,oBAAA,gLAAA,mFAAA,sDAAA,eAAA,mFAAA,sBAAA,mFAAA,mFAAA,wBAAA,8GAAA,mFAAA,2BAAA,mFAAA,oBAAA,uNAAA,mFAAA,eAAA,8HAAA,mFAAA,OAAA,cAAA,cAAA,oBAAA,mFAAA,mFAAA,sBAAA,yMAAA,mFAAA,4DAAA,mBAAA,mFAAA,OAAA,SAAA,iBAAA,mFAAA,mFAAA,yDAAA,mFAAA,wCAAA,6IAAA,mFAAA,OAAA,SAAA,iBAAA,mFAAA,mFAAA,yDAAA,mFAAA,mDAAA,wEAAA,mFAAA,eAAA,mFAAA,mFAAA,yDAAA,mFAAA,4CAAA,2DAAA,mFAAA,OAAA,SAAA,iBAAA,mFAAA,mFAAA,yDAAA,mFAAA,4CAAA,iDAAA,mFAAA,OAAA,SAAA,iBAAA,yCAAA,mFAAA,wEAAA,uCAAA,mFAAA,OAAA,iBAAA,yCAAA,mFAAA,wEAAA,sDAAA,mFAAA,OAAA,SAAA,sBAAA,yCAAA,mFAAA,gFAAA,k6CAAA,mFAAA,OAAA,WAAA,aAAA,QAAA,sBAAA,yCAAA,mFAAA,qEAAA,0GAAA,mFAAA,OAAA,WAAA,aAAA,sBAAA,yCAAA,mFAAA,oDAAA,43BAAA,mFAAA,OAAA,WAAA,qBAAA,mFAAA,mFAAA,6BAAA,iMAAA,mFAAA,0DAAA,upBAAA,mFAAA,OAAA,WAAA,aAAA,sBAAA,yCAAA,mFAAA,sEAAA,GAAA,mFAAA,OAAA,sBAAA,yCAAA,mFAAA,mEAAA,iDAAA,mFAAA,OAAA,WAAA,aAAA,sBAAA,yCAAA,mFAAA,cAAA,qKAAA,mFAAA,OAAA,iBAAA,yCAAA,mFAAA,sEAAA,gEAAA,mFAAA,OAAA,WAAA,aAAA,iBAAA,mFAAA,mFAAA,yDAAA,mFAAA,yCAAA,GAAA,mFAAA,OAAA,mBAAA,yCAAA,mFAAA,mBAAA,8kCAAA,mFAAA,OAAA,sBAAA,yCAAA,mFAAA,WAAA,6JAAA,mFAAA,OAAA,sBAAA,yCAAA,mFAAA,wEAAA,oJAAA,mFAAA,OAAA,QAAA,mBAAA,yCAAA,mFAAA,oCAAA,kFAAA,mFAAA,OAAA,WAAA,aAAA,iBAAA,mFAAA,mFAAA,yDAAA,mFAAA,iEAAA,4DAAA,mFAAA,OAAA,mBAAA,mFAAA,mFAAA,iCAAA,gHAAA,mFAAA,4GAAA,8CAAA,mFAAA,QAAA,qBAAA,mFAAA,mFAAA,9/1BAAKC;AA6WL,mDAAA,nDAAMC,8GAEHC,MAAMC;AAFT,AAGE,OAACC,gBAAM,AAACC,uDAAa,AAAA,mFAAOH,OAAO,AAAA,mFAAOC;;AAE5C,gDAAA,mFAAA,+FAAA,mFAAA,+FAAA,pZAAKG,4LACMb,kLAAcA;AAEzB,wDAAA,xDAAMc,wHAEHC;AAFH,AAGE,oDAAA,7CAACC,gFAAQ,iBAAAC,qBAAA,8EAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA2hEwC,AAAAgL,sBAAArL;IA3hExCM,qBAAA,AAAAb,gBAAAY;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,IAAAI,aAAA,AAAAC,eAAAN,gBAAAI;YAAA,AAAAG,4CAAAF,WAAA,IAAA,nEAAOY;YAAP,AAAAV,4CAAAF,WAAA,IAAA,nEAAanB;AAAb,AAAA,AAAA,AAAAsB,uBAAAN,SAAA,mFACGe,MAAM,6CAAA,7CAACxB,gFAAQ,iBAAAC,qBAAA;mGAAAwB;AAAA,AAAA,YAAAtB,kBAAA,KAAA;;AAAA,AAAA,IAAAsB,eAAAA;;AAAA,AAAA,IAAArB,yBAAA,AAAAC,cAAAoB;AAAA,AAAA,GAAArB;AAAA,AAAA,IAAAqB,eAAArB;AAAA,AAAA,GAAA,AAAAE,6BAAAmB;AAAA,IAAAlB,sBA0hEsB,AAAAgL,sBAAA9J;IA1hEtBjB,yBAAA,AAAAb,gBAAAY;IAAAmB,WAAA,AAAAhB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAmB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnB;AAAA,IAAAoB,aAAA,AAAAf,eAAAN,oBAAAoB;YAAA,AAAAb,4CAAAc,WAAA,IAAA,nEAAOS;YAAP,AAAAvB,4CAAAc,WAAA,IAAA,nEAAalC;AAAb,AAAA,AAAA,AAAAqB,uBAAAW,SAAA,mFACGW,MAAM,AAAC7C,iDAAgBC,MAAMC;;AADhC,eAAA,CAAAiC,WAAA;;;;AAAA;;;;;AAAA,OAAAX,qBAAA,AAAAC,gBAAAS,UAAA,AAAAG,kFAAA,AAAAV,qBAAAM;;AAAA,OAAAT,qBAAA,AAAAC,gBAAAS,UAAA;;;AAAA,IAAAI,aAAA,AAAAT,gBAAAI;YAAA,AAAAX,4CAAAgB,WAAA,IAAA,nEAAOO;YAAP,AAAAvB,4CAAAgB,WAAA,IAAA,nEAAapC;AAAb,AAAA,OAAA4B,eAAA,+JAAA,AAAAO,kFAAA,AAAAN,eAAAE,7KACGY,MAAM,AAAC7C,iDAAgBC,MAAMC;;;AADhC;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAO,mBAAoBF;;;AADtC,eAAA,CAAAY,WAAA;;;;AAAA;;;;;AAAA,OAAAK,qBAAA,AAAAC,gBAAAR,UAAA,AAAAS,oEAAA,AAAAC,qBAAAjB;;AAAA,OAAAc,qBAAA,AAAAC,gBAAAR,UAAA;;;AAAA,IAAAW,aAAA,AAAAC,gBAAAnB;YAAA,AAAAY,4CAAAM,WAAA,IAAA,nEAAOI;YAAP,AAAAV,4CAAAM,WAAA,IAAA,nEAAa3B;AAAb,AAAA,OAAA6B,eAAA,mFACGE,MAAM,6CAAA,7CAACxB,gFAAQ,iBAAAC,qBAAA;mGAAA8B;AAAA,AAAA,YAAA5B,kBAAA,KAAA;AAAA,AAAA,IAAA4B,eAAAA;;AAAA,AAAA,IAAA3B,yBAAA,AAAAC,cAAA0B;AAAA,AAAA,GAAA3B;AAAA,AAAA,IAAA2B,eAAA3B;AAAA,AAAA,GAAA,AAAAE,6BAAAyB;AAAA,IAAAxB,kBA0hEsB,AAAAgL,sBAAAxJ;IA1hEtBvB,qBAAA,AAAAb,gBAAAY;IAAAyB,WAAA,AAAAtB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAyB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAzB;AAAA,IAAA0B,aAAA,AAAArB,eAAAN,gBAAA0B;YAAA,AAAAnB,4CAAAoB,WAAA,IAAA,nEAAOG;YAAP,AAAAvB,4CAAAoB,WAAA,IAAA,nEAAaxC;AAAb,AAAA,AAAA,AAAAqB,uBAAAiB,SAAA,mFACGK,MAAM,AAAC7C,iDAAgBC,MAAMC;;AADhC,eAAA,CAAAuC,WAAA;;;;AAAA;;;;;AAAA,OAAAjB,qBAAA,AAAAC,gBAAAe,UAAA,AAAAG,kFAAA,AAAAhB,qBAAAY;;AAAA,OAAAf,qBAAA,AAAAC,gBAAAe,UAAA;;;AAAA,IAAAI,aAAA,AAAAf,gBAAAU;YAAA,AAAAjB,4CAAAsB,WAAA,IAAA,nEAAOC;YAAP,AAAAvB,4CAAAsB,WAAA,IAAA,nEAAa1C;AAAb,AAAA,OAAA4B,eAAA,+JAAA,AAAAa,kFAAA,AAAAZ,eAAAQ,7KACGM,MAAM,AAAC7C,iDAAgBC,MAAMC;;;AADhC;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAO,mBAAoBF;cADtC,AAAAmB,oEAAA,AAAAK,eAAArB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAoBF;;;AAI/B,oDAAA,pDAAMuC,gHAEHC,KAAKC;AAFR,AAGE,IAAMC,YAAU,AAACC,+CAAO,AAACC,4CAAIH,aAAaD,MAAMA;AAAhD,AACE,OAAClB,gBAAM,AAACuB,kBAAQ,gDAAA,WAAAC,3DAACC;AAAD,AAAU,6DAAAD,tDAACF,4CAAIF;GAAa,AAACM,eAAKN;;AAEtD;;;sDAAA,tDAAMO,oHAGHC,cAAcT;AAHjB,AAIE,6BAAA,WAAAU,jCAACC;AAAD,AAAW,GAAI,qBAAAD,rBAACE;AAAQ,sDAAAF,/CAACR,gEAASO;;AAAvBC;;GAAyCV;;AAItD,6CAAA,7CAAMa,kGACHC,UAAUd;AADb,AAEE,GACE,6CAAA,7CAACe,iDAAI,AAAC5D,gBAAM6C;AADd,0FAC8Bc;;AAD9B,AAEQ,IAAME,WAAS,AAAClB,kDAAiBgB,UAAUd;IACrCiB,sBAAoB,AAACT,oDAAmBM,UAAUd;AADxD,AAGE,sDAAA,/CAACkB,kIAAQJ,kBAAW,CAACD,2EAAAA,yGAAAA,hCAAUG,qFAAAA,5EAASC,qFAAAA;;;;AAEpD;;;;;;gDAAA,hDAAME,wGAMH5D;AANH,AAOE,IAAMyC,eAAa,AAAC1C,sDAAqBC;IACnC6D,aAAW,AAACvC,gBAAM,AAACwC,6CAAK,AAACd,eAAKhD;IAC9B+D,eAAa,AAACT,2CAAUO,WAAWpB;AAFzC,AAGE,OAACxC,6CAAK,AAAC+D,uBAAY,iBAAA9D,qBAAA,sEAAA+D;AAAA,AAAA,YAAA7D,kBAAA,KAAA;AAAA,AAAA,IAAA6D,eAAAA;;AAAA,AAAA,IAAA5D,qBAAA,AAAAC,cAAA2D;AAAA,AAAA,GAAA5D;AAAA,AAAA,IAAA4D,eAAA5D;AAAA,AAAA,GAAA,AAAAE,6BAAA0D;AAAA,IAAAzD,kBAs/D4B,AAAAgL,sBAAAvH;IAt/D5BxD,qBAAA,AAAAb,gBAAAY;IAAA0D,WAAA,AAAAvD,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA0D,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA1D;AAAA,WAAA,AAAAK,eAAAN,gBAAA2D,tCAAM3B;AAAN,AAAA,AAAA,AAAAxB,uBAAAkD,SAAA,mFACE1B,KAAK,AAACI,4CAAI5C,SAASwC;;AADrB,eAAA,CAAA2B,WAAA;;;;AAAA;;;;;AAAA,OAAAlD,qBAAA,AAAAC,gBAAAgD,UAAA,AAAAE,4DAAA,AAAAhD,qBAAA6C;;AAAA,OAAAhD,qBAAA,AAAAC,gBAAAgD,UAAA;;;AAAA,WAAA,AAAA5C,gBAAA2C,vBAAMzB;AAAN,AAAA,OAAAjB,eAAA,2JAAA,AAAA6C,4DAAA,AAAA5C,eAAAyC,nJACEzB,KAAK,AAACI,4CAAI5C,SAASwC;;;AADrB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAtC,mBAAW6D;;;AAYlC;;;yCAAA,zCAAMM,0FAEHC;AAFH,AAGE,GAAI,WAAA,VAAMA;AAAV;;AAEE,qCAAA,OAAA,rCAACC,uBAAQD;;;AAEb,uDAAA,vDAAME,sHAEHC;AAFH,AAGE,oDAAA,7CAACxE,gFAAQ,iBAAAC,qBAAA,6EAAAwE;AAAA,AAAA,YAAAtE,kBAAA,KAAA;AAAA,AAAA,IAAAsE,eAAAA;;AAAA,AAAA,IAAArE,qBAAA,AAAAC,cAAAoE;AAAA,AAAA,GAAArE;AAAA,AAAA,IAAAqE,eAAArE;AAAA,AAAA,GAAA,AAAAE,6BAAAmE;AAAA,IAAAlE,kBAg+DwC,AAAAgL,sBAAA9G;IAh+DxCjE,qBAAA,AAAAb,gBAAAY;IAAAmE,WAAA,AAAAhE,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAmE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnE;AAAA,IAAAoE,aAAA,AAAA/D,eAAAN,gBAAAoE;sBAAA,AAAA7D,4CAAA8D,WAAA,IAAA,7EAAOG;cAAP,AAAAjE,4CAAA8D,WAAA,IAAA,rEAAuBI;WAAvB,AAAAlE,4CAAA8D,WAAA,IAAA,lEAA+BK;oBAA/B,AAAAnE,4CAAA8D,WAAA,IAAA,3EAAoCM;AAApC,AAAA,AAAA,AAAAnE,uBAAA2D,SAAA,2IAAA,2CAAA,2GAAA,yEAAA,vRACG,AAACN,uCAAMW,uHACG,AAACX,uCAAMY,8DACV,AAACG,cAAIF,mEAEX,6CAAA,7CAACjF,+EAAS,iBAAAC,qBAAA;kGAAAmF;AAAA,AAAA,YAAAjF,kBAAA,KAAA;;AAAA,AAAA,IAAAiF,eAAAA;;AAAA,AAAA,IAAAhF,yBAAA,AAAAC,cAAA+E;AAAA,AAAA,GAAAhF;AAAA,AAAA,IAAAgF,eAAAhF;AAAA,AAAA,GAAA,AAAAE,6BAAA8E;AAAA,IAAA7E,sBA29D0B,AAAAgL,sBAAAnG;IA39D1B5E,yBAAA,AAAAb,gBAAAY;IAAA8E,WAAA,AAAA3E,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA8E,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA9E;AAAA,IAAA+E,aAAA,AAAA1E,eAAAN,oBAAA+E;wBAAA,AAAAxE,4CAAAyE,WAAA,IAAA,/EAAOS;QAAP,AAAAlF,4CAAAyE,WAAA,IAAA,/DAAyBU;AAAzB,AAAA,AAAA,AAAAlF,uBAAAsE,SACE,AAACjB,uCAAM4B;;AADT,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAtE,qBAAA,AAAAC,gBAAAoE,UAAA,AAAAG,iFAAA,AAAArE,qBAAAiE;;AAAA,OAAApE,qBAAA,AAAAC,gBAAAoE,UAAA;;;AAAA,IAAAI,aAAA,AAAApE,gBAAA+D;wBAAA,AAAAtE,4CAAA2E,WAAA,IAAA,/EAAOO;QAAP,AAAAlF,4CAAA2E,WAAA,IAAA,/DAAyBQ;AAAzB,AAAA,OAAA3E,yEAAA,AAAAkE,iFAAA,AAAAjE,eAAA6D,1JACE,AAAChB,uCAAM4B;;;AADT;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAA/F,mBAA4BiF;;;AAL1C,eAAA,CAAAP,WAAA;;;;AAAA;;;;;AAAA,OAAA3D,qBAAA,AAAAC,gBAAAyD,UAAA,AAAAG,mEAAA,AAAA1D,qBAAAsD;;AAAA,OAAAzD,qBAAA,AAAAC,gBAAAyD,UAAA;;;AAAA,IAAAI,aAAA,AAAAzD,gBAAAoD;sBAAA,AAAA3D,4CAAAgE,WAAA,IAAA,7EAAOC;cAAP,AAAAjE,4CAAAgE,WAAA,IAAA,rEAAuBE;WAAvB,AAAAlE,4CAAAgE,WAAA,IAAA,lEAA+BG;oBAA/B,AAAAnE,4CAAAgE,WAAA,IAAA,3EAAoCI;AAApC,AAAA,OAAA5D,eAAA,2IAAA,2CAAA,2GAAA,yEAAA,vRACG,AAAC8C,uCAAMW,uHACG,AAACX,uCAAMY,8DACV,AAACG,cAAIF,mEAEX,6CAAA,7CAACjF,+EAAS,iBAAAC,qBAAA;kGAAAyF;AAAA,AAAA,YAAAvF,kBAAA,KAAA;AAAA,AAAA,IAAAuF,eAAAA;;AAAA,AAAA,IAAAtF,yBAAA,AAAAC,cAAAqF;AAAA,AAAA,GAAAtF;AAAA,AAAA,IAAAsF,eAAAtF;AAAA,AAAA,GAAA,AAAAE,6BAAAoF;AAAA,IAAAnF,kBA29D0B,AAAAgL,sBAAA7F;IA39D1BlF,qBAAA,AAAAb,gBAAAY;IAAAoF,WAAA,AAAAjF,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAoF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAApF;AAAA,IAAAqF,aAAA,AAAAhF,eAAAN,gBAAAqF;wBAAA,AAAA9E,4CAAA+E,WAAA,IAAA,/EAAOG;QAAP,AAAAlF,4CAAA+E,WAAA,IAAA,/DAAyBI;AAAzB,AAAA,AAAA,AAAAlF,uBAAA4E,SACE,AAACvB,uCAAM4B;;AADT,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAA5E,qBAAA,AAAAC,gBAAA0E,UAAA,AAAAG,iFAAA,AAAA3E,qBAAAuE;;AAAA,OAAA1E,qBAAA,AAAAC,gBAAA0E,UAAA;;;AAAA,IAAAI,aAAA,AAAA1E,gBAAAqE;wBAAA,AAAA5E,4CAAAiF,WAAA,IAAA,/EAAOC;QAAP,AAAAlF,4CAAAiF,WAAA,IAAA,/DAAyBE;AAAzB,AAAA,OAAA3E,yEAAA,AAAAwE,iFAAA,AAAAvE,eAAAmE,1JACE,AAACtB,uCAAM4B;;;AADT;;;;GAAA,KAAA;;;AAAA,AAAA,OAAA/F,mBAA4BiF;sBAL1C,AAAAL,mEAAA,AAAAtD,eAAAkD;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxE,mBAAmDuE;;;AAU9D;;;;+CAAA,/CAAM0B,sGAIHC,SAASC;AAJZ,AAKE,OAACC,gDAAMF,SACA,AAAChB,cAAI,+CAAA,WAAAmB,1DAACC;AAAD,AAAS,UAAK,0BAAA,iFAAA,UAAA,uBAAAD,5IAACE;GAAwBJ;;AAErD;;;;0DAAA,2EAAAK,rIAAMI,4HAKH9G;AALH,AAAA,IAAA2G,aAAAD;WAAA,AAAA3F,4CAAA4F,WAAA,IAAA,lEAKanE;IALboE,aAAA,AAAA7F,4CAAA4F,WAAA,IAAA;IAAAC,iBAAA,AAAAC,4BAAAD;cAAA,AAAAhE,4CAAAgE,eAAA,rEAK0B3B;eAL1B,AAAArC,4CAAAgE,eAAA,tEAKkCG;WALlC,AAAAnE,4CAAAgE,eAAA,lEAK2C1B;AAL3C,AAME,IAAA8B,aAMM,AAACpE,4CAAI5C,SAASwC;IANpBwE,iBAAA,AAAAH,4BAAAG;uBAAA,AAAApE,4CAAAoE,eAAA,2DAAA,zIAAOC;oBAAP,AAAArE,4CAAAoE,eAAA,qDAAA,hIACOE;wBADP,AAAAtE,4CAAAoE,eAAA,6DAAA,5IAEOG;AAFP,AAOE,mEAAA,2CAAA,yLAAA,sHAAA,tZAACC,8CAAMpH,SAASwC,2GACK,6CAAKyE,8DAAiBhC,wEACtB,AAACkB,6CAAYe,cAAchC,mEAC3B,AAACiB,6CAAYgB,kBAAkBJ;;AAExD,yDAAA,zDAAMM,0HAEH5C;AAFH,AAGE,8GAAA,vGAAC6C,+CACCR,2FAGA,AAACQ,+CACCC,iBACA,iBAAArH,qBAAA,+EAAAsH;AAAA,AAAA,YAAApH,kBAAA,KAAA;AAAA,AAAA,IAAAoH,eAAAA;;AAAA,AAAA,IAAAnH,qBAAA,AAAAC,cAAAkH;AAAA,AAAA,GAAAnH;AAAA,AAAA,IAAAmH,eAAAnH;AAAA,AAAA,GAAA,AAAAE,6BAAAiH;AAAA,IAAAhH,kBAm7D6C,AAAAgL,sBAAAhE;IAn7D7C/G,qBAAA,AAAAb,gBAAAY;IAAAiH,WAAA,AAAA9G,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAiH,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjH;AAAA,IAAAkH,aAAA,AAAA7G,eAAAN,gBAAAkH;sBAAA,AAAA3G,4CAAA4G,WAAA,IAAA,7EAAO3C;QAAP,AAAAjE,4CAAA4G,WAAA,IAAA,/DAAuBzB;YAAvB,AAAAnF,4CAAA4G,WAAA,IAAA,nEAAyBzB;oBAAzB,AAAAnF,4CAAA4G,WAAA,IAAA,3EAA2BxC;AAA3B,AAAA,AAAA,AAAAnE,uBAAAyG,SACG,6CAAA,7CAACxH,gFAAQ,iBAAAC,qBAAA;oGAAA4H;AAAA,AAAA,YAAA1H,kBAAA,KAAA;;AAAA,AAAA,IAAA0H,eAAAA;;AAAA,AAAA,IAAAzH,yBAAA,AAAAC,cAAAwH;AAAA,AAAA,GAAAzH;AAAA,AAAA,IAAAyH,eAAAzH;AAAA,AAAA,GAAA,AAAAE,6BAAAuH;AAAA,IAAAtH,sBAk7DiC,AAAAgL,sBAAA1D;IAl7DjCrH,yBAAA,AAAAb,gBAAAY;IAAAuH,WAAA,AAAApH,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAuH,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvH;AAAA,IAAAwH,aAAA,AAAAnH,eAAAN,oBAAAwH;wBAAA,AAAAjH,4CAAAkH,WAAA,IAAA,/EAAOhC;2BAAP,AAAAlF,4CAAAkH,WAAA,IAAA,lFAAyBS;wBAAzB,AAAA3H,4CAAAkH,WAAA,IAAA,/EAA8CU;AAA9C,AAAA,AAAA,AAAA3H,uBAAA+G,SAAA,6IAAA,2CAAA,wHAAA,wJAAA,6DAAA,lbAEG,AAAC1D,uCAAM4B,yHACO,AAAC5B,uCAAMqE,2EACP,+BAAA,7BAAI,sBAAA,rBAAMC,8DACJ,AAACvD,cAAIuD,gIACT,AAACtE,uCAAMW;;AAN1B,eAAA,CAAAgD,WAAA;;;;AAAA;;;;;AAAA,OAAA/G,qBAAA,AAAAC,gBAAA6G,UAAA,AAAAG,mFAAA,AAAA9G,qBAAA0G;;AAAA,OAAA7G,qBAAA,AAAAC,gBAAA6G,UAAA;;;AAAA,IAAAI,aAAA,AAAA7G,gBAAAwG;wBAAA,AAAA/G,4CAAAoH,WAAA,IAAA,/EAAOlC;2BAAP,AAAAlF,4CAAAoH,WAAA,IAAA,lFAAyBO;wBAAzB,AAAA3H,4CAAAoH,WAAA,IAAA,/EAA8CQ;AAA9C,AAAA,OAAApH,eAAA,6IAAA,2CAAA,wHAAA,wJAAA,6DAAA,yHAAA,AAAA2G,mFAAA,AAAA1G,eAAAsG,7oBAEG,AAACzD,uCAAM4B,yHACO,AAAC5B,uCAAMqE,2EACP,+BAAA,7BAAI,sBAAA,rBAAMC,8DACJ,AAACvD,cAAIuD,gIACT,AAACtE,uCAAMW;;;AAN1B;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAA9E,mBACMiF;;;AAFlB,eAAA,CAAAuC,WAAA;;;;AAAA;;;;;AAAA,OAAAzG,qBAAA,AAAAC,gBAAAuG,UAAA,AAAAG,qEAAA,AAAAxG,qBAAAoG;;AAAA,OAAAvG,qBAAA,AAAAC,gBAAAuG,UAAA;;;AAAA,IAAAI,aAAA,AAAAvG,gBAAAkG;sBAAA,AAAAzG,4CAAA8G,WAAA,IAAA,7EAAO7C;QAAP,AAAAjE,4CAAA8G,WAAA,IAAA,/DAAuB3B;YAAvB,AAAAnF,4CAAA8G,WAAA,IAAA,nEAAyB3B;oBAAzB,AAAAnF,4CAAA8G,WAAA,IAAA,3EAA2B1C;AAA3B,AAAA,OAAA5D,eACG,6CAAA,7CAACtB,gFAAQ,iBAAAC,qBAAA;oGAAAkI;AAAA,AAAA,YAAAhI,kBAAA,KAAA;AAAA,AAAA,IAAAgI,eAAAA;;AAAA,AAAA,IAAA/H,yBAAA,AAAAC,cAAA8H;AAAA,AAAA,GAAA/H;AAAA,AAAA,IAAA+H,eAAA/H;AAAA,AAAA,GAAA,AAAAE,6BAAA6H;AAAA,IAAA5H,kBAk7DiC,AAAAgL,sBAAApD;IAl7DjC3H,qBAAA,AAAAb,gBAAAY;IAAA6H,WAAA,AAAA1H,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA6H,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA7H;AAAA,IAAA8H,aAAA,AAAAzH,eAAAN,gBAAA8H;wBAAA,AAAAvH,4CAAAwH,WAAA,IAAA,/EAAOtC;2BAAP,AAAAlF,4CAAAwH,WAAA,IAAA,lFAAyBG;wBAAzB,AAAA3H,4CAAAwH,WAAA,IAAA,/EAA8CI;AAA9C,AAAA,AAAA,AAAA3H,uBAAAqH,SAAA,6IAAA,2CAAA,wHAAA,wJAAA,6DAAA,lbAEG,AAAChE,uCAAM4B,yHACO,AAAC5B,uCAAMqE,2EACP,+BAAA,7BAAI,sBAAA,rBAAMC,8DACJ,AAACvD,cAAIuD,gIACT,AAACtE,uCAAMW;;AAN1B,eAAA,CAAAsD,WAAA;;;;AAAA;;;;;AAAA,OAAArH,qBAAA,AAAAC,gBAAAmH,UAAA,AAAAG,mFAAA,AAAApH,qBAAAgH;;AAAA,OAAAnH,qBAAA,AAAAC,gBAAAmH,UAAA;;;AAAA,IAAAI,aAAA,AAAAnH,gBAAA8G;wBAAA,AAAArH,4CAAA0H,WAAA,IAAA,/EAAOxC;2BAAP,AAAAlF,4CAAA0H,WAAA,IAAA,lFAAyBC;wBAAzB,AAAA3H,4CAAA0H,WAAA,IAAA,/EAA8CE;AAA9C,AAAA,OAAApH,eAAA,6IAAA,2CAAA,wHAAA,wJAAA,6DAAA,yHAAA,AAAAiH,mFAAA,AAAAhH,eAAA4G,7oBAEG,AAAC/D,uCAAM4B,yHACO,AAAC5B,uCAAMqE,2EACP,+BAAA,7BAAI,sBAAA,rBAAMC,8DACJ,AAACvD,cAAIuD,gIACT,AAACtE,uCAAMW;;;AAN1B;;;;GAAA,KAAA;;;AAAA,AAAA,OAAA9E,mBACMiF;MAFlB,AAAAyC,qEAAA,AAAApG,eAAAgG;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAtH,mBAA0CuE;;;AAShD,AAAC4C,uDAAsB7H;AAIvB,mDAAA,nDAAMoJ,8GAGH1D,KAAK2D;AAHR,AAAA,0FAAA,8CAAA,SAKI,kDAAA,lDAACC,uDAAe,4CAAA,WAAAC,vDAACC;AAAD,AAAM,oBAAI,2FAAAD,4CAAAA,tIAACF,8CAAAA,gEAAAA;AAAL,0FAAA,wDAAA,2CAAA,oDAAAE,yBAAAA;;AAAA,0FAAA,qDAAA,2CAAA,oDAAAA,yBAAAA;;GAGD,AAACjF,6CAAKoB;;AAE/B;;;kDAAA,lDAAM+D,4GAEH3E;AAFH,AAIE,GAAI,OAASA;AACXA;;AACA,IAAA4E,WAAgB,AAACC,eAAK7E;AAAtB,AAAA,sKAAA4E,sEAAAA,pOAACD,gFAAAA,0FAAAA;;;AAEL,iDAAA,jDAAMG,0GACHC;AADH,AAEE,yFAAA,IAAA,tFAAC9E,uBAAQ,AAAC0E,gDAAeI;;AAE3B,0CAAA,1CAAMC,4FACHD;AADH,AAAA,0FAAA,gDAAA,2CAAA,wDAAA,SAAA,sIAAA,jFAE6B,CAAA,IAAS,AAACD,+CAAcC;;AAErD;;;kDAAA,lDAAeE,4GAKZC;AALH,AAAA,0FAAA,kDAOG,iBAAAtJ,qBAAA,wEAAAuJ;AAAA,AAAA,YAAArJ,kBAAA,KAAA;AAAA,AAAA,IAAAqJ,eAAAA;;AAAA,AAAA,IAAApJ,qBAAA,AAAAC,cAAAmJ;AAAA,AAAA,GAAApJ;AAAA,AAAA,IAAAoJ,eAAApJ;AAAA,AAAA,GAAA,AAAAE,6BAAAkJ;AAAA,IAAAjJ,kBAq4DgD,AAAAgL,sBAAA/B;IAr4DhDhJ,qBAAA,AAAAb,gBAAAY;IAAAkJ,WAAA,AAAA/I,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAkJ,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAlJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAmJ,nCAAME;AAAN,AAAA,IACYC,SAAO,AAACtI,eAAK,AAACuI,uCAAcF;AADxC,AAAA,AAAA,AAAA7I,uBAAA0I,SAAA,mFAAA,gDAAA,2CAAA,oDAEaG,UACV,AAACG,6CAAK,AAACV,wCAAOQ,QAAQ,AAACb,gDAAea;;AAHzC,eAAA,CAAAH,WAAA;;;;AAAA;;;;;AAAA,OAAA1I,qBAAA,AAAAC,gBAAAwI,UAAA,AAAAE,8DAAA,AAAAxI,qBAAAqI;;AAAA,OAAAxI,qBAAA,AAAAC,gBAAAwI,UAAA;;;AAAA,QAAA,AAAApI,gBAAAmI,pBAAMI;AAAN,AAAA,IACYC,SAAO,AAACtI,eAAK,AAACuI,uCAAcF;AADxC,AAAA,OAAAtI,eAAA,mFAAA,gDAAA,2CAAA,4NAAA,AAAAqI,8DAAA,AAAApI,eAAAiI,rPAEaI,UACV,AAACG,6CAAK,AAACV,wCAAOQ,QAAQ,AAACb,gDAAea;;;AAHzC;;;;GAAA,KAAA;;AAAA,AAAA,OAAA5J,mBAAQsJ;;;;AAOX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAAA,pDAAeS,gHA8BZC,UAAUC,WAAWnK;AA9BxB,AA+BE,IAAMoK,iBAAe,AAACC,gDAAO,AAACC,+CACC,AAAClF,cAAI,AAACkC,+CAAOiD,kBACA,4CAAA,5CAACvB,iGAAU,AAACwB,eAAKxK,aAC9ByK;AAH/B,AAIE,kBAAKP,cAAUC,eAAWnK;AAA1B,AAGE,oDAAA,mFAAA,mDAAA,mFAAA,uEAAA,mFAAA,mDAAA,wJAAA,cAAA,znBAACC,uTACWiK,+OACEQ,sDAAoBN;AAFlC,AAAA;2BAGM,iBAAAlK,qBAAA,0EAAAyK;AAAA,AAAA,YAAAvK,kBAAA,KAAA;AAAA,AAAA,IAAAuK,eAAAA;;AAAA,AAAA,IAAAtK,qBAAA,AAAAC,cAAAqK;AAAA,AAAA,GAAAtK;AAAA,AAAA,IAAAsK,eAAAtK;AAAA,AAAA,GAAA,AAAAE,6BAAAoK;AAAA,IAAAnK,kBAq1DuC,AAAAgL,sBAAAb;IAr1DvClK,qBAAA,AAAAb,gBAAAY;IAAAoK,WAAA,AAAAjK,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAoK,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAApK;AAAA,IAAAqK,aAAA,AAAAhK,eAAAN,gBAAAqK;gBAAA,AAAA9J,4CAAA+J,WAAA,IAAA,vEAAOzB;IAAP0B,aAAA,AAAAhK,4CAAA+J,WAAA,IAAA;IAAAC,iBAAA,AAAAlE,4BAAAkE;cAAA,AAAAnI,4CAAAmI,eAAA,rEAAyB9F;WAAzB,AAAArC,4CAAAmI,eAAA,lEAAiC7F;eAAjC,AAAAtC,4CAAAmI,eAAA,tEAAsChE;AAAtC,AAAA,IAEY8B,gBAAc,wCAAA,AAAAsC,xCAACC,wDAAmBhB;IAClCiB,cAAY,AAACtB,uCAAcV;AAHvC,AAAA,GAIY,EAAI,AAAC7F,6CAAE,AAAC5D,gBAAMiJ,eAAe,gBAAA,AAAAsC,hBAACvL,gCAAOwK,uBACjC,AAACkB,0BAAQzC,cAAc3D;AALvC,AAAA,AAAAlE,uBAAA4J,SAAA,mFAAA,mDAAA,2CAAA,sEAAA,mFAAA,iDAAA,2CAAA,oQAAA,mFAAA,8FAAA,mBAAA,zoBAMcvB,mPACD,AAACD,+CAAciC,qBAAcA,YACtC,AAAC/B,wCAAO+B,qBACT,AAACzC,iDAAgB1D,KAAK2D,gJAClB,AAACkB,uCAAc9E,aAAakF,2BAChC,AAACZ,gDAAexC;;AAXnB,eAAA,CAAA8D,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAA5J,qBAAA,AAAAC,gBAAA0J,UAAA,AAAAI,gEAAA,AAAA5J,qBAAAuJ;;AAAA,OAAA1J,qBAAA,AAAAC,gBAAA0J,UAAA;;;AAAA,IAAAK,aAAA,AAAA3J,gBAAAqJ;gBAAA,AAAA5J,4CAAAkK,WAAA,IAAA,vEAAO5B;IAAP6B,aAAA,AAAAnK,4CAAAkK,WAAA,IAAA;IAAAC,iBAAA,AAAArE,4BAAAqE;cAAA,AAAAtI,4CAAAsI,eAAA,rEAAyBjG;WAAzB,AAAArC,4CAAAsI,eAAA,lEAAiChG;eAAjC,AAAAtC,4CAAAsI,eAAA,tEAAsCnE;AAAtC,AAAA,IAEY8B,gBAAc,wCAAA,AAAAsC,xCAACC,wDAAmBhB;IAClCiB,cAAY,AAACtB,uCAAcV;AAHvC,AAAA,GAIY,EAAI,AAAC7F,6CAAE,AAAC5D,gBAAMiJ,eAAe,gBAAA,AAAAsC,hBAACvL,gCAAOwK,uBACjC,AAACkB,0BAAQzC,cAAc3D;AALvC,OAAA3D,eAAA,mFAAA,mDAAA,2CAAA,sEAAA,mFAAA,iDAAA,2CAAA,oQAAA,mFAAA,8FAAA,mBAAA,8EAAA,AAAAyJ,gEAAA,AAAAxJ,eAAAmJ,tyBAMctB,mPACD,AAACD,+CAAciC,qBAAcA,YACtC,AAAC/B,wCAAO+B,qBACT,AAACzC,iDAAgB1D,KAAK2D,gJAClB,AAACkB,uCAAc9E,aAAakF,2BAChC,AAACZ,gDAAexC;;AAXnB,eAAA,AAAAvF,eAAAmJ;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAzK,mBACM,AAAC0D,8CAAa5D;;;;;AAYhC,yDAAA,zDAAeuL,0HAEZ9G;AAFH,AAGE;AAAA,AAAA,0FAAA,mDAAA,qIAAA,cAAA,+FAAA,qIAAA,iBAAA,rTAEKwF,iFACiB,AAACzF,qDAAoBC,4GACtCwF,iFACiB,AAAC5C,uDAAsB5C","names":["website-helpers.filterable-items/Name","website-helpers.filterable-items/Details","website-helpers.filterable-items/Tag","website-helpers.filterable-items/Experiences","website-helpers.filterable-items/Info","website-helpers.filterable-items/DataMap","website-helpers.filterable-items/example-experiences-orig","website-helpers.filterable-items/example-experiences","website-helpers.filterable-items/calc-similarity","info1","info2","cljs.core/count","clojure.set.intersection","website-helpers.filterable-items/Similarities","website-helpers.filterable-items/get-all-similarities","data-map","cljs.core.into","iter__5523__auto__","s__28830","cljs.core/LazySeq","temp__5825__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__28832","cljs.core/chunk-buffer","i__28831","vec__28843","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28829","cljs.core/chunk-rest","vec__28868","cljs.core/first","cljs.core/cons","cljs.core/rest","name1","s__28847","b__28849","i__28848","vec__28857","iter__28846","vec__28861","s__28874","b__28876","i__28875","vec__28885","iter__28873","vec__28892","name2","website-helpers.filterable-items/get-closest-name","name","similarities","distances","cljs.core.dissoc","cljs.core.get","cljs.core/reverse","p1__28907#","cljs.core.sort_by","cljs.core/keys","website-helpers.filterable-items/prune-similarities","name-to-prune","p1__28928#","clojure.walk/postwalk","cljs.core/map?","website-helpers.filterable-items/-get-rest","last-name","cljs.core._EQ_","cur-name","pruned-similarities","cljs.core.concat","website-helpers.filterable-items/sort-by-tags","start-name","cljs.core.sort","sorted-names","cljs.core/sorted-map","s__29031","b__29033","i__29032","iter__29030","website-helpers.filterable-items/clean","string","clojure.string/replace","website-helpers.filterable-items/make-experience-map","raw-experiences","s__29170","b__29172","i__29171","vec__29208","iter__29169","vec__29311","experience-name","details","tags","mental-states","cljs.core/set","s__29253","b__29255","i__29254","vec__29280","iter__29252","vec__29292","s__29329","b__29331","i__29330","vec__29355","iter__29328","vec__29374","mental-state-name","_","website-helpers.filterable-items/accrete-set","existing","new","clojure.set.union","p1__29384#","cljs.core.filter","cljs.core/contains?","p__29429","vec__29440","map__29443","cljs.core/--destructure-map","website-helpers.filterable-items/-accrete-mental-states","children","map__29456","existing-details","existing-tags","existing-children","cljs.core.assoc","website-helpers.filterable-items/make-mental-state-map","cljs.core.reduce","cljs.core/concat","s__29504","b__29506","i__29505","vec__29513","iter__29503","vec__29620","s__29547","b__29549","i__29548","vec__29551","iter__29546","vec__29586","s__29625","b__29627","i__29626","vec__29648","iter__29624","vec__29674","mental-state-details","mental-state-tags","website-helpers.filterable-items/make-tag-hiccup","selected-tags","cljs.core.interpose","p1__29699#","cljs.core.map","website-helpers.filterable-items/get-raw-string","G__29703","cljs.core/last","website-helpers.filterable-items/anchor-string","item-name","website-helpers.filterable-items/anchor","website-helpers.filterable-items/list-to-hiccup","strings","s__29719","b__29721","i__29720","iter__29718","s","hiccup","website-helpers.utils/my-md->hiccup","cljs.core.conj","website-helpers.filterable-items/aggregated-items","data-name","other-name","tag-selections","reagent.core.atom","website-helpers.utils/get-url-param-selections","clojure.set/union","cljs.core/vals","website-helpers.global/url-params","website-helpers.common-components/dropdown-check-list","s__29768","b__29770","i__29769","vec__29773","map__29776","iter__29767","vec__29791","map__29794","cljs.core/deref","website-helpers.utils/get-selected-vars","hiccup-name","clojure.set/subset?","website-helpers.filterable-items/make-aggregated-items","cljs.core/chunk-first"],"sourcesContent":["(ns website-helpers.filterable-items\n  (:require\n    [website-helpers.common-components :refer [dropdown-check-list]]\n    [website-helpers.utils :refer [get-url-param-selections get-selected-vars\n                                   my-md->hiccup]]\n    [website-helpers.schemas :refer [Hiccup ReagentComponent]]\n    [website-helpers.global :refer [url-params]]\n    [clojure.set :refer [union intersection subset?]]\n    [clojure.string :refer [split replace join includes? capitalize]]\n    [clojure.walk :refer [postwalk]]\n    [reagent.core :as r]))\n\n(def Name :string)\n(def Details\n  \"A more detailed description of a specific experience or mental-state.\" :string)\n(def Tag :string)\n(def Experiences\n  \"A syntax for writing experiences, to be parsed into maps for easier coding.\n  Experiences are on the outer layer.\"\n  [:vector [:tuple\n            Name\n            Details\n            [:vector Tag]\n            [:vector [:or\n                      [:tuple Name] \n                      [:tuple Name Details] \n                      [:tuple Name Details [:vector Tag]]]]]])\n\n(def Info\n  [:map [:details Details]\n        [:tags [:set Tag]]\n        [:children [:set Name]]])\n(def DataMap\n  [:map-of Name Info])\n\n(def example-experiences-orig\n  [[\"Comparing prices\"\n    \"When buying a good or service, comparing many alternatives to find the\n    best price. For example, looking at the price per pound of various grocery\n    items and picking the one with the lowest price.\"\n    [\"habit\"]\n    [[\"Financial Control\"\n      \"A sense that you are living within or below your means.\"\n      [\"positive\"]]\n     [\"Optimization problem\"\n      \"Involves constantly scanning many options and determining the best one.\"\n      [\"engaging\"]]]]\n   [\"[Slipways](https://slipways.net/)\"\n    \"A video game about colonizing planets and connecting them with trade\n    routes.\"\n    [\"game\" \"solitary\"]\n    [[\"Optimization problem\"]]]\n   [\"Weights\" \"\" [\"exercise\"] []]\n   [\"Drugs\" \"\" [\"habit\"] []]\n   [\"Running\" \"\" [\"exercise\"] []]])\n               \n\n(def example-experiences\n  [[\"Comparing prices\"\n    \"When buying a good or service, comparing many alternatives to find the\n  best price. For example, looking at the price per pound of various grocery\n  items and picking the one with the lowest price.\"\n    [\"habit\"]\n    [[\"Financial Control\"\n      \"A feeling that you understand and are in control of your finances.\"\n      [\"positive\"]]\n     [\"Scanning through possibilities\"\n      \"Constantly examining many options and determining the best one by some\n    usually simple criteria.\"\n      [\"engaging\"]]]]\n\n   [\"[Bike Commuting](https://kovasap.github.io/docs/lifestyle-optimizations/bike-commuting/)\"\n    \"Using a bike to fulfill daily transportation needs. Best with combined with\n  audiobooks or podcasts.\"\n    [\"lifestyle\" \"exercise\"]\n    [[\"Relaxing\"\n      \"Feeling comfortable and liable to zone out.\"\n      [\"positive\"]]]]\n\n   [\"Lead Climbing in a Gym\" \n    \"Clipping quickdraws on the way up a climbing route in a gym.\"\n    [\"climbing\" \"exercise\" \"\u2b50top10\" \"social\"]\n    [[\"Thrill of Committment\"\n      \"Doing something with a penalty for failure that you can't turn back from.\"]\n     [\"Triumph over Exposure\"\n      \"Putting yourself in a stressful situation and showing yourself that you\n    can survive in it. I think this is a feeling Marc-Andr\u00e9 Leclerc was chasing\n    in the movie 'The Alpinist'.\"]\n     [\"Having a clear goal\"\n      \"The feeling of knowing exactly what you need to do.\"]\n     [\"Being in the Zone\"]]]\n\n   [\"[Backpack Hero](https://thejaspel.itch.io/backpack-hero)\"\n    \"A cool rougelike game about arranging a grid inventory optimally.\"\n    [\"game\" \"turn-based\"]\n    []]\n\n   [\"Redditing\"\n    \"Browsing reddit. Some good subreddits include r/AnimalsBeingDerps and\n  r/DataIsBeautiful. Warning: can be a big time sink!\"\n    [\"habit\" \"consuming content\"]\n    [[\"Easy to do\"\n      \"Requires little to no difficult decision making, so is therefore easy to\n    pick up and do. This can lead to impulsively doing this thing too much.\"]\n     [\"Joy of sharing\"\n      \"The feeling you get when you find something cool and share it with someone\n    else.\"]\n     [\"Focus fragmenting\"\n      \"The feeling of constantly having your focus redirected, preventing you\n    from going deeper on any one particular thing.\"]\n     [\"Discovery of hidden gems\"\n      \"Most of the time this activity is monotonous and/or forgettable, but\n    occasionally it will yield an extremely memorable or life-changing\n    experience.\"]]]\n\n   [\"Browsing Hacker News\"\n    \"Like browsing reddit.\"\n    [\"habit\" \"consuming content\"]\n    [[\"Easy to do\"]\n     [\"Discovery of hidden gems\"]]]\n\n   [\"Watching educational YouTube\"\n    \"This includes watching videos from channels like\n  [Veritasium](https://www.youtube.com/user/1veritasium), \n  [CGP Grey](https://www.youtube.com/user/CGPGrey),\n  and [Kurzgesagt](https://www.youtube.com/user/Kurzgesagt).\"\n    [\"consuming content\"]\n    [[\"Wonder\"\n      \"A sense of wonder at the beauty of the world.\"]]]\n\n   [\"Watching GothamChess\"\n    \"Watching the GothamChess YouTube channel.\"\n    [\"consuming content\"]\n    [[\"Easy to do\"]\n     [\"False Understanding\"\n      \"A state of mind where something seems to make sense emotionally, but if\n    you were to try to explain it in your own words or otherwise apply the\n    knowledge you would fail.\"]\n     [\"Relaxing\"]]]\n\n   [\"Watching Spiderman: Into the Spider-Verse\"\n    \"Great story, cool themes about family and parenting.  Also about self\n  discovery. Quintessential all-ages kind of film.\"\n    [\"movie\" \"consuming content\"]\n    []]\n\n   [\"Watching Inside Out\"\n    \"I loved the modelling of the mind as a collection of different emotions\n  competing for control.  Really made me get invested with the main character,\n  and made me cry when things started going poorly for her at one point.\n  Discussing this movie might be a good way to connect with people that\n  are otherwise fairly different.  \n  \"\n    [\"movie\" \"consuming content\"]\n    []]\n\n   [\"Watching The Matrix\"\n    \"Watched with my Dad after being told that it would be very hard to understand.\n  Turned out that wasn't true for either of us.\n\n  Excellent sci-fi, where sci-fi is defined as a medium that explores how new\n  plausible technologies would affect the world.  Action/style was very compelling\n  to.  Favorite movie for many years, perhaps even still in some ways.\n\n  I think the sequels are pretty good, unlike many others.\"\n    [\"movie\" \"consuming content\"]\n    []]\n\n   [\"Drafting Magic: The Gathering\"\n    \"My first experience was 'that complex card game that older kids played' when\n  I was very young.  Faintly remember that I specifically thought the lands were\n  really cool, have specific memory of the plains.  \n\n  Started playing first from a friend's cube (a collection of cards you can draft\n  decks from and then play each other in a tournament style).  Was pretty\n  intense/overwhelming at first, but in a good way.  \n\n  Since have played a bunch on MTG: Arena, a very polished computer interface\n  to the game.\n  \"\n    [\"game\" \"turn-based\" \"competitive\"]\n    []]\n\n   [\"Wavelength or [Longwave](https://longwave.web.app/)\"\n    \"An icebreaker-type game that revolves around guessing people's opinions.\"\n    [\"game\" \"social\"]\n    []]\n\n   [\"[Codenames](https://codenames.game/)\"\n    \"One variant worth trying is trying to play with pictures instead of words on\n  the main board. A stand-alone game (Codenames Pictures) exists for this, but \n  it's also fun to try using custom pictures. For instance, the dream cards\n  from Mysterium led to a pretty fun game. Note that\n  [this site](https://codenames-pictures.dport.me/) looks like it allows you to\n  do this in a virtual setting.\"\n    [\"game\" \"social\"]\n    []]\n\n   [\"Chess\"\n    \"I've found lichess.org is a great place to play.\"\n    [\"game\" \"turn-based\" \"competitive\"]\n    []]\n\n   [\"Yo-Yoing\"\n    \"Playing with a yo-yo, and learning new tricks for it.\"\n    []\n    [[\"Skill clicking into place\"\n      \"The feeling when something that you thought was impossible, or otherwise\n    had no idea how to even approach doing, you can suddenly do effortlessly.\"]]]\n\n   [\"Beat Saber\"\n    \"Playing the VR rhythm game beat saber.\"\n    []\n    [[\"Skill clicking into place\"]\n     [\"Being in the Zone\"\n      \"Being in a state of mind where all your attention must be focused on a\n    single thing to avoid failure, leading to an emptiness of other thoughts.\"]]]\n\n   [\"Making Small Web Apps in ClojureScript with Reagent\"\n    \"See title :)\"\n    [\"programming\"]\n    [[\"Pride of Construction\"\n      \"Feeling proud or even in awe of something you made that is now a (semi)\n    permenant thing in the world. \"\n      [\"positive\"]]\n     [\"Chaos to Solution\"\n      \"The feeling when you have no idea how to fix something but suddenly a\n    solution appears out of nowhere. You may or may not understand how the\n    solution works or where it came from.\"]]]\n\n   [\"Apex Legends\"\n    \"A fast-paced first person shooter video game. Has extremely good art\n  direction, smooth gameplay, and balanced mechanics.\"\n    [\"game\" \"multiplayer\" \"competitive\" \"real-time\"]\n    [[\"Constructive regret\"\n      \"The feeling when you step out of a test and think 'I knew that answer!!'\n    in a way that makes you want to walk right back into the testing hall and\n    fix your mistake.\"]]]\n\n   [\"[Wordle](https://www.nytimes.com/games/wordle/index.html)\"\n    \"A fun word game.\"\n    [\"game\" \"social\" \"puzzle\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[Quordle](https://www.quordle.com/#/)\"\n    \"A more complex form of wordle, with a higher frequency of [BS words](https://www.reddit.com/r/Quordle/comments/t27irp/unfair_word_today/).\"\n    [\"game\" \"social\" \"puzzle\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[DAT Creativity](https://www.datcreativity.com/)\"\n    \"A test about tring to come up with the most different words possible.\"\n    [\"game\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[Semantle](https://semantle.novalis.org/)\"\n    \"Similar to DAT Creativity, but a daily game like Wordle.\"\n    [\"game\" \"social\" \"puzzle\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[Puzzgrid](https://puzzgrid.com/best.php)\"\n    \"A game about matching ambiguous word meanings.\"\n    [\"game\" \"social\" \"puzzle\"]\n    []]\n\n   [\"[The Witness](https://store.steampowered.com/app/210970/The_Witness/)\"\n    \"3-D puzzle game in a beautiful world\"\n    [\"game\" \"puzzle\"]\n    []]\n\n   [\"[Opus Magnum](https://store.steampowered.com/app/558990/Opus_Magnum/)\"\n    \"Game about programming machines to build molecules.\"\n    [\"game\" \"puzzle\" \"programming\"]\n    []]\n\n   [\"[Fire Emblem 7 & 8](https://en.wikipedia.org/wiki/Fire_Emblem_(video_game%29)\"\n    \"I first played this game on the Game Boy Advance when I was in middle school.\nFor some reason the art style and especially animation really spoke to me, and\nI found the gameplay loop very compelling.  Fair warning though that this game\nmay be on this list mostly because of nostalgia.\n\nOne aspect of this game that I really enjoy is the process of building your\nparty over time and making sure you train the right characters.  It's very\nsatisfying to help a weaker character finish enemies to get experience with the\ngoal of making them a core part of your team composition later on.  This is\noften fairly difficult - since the characters are weaker after all - which only\nadds to the satisfaction when you pull it off.\n\nAnother cool mechanic in FE is building supports between characters.  When two\ncharacters fight side by side they will over time build a relationship, which\nleads to little dialogue bites.  It's satisfying to discover these as you play\nthrough the game.\n\nBoth training weaker units and building supports are examples of\n'meta-challenges' in FE; they aren't required to finish the games, but give you\nself-directed and sometimes difficult optional objectives during the battles.\nBecause these challenges are self directed they make me feel like I am\nexpressing myself more as a player, which makes the game feel more interesting\nthan if I was just solving the same battle puzzles as everyone else.\"\n    [\"game\" \"solitary\" \"turn-based\" \"story\" \"\u2b50top10\"]\n    []]\n\n   [\"[XCOM 2 + War of the Chosen](https://en.wikipedia.org/wiki/XCOM_2)\"\n    \"Very similar appeal to Fire Emblem. Less story focused and more focused on \n  character customization.\"\n    [\"game\" \"solitary\" \"turn-based\" \"\u2b50top10\"]\n    []]\n\n   [\"[Battle Brothers](http://battlebrothersgame.com/)\"\n    \"Good tactical RPG set in a low fantasy world.\n\n  Lots of character customization via different weapon types, and stat/perk\n  assignment on level up. Not to mention the starting stats given to each\n  character. Unfortunately, the randomness in this game will lead to characters\n  dying, so if you want to preserve specific characters get ready to save and\n  load a lot :).\n  \n  This game is pretty hard and doesn't necessarily give you direct feedback as\n  to why you are failing. The combat uses randomness pretty heavily to\n  determine hit/miss/crit (head hit) chance, which means that the consequences\n  of your actions are 'fuzzed' - good decisions will sometimes be punished, and\n  bad ones you will sometimes get away with. This means that it's tricky to\n  personally track if your strategy is working without a decent time investment\n  for each strategy you are trying.\"\n    [\"game\" \"solitary\" \"turn-based\"]\n    [[\"Reactive Randomness Stress\"\n      \"Committing a decision and then bracing yourself for bad things to happen\n    based on some probability which you cannot stop (since you have already\n    committed).\"]]]\n\n   [\"[Fell Seal - Arbiter's Mark](https://www.fellseal.com/)\"\n    \"Really well designed game with a good story, deep character customization,\n  and difficult encounters. This game does a great job of letting you customize\n  your character abilities with a lot of depth, but still with enough\n  constraints to not make every character feel the same. Then, it makes the\n  encounters in the main story difficult, but allows you to level up your\n  characters in 'patrol' side-encounters in case the way you built your\n  characters was not optimal for the main story. This is an awesome way to\n  reward players who do a good job with their builds (they have to grind less)\n  without forcing players into said optimal builds.\"\n    [\"game\" \"solitary\" \"turn-based\" \"\u2b50top10\"]\n    []]\n\n   [\"[Overwatch](https://en.wikipedia.org/wiki/Overwatch_(video_game%29)\"\n    \"\"\n    [\"game\" \"competitive\"]\n    []]\n\n   [\"[Darkest Dungeon](https://en.wikipedia.org/wiki/Darkest_Dungeon)\"\n    \"Amazing atmosphere and fun character building.\"\n    [\"game\" \"solitary\" \"turn-based\" \"\u2b50top10\"]\n    []]\n\n   [\"Bananagrams\"\n    \"One fun variant is to open a book in text format with some program that can \n  search text and make it so that you can only use words that exist in that\n  book.\"\n    [\"game\" \"social\"]\n    []]\n\n   [\"[Islanders](https://en.wikipedia.org/wiki/Islanders_(video_game%29)\"\n    \"Cool turn based city builder made with a beautiful art style.\"\n    [\"game\" \"solitary\" \"turn-based\" \"puzzle\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[Bad North](https://www.badnorth.com/)\"\n    \"\"\n    [\"game\" \"solitary\"]\n    []]\n\n   [\"Rainbow 6: Siege\"\n    \"Very intense and engaging game that requires a high level of focus.  Every\nmovement made in this game produces audible sound, meaning that movement gives\naway your position and makes you vulnerable.  However, like in most shooters,\nif you proactively move to shoot at a particular point, you will still have an\nadvantage against someone reacting to your movement.  This leads to a dynamic\nwhere both you and your opponent are trying to determine the location of the\nother without giving away their own location - once one person knows with\ncertainty they can simply move to attack and will have a strong advantage.\n\nThis dynamic is framed by the asymmetric nature of all game modes, which have\nattacking and defending sides.  Attackers must move to engage the defenders,\nmeaning that they start out disadvantaged (they are moving and making noise\nwhile defenders are not).  To counter this, attackers all have remote control\ndrones that make noise when they move around.  These are easily destroyed, but\ncan be used to determine the locations of defenders, giving attackers\nadvantage.\"\n     [\"game\" \"competitive\"]\n     []]\n\n   [\"CoD: MW2\"\n    \"This game was trash but at least it let me [make a YouTube video with 160k views](https://www.youtube.com/watch?v=fx1vtMZCFvI&ab_channel=s1lentProtector).\"\n    [\"game\" \"competitive\"]\n    []]\n\n   [\"[Iron Danger](https://store.steampowered.com/app/899310/Iron_Danger/)\"\n    \"Really cool strategy game with a cool story. Would love it if they made a\n  sequel and/or expanded it into a bigger RPG with more customization.\"\n    [\"game\" \"story\" \"solitary\"]\n    []]\n\n   [\"[Slipways](https://slipways.net/)\"\n    \"A video game about colonizing planets and connecting them with trade\n  routes.\"\n    [\"game\" \"solitary\" \"turn-based\" \"puzzle\"]\n    [[\"Scanning through possibilities\"]]]\n\n   [\"[Age of Darkness: Final Stand](https://www.ageofdarkness.com/)\"\n    \"A real-time-with-pause strategy game with excellent art. \"\n    [\"game\" \"solitary\"]\n    [[\"Fitting puzzle pieces together\"\n      \"The feeling of finding the right place for a part of something you are\n    building.\"]]]\n\n   [\"[Three Worlds\n      Collide](https://www.lesswrong.com/posts/HawFh7RvDM4RyoJ2d/three-worlds-collide-0-8)\"\n    \"Science fiction with a philosophical twist.\"\n    [\"story\" \"philosophy\"]\n    [[\"Thought Provoking\"]]]])\n  \n\n; ---------------- Similarity Sorting -----------------------------------\n\n(defn calc-similarity\n  {:malli/schema [:=> [:cat Info Info] :int]}\n  [info1 info2]\n  (count (intersection (:tags info1) (:tags info2))))\n\n(def Similarities\n  [:map-of Name [:map-of Name :int]])\n\n(defn get-all-similarities\n  {:malli/schema [:=> [:cat DataMap] Similarities]}\n  [data-map]\n  (into {} (for [[name1 info1] data-map]\n             [name1 (into {} (for [[name2 info2] data-map]\n                               [name2 (calc-similarity info1 info2)]))])))\n\n(defn get-closest-name\n  {:malli/schema [:=> [:cat Name Similarities] Name]}\n  [name similarities]\n  (let [distances (dissoc (get similarities name) name)]\n    (first (reverse (sort-by #(get distances %) (keys distances))))))\n\n(defn prune-similarities\n  \"Remove the given name from the similarities map.\"\n  {:malli/schema [:=> [:cat Name Similarities] Similarities]}\n  [name-to-prune similarities]\n  (postwalk #(if (map? %) (dissoc % name-to-prune) %) similarities))\n\n; (prune-similarities \"b\" {\"a\" {\"b\" 1 \"a\" 0} \"b\" {\"a\" 1 \"b\" 0}})\n\n(defn -get-rest\n  [last-name similarities]\n  (cond\n    (= 1 (count similarities)) [last-name]\n    :else (let [cur-name (get-closest-name last-name similarities)\n                pruned-similarities (prune-similarities last-name similarities)]\n            ; (prn last-name cur-name similarities)\n            (concat [last-name] (-get-rest cur-name pruned-similarities)))))\n\n(defn sort-by-tags\n  \"Sort the input data map by tag similarity.\n  \n  This is done by computing a similarity score between every pair of items,\n  then solving the travelling salesman problem given these pairs.\"\n  {:malli/schema [:=> [:cat DataMap] DataMap]}\n  [data-map]\n  (let [similarities (get-all-similarities data-map)\n        start-name (first (sort (keys data-map)))\n        sorted-names (-get-rest start-name similarities)]\n    (into (sorted-map) (for [name sorted-names]\n                        [name (get data-map name)]))))\n\n; (def example-experience-map (make-experience-map example-experiences))\n; (identity example-experience-map)\n; (prune-similarities \"Drugs\" (get-all-similarities example-experience-map))\n; (sort-by-tags example-experience-map)\n  \n; ----------------------------------------------------------------------\n\n\n\n(defn clean\n  \"Cleans newlines and other stuff out of strings.\"\n  [string]\n  (if (nil? string)\n    \"\"\n    (replace string #\"\\n +\" \" \")))\n\n(defn make-experience-map\n  {:malli/schema [:=> [:cat Experiences] DataMap]}\n  [raw-experiences]\n  (into {} (for [[experience-name details tags mental-states] raw-experiences]\n             [(clean experience-name)\n              {:details (clean details)\n               :tags (set tags)\n               :children\n               (into #{} (for [[mental-state-name _] mental-states]\n                           (clean mental-state-name)))}])))\n                                                    \n; (make-experience-map example-experiences)\n\n(defn accrete-set\n  \"Combines two sets, filtering out any nil or empty string values from the\n  second set.\"\n  {:malli/schema [:=> [:cat [:set :any] [:set :any]] [:set :any]]}\n  [existing new]\n  (union existing\n         (set (filter #(not (contains? #{nil \"\"} %)) new))))\n\n(defn -accrete-mental-states\n  \"Adds a single [Name Info] pair to an DataMap, merging it with an existing\n  entry if need be.\"\n  {:malli/schema [:=> [:cat DataMap [:tuple Name Info]]\n                  DataMap]}\n  [data-map [name {:keys [details children tags]}]]\n  (let [{existing-details :details\n         existing-tags :tags\n         existing-children :children\n         :or {existing-details \"\"\n              existing-tags #{}\n              existing-children #{}}}\n        (get data-map name)]\n    (assoc data-map name\n           {:details     (str existing-details details)\n            :tags        (accrete-set existing-tags tags)\n            :children    (accrete-set existing-children children)})))\n\n(defn make-mental-state-map\n  {:malli/schema [:=> [:cat Experiences] DataMap]}\n  [raw-experiences]\n  (reduce\n    -accrete-mental-states\n    {}\n    ; Build up pairs of [Name data] with duplicate Name keys.\n    (reduce\n      concat\n      (for [[experience-name _ _ mental-states] raw-experiences]\n         (into {} (for [[mental-state-name mental-state-details mental-state-tags]\n                        mental-states]\n                    [(clean mental-state-name)\n                     {:details     (clean mental-state-details)\n                      :tags        (if (nil? mental-state-tags)\n                                     #{} (set mental-state-tags))\n                      :children    #{(clean experience-name)}}]))))))\n\n(make-mental-state-map example-experiences)\n\n\n\n(defn make-tag-hiccup\n  {:malli/schema [:=> [:cat [:set Tag] [:set Tag]]\n                  Hiccup]}\n  [tags selected-tags]\n  [:p \"Tags: \"\n    (interpose \", \" (map #(if (selected-tags %)\n                            [:strong {:key %} %]\n                            [:span {:key %} %])\n                         (sort tags)))])\n\n(defn get-raw-string\n  \"Removes links or other hiccup wrappers from a string.\"\n  [string]\n  ; (if (or (nil? string) (string? string)))\n  (if (string? string)\n    string\n    (get-raw-string (last string))))\n\n(defn anchor-string\n  [item-name]\n  (replace (get-raw-string item-name) \" \" \"-\"))\n\n(defn anchor\n  [item-name]\n  [:a {:class \"anchor\" :href (str \"#\" (anchor-string item-name))} \"#\"])\n\n(defn ^:export list-to-hiccup\n  \"Converts a sequence of string to hiccup. \"\n  {:malli/schema [:=> [:cat [:or [:sequential :string]\n                                 [:set :string]]]\n                  Hiccup]}\n  [strings]\n  [:ul\n   (for [s strings\n         :let [hiccup (rest (my-md->hiccup s))]]\n     [:li {:key s}\n      (conj (anchor hiccup) (get-raw-string hiccup))])])\n; (meta #'list-to-hiccup)\n\n; TODO animate the swapping!\n(defn ^:export aggregated-items\n  \"Example:\n  \n  ```\n  Recipe 1:\n   - Ingredient 1\n   - Ingredient 2\n\n  Recipe 2:\n   - Ingredient 2\n   - Ingredient 3\n   ...\n  ...\n  ```\n\n  Or\n\n  ```\n  Ingredient 1:\n   - Recipe 1\n   - Recipe 3\n\n  Ingredient 2:\n   - Recipe 1\n   - Recipe 2\n   ...\n  ...\n  ```\n  \"\n  {:malli/schema [:=> [:cat :string :string DataMap] ReagentComponent]}\n  [data-name other-name data-map]\n  (let [tag-selections (r/atom (get-url-param-selections\n                                 (set (reduce union\n                                              (map :tags (vals data-map))))\n                                 url-params))]\n    (fn [data-name other-name data-map]\n      ; This extra into is necessary since we are dereferencing @tag-selections\n      ; See https://github.com/reagent-project/reagent/issues/18\n      (into [:div\n             [:h2 data-name]\n             [:div [dropdown-check-list tag-selections \"Select Tags\" #()]]] \n            (for [[item-name {:keys [details tags children]}]\n                  (sort-by-tags data-map)\n                  :let [selected-tags (get-selected-vars @tag-selections)\n                        hiccup-name (my-md->hiccup item-name)]\n                  :when (or (= (count selected-tags) (count @tag-selections))\n                            (subset? selected-tags tags))]\n              [:div {:key item-name}\n               [:h3 {:id (anchor-string hiccup-name)} hiccup-name\n                (anchor hiccup-name)] \n               (make-tag-hiccup tags selected-tags)\n               [:p (my-md->hiccup details) \" \" other-name \":\"]\n               (list-to-hiccup children)])))))\n\n(defn ^:export make-aggregated-items\n  {:malli/schema [:=> [:cat Experiences] ReagentComponent]}\n  [raw-experiences]\n  (fn []\n    [:div\n      [aggregated-items \"Experiences\" \"States of Mind\"\n                        (make-experience-map raw-experiences)]\n      [aggregated-items \"States of Mind\" \"Experiences\"\n                        (make-mental-state-map raw-experiences)]]))\n\n\n"]}