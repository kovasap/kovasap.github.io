shadow$provide.module$node_modules$d3_array$src$blur=function(global,require,module,exports){function Blur2(blur){return function(data,rx,ry=rx){if(!(0<=(rx=+rx)))throw new RangeError("invalid rx");if(!(0<=(ry=+ry)))throw new RangeError("invalid ry");let {data:values,width,height}=data;if(!(0<=(width=Math.floor(width))))throw new RangeError("invalid width");if(!(0<=(height=Math.floor(void 0!==height?height:values.length/width))))throw new RangeError("invalid height");if(!width||!height||!rx&&!ry)return data;
rx=rx&&blur(rx);ry=ry&&blur(ry);const temp=values.slice();rx&&ry?(blurh(rx,temp,values,width,height),blurh(rx,values,temp,width,height),blurh(rx,temp,values,width,height),blurv(ry,values,temp,width,height),blurv(ry,temp,values,width,height),blurv(ry,values,temp,width,height)):rx?(blurh(rx,values,temp,width,height),blurh(rx,temp,values,width,height),blurh(rx,values,temp,width,height)):ry&&(blurv(ry,values,temp,width,height),blurv(ry,temp,values,width,height),blurv(ry,values,temp,width,height));return data}}
function blurh(blur,T,S,w,h){for(let y=0,n=w*h;y<n;)blur(T,S,y,y+=w,1)}function blurv(blur,T,S,w,h){for(let x=0,n=w*h;x<w;++x)blur(T,S,x,x+n,w)}function blurf(radius){const radius0=Math.floor(radius);if(radius0===radius)return bluri(radius);const t=radius-radius0,w=2*radius+1;return(T,S,start,stop,step)=>{if((stop-=step)>=start){var sum=radius0*S[start],s0=step*radius0,s1=s0+step;for(let i=start,j=start+s0;i<j;i+=step)sum+=S[Math.min(stop,i)];for(let i=start,j=stop;i<=j;i+=step)sum+=S[Math.min(stop,
i+s0)],T[i]=(sum+t*(S[Math.max(start,i-s1)]+S[Math.min(stop,i+s1)]))/w,sum-=S[Math.max(start,i-s0)]}}}function bluri(radius){const w=2*radius+1;return(T,S,start,stop,step)=>{if((stop-=step)>=start){var sum=radius*S[start],s=step*radius;for(let i=start,j=start+s;i<j;i+=step)sum+=S[Math.min(stop,i)];for(let i=start,j=stop;i<=j;i+=step)sum+=S[Math.min(stop,i+s)],T[i]=sum/w,sum-=S[Math.max(start,i-s)]}}}Object.defineProperty(exports,"__esModule",{value:!0});exports.blur=function(values,r){if(!(0<=(r=
+r)))throw new RangeError("invalid r");let length=values.length;if(!(0<=(length=Math.floor(length))))throw new RangeError("invalid length");if(!length||!r)return values;r=blurf(r);const temp=values.slice();r(values,temp,0,length,1);r(temp,values,0,length,1);r(values,temp,0,length,1);return values};exports.blurImage=exports.blur2=void 0;global=Blur2(blurf);exports.blur2=global;global=Blur2(function(radius){const blur=blurf(radius);return(T,S,start,stop,step)=>{start<<=2;stop<<=2;step<<=2;blur(T,S,
start+0,stop+0,step);blur(T,S,start+1,stop+1,step);blur(T,S,start+2,stop+2,step);blur(T,S,start+3,stop+3,step)}});exports.blurImage=global}
//# sourceMappingURL=module$node_modules$d3_array$src$blur.js.map
