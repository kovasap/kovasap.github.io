shadow$provide.module$node_modules$d3_chord$src$chord=function(global,require,module,exports){function range(i,j){return Array.from({length:j-i},(_,k)=>i+k)}function compareValue(compare){return function(a,b){return compare(a.source.value+a.target.value,b.source.value+b.target.value)}}function chord(directed,transpose){function chord(matrix){var n=matrix.length,groupSums=Array(n),groupIndex=range(0,n),chords=Array(n*n),groups=Array(n),k=0,dx;matrix=Float64Array.from({length:n*n},transpose?(_,i)=>
matrix[i%n][i/n|0]:(_,i)=>matrix[i/n|0][i%n]);for(dx=0;dx<n;++dx){var x=0;for(var j$jscomp$0=0;j$jscomp$0<n;++j$jscomp$0)x+=matrix[dx*n+j$jscomp$0]+directed*matrix[j$jscomp$0*n+dx];k+=groupSums[dx]=x}dx=(k=(0,_math.max)(0,_math.tau-padAngle*n)/k)?padAngle:_math.tau/n;x=0;sortGroups&&groupIndex.sort((a,b)=>sortGroups(groupSums[a],groupSums[b]));for(const i of groupIndex){groupIndex=x;if(directed){j$jscomp$0=range(~n+1,n).filter(j=>0>j?matrix[~j*n+i]:matrix[i*n+j]);sortSubgroups&&j$jscomp$0.sort((a,
b)=>sortSubgroups(0>a?-matrix[~a*n+i]:matrix[i*n+a],0>b?-matrix[~b*n+i]:matrix[i*n+b]));for(const j of j$jscomp$0)0>j?(chords[~j*n+i]||(chords[~j*n+i]={source:null,target:null})).target={index:i,startAngle:x,endAngle:x+=matrix[~j*n+i]*k,value:matrix[~j*n+i]}:(chords[i*n+j]||(chords[i*n+j]={source:null,target:null})).source={index:i,startAngle:x,endAngle:x+=matrix[i*n+j]*k,value:matrix[i*n+j]}}else{j$jscomp$0=range(0,n).filter(j=>matrix[i*n+j]||matrix[j*n+i]);sortSubgroups&&j$jscomp$0.sort((a,b)=>
sortSubgroups(matrix[i*n+a],matrix[i*n+b]));for(const j of j$jscomp$0)if(i<j?(j$jscomp$0=chords[i*n+j]||(chords[i*n+j]={source:null,target:null}),j$jscomp$0.source={index:i,startAngle:x,endAngle:x+=matrix[i*n+j]*k,value:matrix[i*n+j]}):(j$jscomp$0=chords[j*n+i]||(chords[j*n+i]={source:null,target:null}),j$jscomp$0.target={index:i,startAngle:x,endAngle:x+=matrix[i*n+j]*k,value:matrix[i*n+j]},i===j&&(j$jscomp$0.source=j$jscomp$0.target)),j$jscomp$0.source&&j$jscomp$0.target&&j$jscomp$0.source.value<
j$jscomp$0.target.value){const source=j$jscomp$0.source;j$jscomp$0.source=j$jscomp$0.target;j$jscomp$0.target=source}}groups[i]={index:i,startAngle:groupIndex,endAngle:x,value:groupSums[i]};x+=dx}chords=Object.values(chords);chords.groups=groups;return sortChords?chords.sort(sortChords):chords}var padAngle=0,sortGroups=null,sortSubgroups=null,sortChords=null;chord.padAngle=function(_){return arguments.length?(padAngle=(0,_math.max)(0,_),chord):padAngle};chord.sortGroups=function(_){return arguments.length?
(sortGroups=_,chord):sortGroups};chord.sortSubgroups=function(_){return arguments.length?(sortSubgroups=_,chord):sortSubgroups};chord.sortChords=function(_){return arguments.length?(null==_?sortChords=null:(sortChords=compareValue(_))._=_,chord):sortChords&&sortChords._};return chord}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(){return chord(!1,!1)};exports.chordTranspose=function(){return chord(!1,!0)};exports.chordDirected=function(){return chord(!0,!1)};var _math=
require("module$node_modules$d3_chord$src$math")}
//# sourceMappingURL=module$node_modules$d3_chord$src$chord.js.map
