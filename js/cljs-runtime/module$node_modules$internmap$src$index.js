shadow$provide.module$node_modules$internmap$src$index=function(global,require,module,exports){function intern_get({_intern,_key},value){_key=_key(value);return _intern.has(_key)?_intern.get(_key):value}function intern_set({_intern,_key},value){_key=_key(value);if(_intern.has(_key))return _intern.get(_key);_intern.set(_key,value);return value}function intern_delete({_intern,_key},value){_key=_key(value);_intern.has(_key)&&(value=_intern.get(_key),_intern.delete(_key));return value}function keyof(value){return null!==
value&&"object"===typeof value?value.valueOf():value}Object.defineProperty(exports,"__esModule",{value:!0});exports.InternSet=exports.InternMap=void 0;class InternMap extends Map{constructor(entries,key$jscomp$0=keyof){super();Object.defineProperties(this,{_intern:{value:new Map},_key:{value:key$jscomp$0}});if(null!=entries)for(const [key,value]of entries)this.set(key,value)}get(key){return super.get(intern_get(this,key))}has(key){return super.has(intern_get(this,key))}set(key,value){return super.set(intern_set(this,
key),value)}delete(key){return super.delete(intern_delete(this,key))}}exports.InternMap=InternMap;class InternSet extends Set{constructor(values,key=keyof){super();Object.defineProperties(this,{_intern:{value:new Map},_key:{value:key}});if(null!=values)for(const value of values)this.add(value)}has(value){return super.has(intern_get(this,value))}add(value){return super.add(intern_set(this,value))}delete(value){return super.delete(intern_delete(this,value))}}exports.InternSet=InternSet}
//# sourceMappingURL=module$node_modules$internmap$src$index.js.map
