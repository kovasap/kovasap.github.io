shadow$provide.module$node_modules$d3_polygon$src$hull=function(global,require,module,exports){function lexicographicOrder(a,b){return a[0]-b[0]||a[1]-b[1]}function computeUpperHullIndexes(points){const n=points.length,indexes=[0,1];let size=2,i;for(i=2;i<n;++i){for(;1<size&&0>=(0,_cross.default)(points[indexes[size-2]],points[indexes[size-1]],points[i]);)--size;indexes[size++]=i}return indexes.slice(0,size)}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(points){if(3>
(n=points.length))return null;var i,n,sortedPoints=Array(n),flippedPoints=Array(n);for(i=0;i<n;++i)sortedPoints[i]=[+points[i][0],+points[i][1],i];sortedPoints.sort(lexicographicOrder);for(i=0;i<n;++i)flippedPoints[i]=[sortedPoints[i][0],-sortedPoints[i][1]];n=computeUpperHullIndexes(sortedPoints);flippedPoints=computeUpperHullIndexes(flippedPoints);var skipLeft=flippedPoints[0]===n[0],skipRight=flippedPoints[flippedPoints.length-1]===n[n.length-1],hull=[];for(i=n.length-1;0<=i;--i)hull.push(points[sortedPoints[n[i]][2]]);
for(i=+skipLeft;i<flippedPoints.length-skipRight;++i)hull.push(points[sortedPoints[flippedPoints[i]][2]]);return hull};var _cross=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$d3_polygon$src$cross"))}
//# sourceMappingURL=module$node_modules$d3_polygon$src$hull.js.map
