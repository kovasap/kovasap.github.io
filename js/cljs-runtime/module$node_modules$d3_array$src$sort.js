shadow$provide.module$node_modules$d3_array$src$sort=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function compareDefined(compare=_ascending.default){if(compare===_ascending.default)return ascendingDefined;if("function"!==typeof compare)throw new TypeError("compare is not a function");return(a,b)=>{const x=compare(a,b);return x||0===x?x:(0===compare(b,b))-(0===compare(a,a))}}function ascendingDefined(a,b){return(null==a||
!(a>=a))-(null==b||!(b>=b))||(a<b?-1:a>b?1:0)}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(values,...F){if("function"!==typeof values[Symbol.iterator])throw new TypeError("values is not iterable");values=Array.from(values);let [f$jscomp$0]=F;if(f$jscomp$0&&2!==f$jscomp$0.length||1<F.length){const index=Uint32Array.from(values,(d,i)=>i);1<F.length?(F=F.map(f=>values.map(f)),index.sort((i,j)=>{for(const f of F){const c=ascendingDefined(f[i],f[j]);if(c)return c}})):
(f$jscomp$0=values.map(f$jscomp$0),index.sort((i,j)=>ascendingDefined(f$jscomp$0[i],f$jscomp$0[j])));return(0,_permute.default)(values,index)}return values.sort(compareDefined(f$jscomp$0))};exports.compareDefined=compareDefined;exports.ascendingDefined=ascendingDefined;var _ascending=_interopRequireDefault(require("module$node_modules$d3_array$src$ascending")),_permute=_interopRequireDefault(require("module$node_modules$d3_array$src$permute"))}
//# sourceMappingURL=module$node_modules$d3_array$src$sort.js.map
