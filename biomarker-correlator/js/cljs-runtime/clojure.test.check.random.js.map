{"version":3,"sources":["clojure/test/check/random.cljs"],"mappings":"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","names":["clojure$test$check$random$IRandom$rand_long$dyn","x__4550__auto__","m__4551__auto__","clojure.test.check.random/rand-long","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","clojure$test$check$random$IRandom$rand_double$dyn","clojure.test.check.random/rand-double","clojure$test$check$random$IRandom$split$dyn","clojure.test.check.random/split","clojure$test$check$random$IRandom$split_n$dyn","clojure.test.check.random/split-n","clojure.test.check.random/IRandom","rng","n","clojure.test.check.random/hex-long","s","clojure.test.check.random.longs/from-string","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","z","G__81590","G__81592","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","_","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__81604","n-dec","ret","cljs.core/transient","cljs.core._EQ_","cljs.core/count","cljs.core.conj_BANG_","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","seed","or__4253__auto__","clojure.test.check.random.longs/->long","cljs.core.ex_info","clojure.test.check.random/next-rng","a","cljs.core.atom","js/Date","cljs.core.swap_BANG_","p__81623","map__81624","cljs.core/--destructure-map","cljs.core.get","vec__81625","cljs.core.nth","r1","r2","var_args","G__81630","clojure.test.check.random/make-random","js/Error"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n"]}