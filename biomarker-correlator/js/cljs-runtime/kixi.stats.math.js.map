{"version":3,"sources":["kixi/stats/math.cljc"],"mappings":"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","names":["kixi.stats.math/PI","js/Math.PI","kixi.stats.math/abs","x","G__81276","kixi.stats.math/sqrt","js/Math.sqrt","kixi.stats.math/sq","kixi.stats.math/pow","n","js/Math.pow","kixi.stats.math/root","kixi.stats.math/log","js/Math.log","kixi.stats.math/log1p","kixi.stats.math/exp","js/Math.exp","kixi.stats.math/cos","js/Math.cos","kixi.stats.math/clamp","lower","upper","x__4339__auto__","y__4340__auto__","x__4336__auto__","y__4337__auto__","kixi.stats.math/sin","js/Math.sin","kixi.stats.math/tan","js/Math.tan","kixi.stats.math/atan","js/Math.atan","kixi.stats.math/ceil","js/Math.ceil","kixi.stats.math/floor","js/Math.floor","kixi.stats.math/equal","y","e","kixi.stats.math/infinity","js/Infinity","kixi.stats.math/negative-infinity","js/-Infinity","kixi.stats.math/infinite?","cljs.core/not","js/isFinite","kixi.stats.math/SQRT_2_PI","kixi.stats.math/HALF_LOG_2_PI","kixi.stats.math/LANCZOS","kixi.stats.math/A","kixi.stats.math/B","kixi.stats.math/P","kixi.stats.math/Q","kixi.stats.math/C","kixi.stats.math/CA","kixi.stats.math/CB","kixi.stats.math/LANCZOS_G","kixi.stats.math/lanczos-approximation","cljs.core.reduce","p__81324","vec__81325","cljs.core.nth","sum","i","l","kixi.stats.math/inv-gamma-1pm1","t","vec__81334","a0","a1","b","b'","c","c'","p","p'","q","q'","kixi.stats.math/log-gamma-1p","kixi.stats.math/log-gamma","kixi.stats.math/gamma","abs-x","abs-g","kixi.stats.math/lower-regularized-gamma","a","max-iter","ap","del","d","h","an","kixi.stats.math/gamma-pinv","gln","lna1","afac","EPS","pp","j","err","u","cljs.core._EQ_","kixi.stats.math/log-beta","kixi.stats.math/beta","kixi.stats.math/betacf","fpmin","check","qab","qap","qam","m","m2","aa","kixi.stats.math/ibeta","bt","kixi.stats.math/ibetainv","eps","b1","al","w","lna","lnb","kixi.stats.math/erf","vec__81422","x'","ty","dd","p__81427","vec__81429","cof","cljs.core/PersistentVector","res","kixi.stats.math/erfc","kixi.stats.math/erfcinv"],"sourcesContent":["(ns kixi.stats.math\n  (:refer-clojure :exclude [infinite?]))\n\n(def PI\n  #?(:clj Math/PI\n     :cljs js/Math.PI))\n\n(defn abs [x]\n  (cond-> x\n    (< x 0) -))\n\n(defn sqrt [x]\n  #?(:clj  (Math/sqrt x)\n     :cljs (js/Math.sqrt x)))\n\n(defn sq [x]\n  (* x x))\n\n(defn pow [x n]\n  #?(:clj  (Math/pow x n)\n     :cljs (js/Math.pow x n)))\n\n(defn root [x n]\n  (pow x (/ 1 n)))\n\n(defn log [x]\n  #?(:clj  (Math/log x)\n     :cljs (js/Math.log x)))\n\n(defn log1p [x]\n  #?(:clj  (Math/log1p x)\n     :cljs (js/Math.log (inc x))))\n\n(defn exp [x]\n  #?(:clj  (Math/exp x)\n     :cljs (js/Math.exp x)))\n\n(defn cos [x]\n  #?(:clj  (Math/cos x)\n     :cljs (js/Math.cos x)))\n\n(defn clamp [x lower upper]\n  (min (max x lower) upper))\n\n(defn sin [x]\n  #?(:clj  (Math/sin x)\n     :cljs (js/Math.sin x)))\n\n(defn tan [x]\n  #?(:clj  (Math/tan x)\n     :cljs (js/Math.tan x)))\n\n(defn atan [x]\n  #?(:clj  (Math/atan x)\n     :cljs (js/Math.atan x)))\n\n(defn ceil [x]\n  #?(:clj  (Math/ceil x)\n     :cljs (js/Math.ceil x)))\n\n(defn floor [x]\n  #?(:clj  (Math/floor x)\n     :cljs (js/Math.floor x)))\n\n(defn equal [x y e]\n  (<= (abs (- y x)) e))\n\n(def infinity\n  #?(:clj Double/POSITIVE_INFINITY\n     :cljs js/Infinity))\n\n(def negative-infinity\n  #?(:clj Double/NEGATIVE_INFINITY\n     :cljs js/-Infinity))\n\n(defn infinite? [x]\n  #?(:clj (Double/isInfinite x)\n     :cljs (not (js/isFinite x))))\n\n;;;; Gamma\n\n(def ^:no-doc SQRT_2_PI 2.506628274631000502)\n\n(def ^:no-doc HALF_LOG_2_PI (* 0.5 (log (* 2.0 PI))))\n\n(def ^:no-doc LANCZOS\n  [[14 3.6899182659531625E-6] [13 -2.6190838401581408E-5]\n   [12 8.441822398385275E-5] [11 -1.643181065367639E-4]\n   [10 2.1743961811521265E-4] [9 -2.1026444172410488E-4]\n   [8 1.580887032249125E-4] [7 -9.837447530487956E-5]\n   [6 4.652362892704858E-5] [5 3.399464998481189E-5]\n   [4 -0.4919138160976202] [3 14.136097974741746]\n   [2 -59.59796035547549] [1 57.15623566586292]])\n\n(def ^:no-doc A\n  [0.611609510448141581788E-08 0.624730830116465516210E-08])\n\n(def ^:no-doc B\n  [0.195755836614639731882E-09 -0.607761895722825260739E-07\n   0.992641840672773722196E-06 -0.643045481779353022248E-05\n   -0.851419432440314906588E-05 0.493944979382446875238E-03\n   0.266205348428949217746E-01 0.203610414066806987300E+00])\n\n(def ^:no-doc P\n  [4.343529937408594E-15 -1.2494415722763663E-13 1.5728330277104463E-12\n   4.686843322948848E-11 6.820161668496171E-10 6.8716741130671986E-9\n   6.116095104481416E-9])\n\n(def ^:no-doc Q\n  [2.6923694661863613E-4 0.004956830093825887 0.054642130860422966\n   0.3056961078365221])\n\n(def ^:no-doc C\n  [-0.205633841697760710345015413002057E-06 0.113302723198169588237412962033074E-05\n   -0.125049348214267065734535947383309E-05 -0.201348547807882386556893914210218E-04\n   0.128050282388116186153198626328164E-03 -0.215241674114950972815729963053648E-03\n   -0.116516759185906511211397108401839E-02 0.721894324666309954239501034044657E-02\n   -0.962197152787697356211492167234820E-02 -0.421977345555443367482083012891874E-01\n   0.166538611382291489501700795102105E+00 -0.420026350340952355290039348754298E-01\n   -0.655878071520253881077019515145390E+00])\n\n(def ^:no-doc CA\n  -0.422784335098467139393487909917598E+00)\n\n(def ^:no-doc CB\n  0.577215664901532860606512090082402E+00)\n\n(def LANCZOS_G\n  \"The Lanczos constant\"\n  (/ 607 128))\n\n(defn lanczos-approximation\n  \"Computes the Lanczos approximation to the Gamma function\"\n  [x]\n  (+ (reduce (fn [sum [i l]] (+ sum (/ l (+ x i)))) 0.0 LANCZOS)\n     0.9999999999999971))\n\n(defn inv-gamma-1pm1\n  \"Computes the function `(dec (/ 1 (gamma (inc x))))`\n  for -0.5 <= x <= 0.5\"\n  [x]\n  (let [t (if (<= x 0.5) x (- (- x 0.5) 0.5))]\n    (if (< t 0)\n      (let [[a0 a1] A\n            b (inc (* t (reduce (fn [b b'] (+ (* t b) b')) B)))\n            c (+ CA (* t (reduce (fn [c c'] (+ (* t c) c')) (/ (+ a0 (* a1 t)) b) C)))]\n        (if (> x 0.5)\n          (* t (/ c x))\n          (* x (inc c))))\n      (let [p (reduce (fn [p p'] (+ (* t p) p')) P)\n            q (inc (* t (reduce (fn [q q'] (+ (* t q) q')) Q)))\n            c (+ CB (* t (reduce (fn [c c'] (+ (* t c) c')) (/ p q) C)))]\n        (if (> x 0.5)\n          (* (/ t x) (dec c))\n          (* x c))))))\n\n(defn log-gamma-1p\n  \"Computes the function `(ln (gamma (inc x)))`\n  for -0.5 <= x <= 0.5\"\n  [x]\n  (- (log1p (inv-gamma-1pm1 x))))\n\n(defn log-gamma\n  \"Computes the value of ln(\u0393x)\"\n  [x]\n  (cond\n    (< x 0.5) (- (log-gamma-1p x) (log x))\n    (<= x 2.5) (log-gamma-1p (dec x))\n    (<= x 8.0) (let [n (int (floor (- x 1.5)))]\n                 (+ (log-gamma-1p (- x (inc n)))\n                    (loop [i 1\n                           p 1.0]\n                      (if (<= i n)\n                        (recur (inc i) (* p (- x i)))\n                        (log p)))))\n    :else (let [t (+ x LANCZOS_G 0.5)]\n            (+ (- (* (+ x 0.5) (log t)) t)\n               HALF_LOG_2_PI\n               (log (/ (lanczos-approximation x) x))))))\n\n(defn gamma\n  \"Computes the value of \u0393x\"\n  [x]\n  (let [abs-x (abs x)]\n    (if (<= abs-x 20)\n      (if (>= x 1)\n        (loop [t (dec x) p 1]\n          (if (> t 1.5)\n            (recur (dec t) (* p t))\n            (/ p (inc (inv-gamma-1pm1 t)))))\n        (loop [t (inc x) p x]\n          (if (< t 0.5)\n            (recur (inc t) (* p t))\n            (/ 1 (* p (inc (inv-gamma-1pm1 (dec t))))))))\n      (let [y (+ abs-x LANCZOS_G 0.5)\n            abs-g (* (/ SQRT_2_PI abs-x)\n                     (pow y (+ abs-x 0.5))\n                     (exp (- y))\n                     (lanczos-approximation abs-x))]\n        (if (pos? x)\n          abs-g\n          (/ (- PI)\n             (* x abs-g (sin (* PI x)))))))))\n\n(defn lower-regularized-gamma\n  \"Computes the lower regularized incomplete gamma function P(a,x)\"\n  [a x]\n  (when (and (>= x 0) (> a 0))\n    (let [max-iter (-> (+ (* (log (if (>= a 1) a (/ 1 a))) 8.5)\n                          (* 0.4 a)\n                          17)\n                       inc\n                       floor\n                       int)]\n      (if (< x (inc a))\n        (loop [i 1\n               ap a\n               del (double (/ 1 ap))\n               sum (double (/ 1 ap))]\n          (if (< i max-iter)\n            (let [ap (inc ap)\n                  del (* del (/ x ap))]\n              (recur (inc i) ap del (+ sum del)))\n            (* sum (exp (- (* a (log x)) x (log-gamma a))))))\n        (loop [i 1\n               b (double (- (inc x) a))\n               c (double (/ 1 1e-30))\n               d (double (/ 1 b))\n               h (double (/ 1 b))]\n          (let [an (* (- i) (- i a))\n                b (+ b 2)\n                d (+ (* an d) b)\n                c (+ b (/ an c))\n                d (/ 1 d)\n                h (* h d c)]\n            (if (< i max-iter)\n              (recur (inc i) b c d h)\n              (- 1 (* h (exp (- (* a (log x)) x (log-gamma a))))))))))))\n\n(defn gamma-pinv\n  \"Returns the inverse of the lower regularized incomplete gamma function\"\n  [p a]\n  (cond\n    (>= p 1.0) (max 100.0 (+ a (* 100.0 (sqrt a))))\n    (<= p 0.0) 0.0\n    :else\n    (let [gln (log-gamma a)\n          a1 (dec a)\n          lna1 (log a1)\n          afac (exp (- (* a1 (dec lna1)) gln))\n          EPS 1e-8\n          x (if (> a 1)\n              (let [pp (if (< p 0.5) p (- 1 p))\n                    t (sqrt (* -2 (log pp)))\n                    x (- (/ (+ 2.30753 (* 0.27061 t)) (+ 1 (* t (+ 0.99229 (* 0.04481 t))))) t)\n                    x (if (< p 0.5) (- x) x)]\n                (max 1e-3 (* a (pow (- 1 (/ 1 (* 9 a)) (/ x (* 3 (sqrt a)))) 3))))\n              (let [t (- 1 (* a (+ 0.253 (* 0.12 a))))]\n                (if (< p t)\n                  (pow (/ p t) (/ 1 a))\n                  (- 1 (log (- 1 (/ (- p t) (- 1 t))))))))]\n      (loop [j 0 x x]\n        (if (<= x 0.0)\n          0.0\n          (let [err (- (lower-regularized-gamma a x) p)\n                t (if (> a 1)\n                    (* afac (exp (- (* a1 (- (log x) lna1)) (- x a1))))\n                    (exp (- (* a1 (log x)) gln x)))\n                u (/ err t)\n                t (/ u (- 1 (* 0.5 (min 1 (* u (dec (/ (dec a) x)))))))\n                x (- x t)\n                x (if (<= x 0) (* 0.5 (+ x t)) x)]\n            (if (or (< (abs t) (* EPS x)) (= j 11))\n              x\n              (recur (inc j) x))))))))\n\n(defn log-beta\n  \"Computes the log of the beta function\"\n  [a b]\n  (- (+ (log-gamma a) (log-gamma b)) (log-gamma (+ a b))))\n\n(defn beta\n  \"Computes the beta function\"\n  [a b]\n  (when (and (pos? a) (pos? b))\n    (if (> (+ a b) 170)\n      (exp (log-beta a b))\n      (/ (* (gamma a) (gamma b))\n         (gamma (+ a b))))))\n\n(defn betacf\n  \"Evaluates the continued fraction for the incomplete beta function.\n  Modified Lentz's method\"\n  [x a b]\n  (let [fpmin 1e-30\n        check (fn [x] (if (< (abs x) fpmin) fpmin x))\n        qab (+ a b)\n        qap (inc a)\n        qam (dec a)\n        d (/ 1 (check (- 1 (/ (* x qab) qap))))]\n    (loop [m 1\n           h d\n           c 1\n           d d]\n      (let [m2 (* 2 m)\n            aa (* m (- b m) (/ x (* (+ qam m2) (+ a m2))))\n            d (/ 1 (check (+ 1 (* aa d))))\n            c (check (+ 1 (/ aa c)))\n            h (* h d c)\n            aa (* (- (+ a m)) (+ qab m) (/ x (* (+ a m2) (+ qap m2))))\n            d (/ 1 (check (+ 1 (* aa d))))\n            c (check (+ 1 (/ aa c)))\n            del (* d c)\n            h (* h del)]\n        (if (or (< (abs del) 3e-7)\n                (>= m 100))\n          h\n          (recur (inc m) h c d))))))\n\n(defn ibeta\n  \"Returns the incomplete beta function I_x(a,b)\"\n  [x a b]\n  (when (<= 0 x 1)\n    (let [bt (if (or (== x 0)\n                     (== x 1))\n               0\n               (exp (+ (- (log-gamma (+ a b))\n                          (log-gamma a)\n                          (log-gamma b))\n                       (* a (log x))\n                       (* b (log (- 1 x))))))]\n      (if (< x (/ (inc a) (+ a b 2)))\n        (* bt (/ (betacf x a b) a))\n        (- 1 (* bt (/ (betacf (- 1 x) b a) b)))))))\n\n(defn ibetainv\n  \"Returns the inverse of the incomplete beta function\"\n  [p a b]\n  (cond\n    (<= p 0) 0.0\n    (>= p 1) 1.0\n    :else\n    (let [eps 1e-8\n          a1 (dec a)\n          b1 (dec b)\n          x (if (and (>= a 1)\n                     (>= b 1))\n              (let [pp (if (< p 0.5) p (- 1 p))\n                    t (sqrt (* -2 (log pp)))\n                    x (- (/ (+ 2.30753 (* t 0.27061))\n                            (inc (* t (+ 0.99229\n                                         (* t 0.04481))))) t)\n                    x (if (< p 0.5) (- x) x)\n                    al (/ (- (sq x) 3) 6)\n                    h (/ 2 (+ (/ 1 (dec (* 2 a)))\n                              (/ 1 (dec (* 2 b)))))\n                    w (- (/ (* x (sqrt (+ al h))) h)\n                         (* (- (/ 1 (dec (* 2 b)))\n                               (/ 1 (dec (* 2 a))))\n                            (+ al (/ 5 6) (/ -2 (* 3 h)))))]\n                (/ a (+ a (* b (exp (* 2 w))))))\n              (let [lna (log (/ a (+ a b)))\n                    lnb (log (/ b (+ a b)))\n                    t (/ (exp (* a lna)) a)\n                    u (/ (exp (* b lnb)) b)\n                    w (+ t u)]\n                (if (< p (/ t w))\n                  (pow (* a w p) (/ 1 a))\n                  (- 1 (pow (* b w (- 1 p)) (/ 1 b))))))\n          afac (- (log-gamma (+ a b))\n                  (log-gamma a)\n                  (log-gamma b))]\n      (loop [j 0\n             x x]\n        (if (or (== x 0)\n                (== x 1)\n                (>= j 10))\n          x\n          (let [err (- (ibeta x a b) p)\n                t (exp (+ (* a1 (log x))\n                          (* b1 (log (- 1 x)))\n                          afac))\n                u (/ err t)\n                t (/ u (- 1 (* 0.5 (min 1 (* u (- (/ a1 x)\n                                                  (/ b1 (- 1 x))))))))\n                x (- x t)\n                x (cond\n                    (<= x 0)\n                    (* 0.5 (+ x t))\n                    (>= x 1)\n                    (* 0.5 (+ x t 1))\n                    :else x)]\n            (if (and (> j 0)\n                     (< (abs t) (* eps x)))\n              x\n              (recur (inc j) x))))))))\n\n(defn erf\n  \"Computes the error function\"\n  [x]\n  (let [x' (abs x)\n        t (/ 2 (+ x' 2))\n        ty (- (* 4 t) 2)\n        [d dd] (reduce (fn [[d dd] cof]\n                         (vector (+ (- (* ty d) dd) cof) d))\n                       [0 0]\n                       [-2.8E-17 1.21E-16 -9.4E-17 -1.523E-15 7.106E-15 3.81E-16\n                        -1.12708E-13 3.13092E-13 8.94487E-13 -6.886027E-12 2.394038E-12\n                        9.6467911E-11 -2.27365122E-10 -9.91364156E-10 5.059343495E-9\n                        6.529054439E-9 -8.5238095915E-8 1.5626441722E-8 1.30365583558E-6\n                        -1.624290004647E-6 -2.0278578112534E-5 4.2523324806907E-5\n                        3.66839497852761E-4 -9.46595344482036E-4 -0.00956151478680863\n                        0.019476473204185836 0.6419697923564902])\n        cof -1.3026537197817094\n        res (* t (exp (+ (* (- x') x') (* 0.5 (+ (* ty d) cof)) (- dd))))]\n    (if (neg? x)\n      (- res 1)\n      (- 1 res))))\n\n(defn erfc\n  \"Computes the complementary error function\"\n  [x]\n  (- 1 (erf x)))\n\n(defn erfcinv\n  \"Computes the inverse of the complementary error function\"\n  [p]\n  (cond (>= p 2) -100\n        (<= p 0) 100\n        :else (let [pp (if (< p 1) p (- 2 p))\n                    t (sqrt (* -2 (log (* pp 0.5))))\n                    x (* -0.70711\n                         (- (/ (+ (* 0.27061 t) 2.30753)\n                               (+ 1 (* t (+ (* 0.04481 t) 0.99229))))\n                            t))\n                    x (loop [j 0 x x]\n                        (if (< j 2)\n                          (let [err (- (erfc x) pp)]\n                            (recur (inc j)\n                                   (+ x (/ err (- (* 1.12837916709551257 (exp (* (- x) x)))\n                                                  (* x err))))))\n                          x))]\n                (if (< p 1)\n                  x (- x)))))\n"]}