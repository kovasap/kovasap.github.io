{"version":3,"sources":["cljs/spec/test/alpha.cljs"],"mappings":"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","names":["cljs.spec.test.alpha/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","p__51160","vec__51161","cljs.core.nth","x","temp__5753__auto__","s","cljs.core/seq","v","cljs.core/contains?","cljs.core/rest","cljs.core/cons","cljs.core.conj","cljs.spec.test.alpha/->sym","fexpr__51170","cljs.core/deref","cljs.spec.alpha/->sym","cljs.spec.test.alpha/*instrument-enabled*","cljs.spec.test.alpha/get-host-port","cljs.core.not_EQ_","cljs.core/*target*","js/window","cljs.spec.test.alpha/get-ua-product","cljs.core.keyword","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","cljs.spec.test.alpha/get-env","cljs.spec.test.alpha/fn-spec?","m","or__4253__auto__","cljs.spec.test.alpha/explain-data*","spec","cljs.spec.alpha.valid_QMARK_","cljs.spec.alpha/explain-data","cljs.spec.test.alpha/find-caller","st","frame","and__4251__auto__","clojure.string/blank?","cljs.core/re-find","p1__51185#","cljs.core.drop_while","cljs.core/not","search-spec-fn","cljs.core/first","cljs.spec.test.alpha/spec-checking-fn","fn-spec","p1__51204#","fexpr__51213","cljs.spec.alpha/maybe-spec","args-spec","conform!","role","data","args","conformed","cljs.spec.alpha/conform","cljs.core._EQ_","caller","cljs.stacktrace/parse-stacktrace","js/Error","ed","cljs.core.merge","cljs.core.assoc","cljs.spec.alpha/explain-data*","cljs.core.ex_info","pure-variadic?","cljs.core/meta","apply'","cljs.core.apply","conform!*","ret","orig__50997__auto__","js/cljs.spec.test.alpha","*instrument-enabled*-orig-val__51248","*instrument-enabled*-temp-val__51249","temp__5757__auto__","ac__51131__auto__","*instrument-enabled*-orig-val__51265","*instrument-enabled*-temp-val__51268","arg0","*instrument-enabled*-orig-val__51272","*instrument-enabled*-temp-val__51273","arg1","*instrument-enabled*-orig-val__51276","*instrument-enabled*-temp-val__51277","arg2","*instrument-enabled*-orig-val__51285","*instrument-enabled*-temp-val__51286","arg3","*instrument-enabled*-orig-val__51288","*instrument-enabled*-temp-val__51289","arg4","*instrument-enabled*-orig-val__51292","*instrument-enabled*-temp-val__51293","arg5","*instrument-enabled*-orig-val__51295","*instrument-enabled*-temp-val__51296","arg6","*instrument-enabled*-orig-val__51298","*instrument-enabled*-temp-val__51299","arg7","*instrument-enabled*-orig-val__51312","*instrument-enabled*-temp-val__51313","arg8","*instrument-enabled*-orig-val__51316","*instrument-enabled*-temp-val__51317","arg9","*instrument-enabled*-orig-val__51330","*instrument-enabled*-temp-val__51331","arg10","*instrument-enabled*-orig-val__51343","*instrument-enabled*-temp-val__51344","arg11","*instrument-enabled*-orig-val__51358","*instrument-enabled*-temp-val__51359","arg12","*instrument-enabled*-orig-val__51364","*instrument-enabled*-temp-val__51365","arg13","*instrument-enabled*-orig-val__51367","*instrument-enabled*-temp-val__51368","arg14","*instrument-enabled*-orig-val__51373","*instrument-enabled*-temp-val__51374","arg15","*instrument-enabled*-orig-val__51375","*instrument-enabled*-temp-val__51376","arg16","*instrument-enabled*-orig-val__51378","*instrument-enabled*-temp-val__51379","arg17","*instrument-enabled*-orig-val__51380","*instrument-enabled*-temp-val__51381","arg18","*instrument-enabled*-orig-val__51382","*instrument-enabled*-temp-val__51383","arg19","*instrument-enabled*-orig-val__51385","*instrument-enabled*-temp-val__51386","variadic","cljs.core/list*","*instrument-enabled*-orig-val__51387","*instrument-enabled*-temp-val__51388","cljs.spec.test.alpha/no-fspec","js/cljs","js/cljs.spec","js/cljs.spec.test","js/cljs.spec.test.alpha.instrumented-vars","cljs.spec.test.alpha/instrumented-vars","cljs.core.atom","p__51390","map__51391","cljs.core/--destructure-map","cljs.core.get","cljs.spec.test.alpha/instrument-choose-fn","sym","over","stub","replace","cljs.core/some","cljs.spec.alpha.gen","cljs.spec.gen.alpha/generate","p__51400","map__51401","cljs.spec.test.alpha/instrument-choose-spec","overrides","cljs.spec.test.alpha/instrument-1*","opts","map__51406","cljs.spec.alpha/get-spec","raw","wrapped","current","to-wrap","ospec","ofn","checked","cljs.core.swap_BANG_","cljs.core/assoc","cljs.spec.test.alpha/unstrument-1*","map__51414","cljs.core/dissoc","cljs.spec.test.alpha/fn-spec-name?","cljs.core/Symbol","cljs.spec.test.alpha/collectionize","cljs.core/List","var_args","G__51429","cljs.spec.test.alpha/instrumentable-syms","cljs.spec.test.alpha.instrumentable_syms","cljs.core/every?","cljs.core/ident?","cljs.core/keys","cljs.core.reduce","cljs.core/into","cljs.core.filter","cljs.spec.alpha/registry","cljs.spec.test.alpha/explain-check","cljs.spec.test.alpha/check-call","specs","cargs","cret","p__51464","map__51465","cljs.spec.test.alpha/quick-check","gen","map__51466","num-tests","g","e51469","t","prop","p1__51463#","cljs.spec.gen.alpha.for_all_STAR_","cljs.spec.gen.alpha/quick-check","cljs.core.mapcat","cljs.core/identity","cljs.spec.test.alpha/make-check-result","check-sym","test-check-ret","tc-ret-key","result","shrunk","cljs.spec.test.alpha/validate-check-opts","cljs.spec.test.alpha/failure-type","cljs.core/ex-data","cljs.spec.test.alpha/unwrap-failure","cljs.spec.test.alpha/result-type","failure","cljs.spec.test.alpha/abbrev-result","cljs.core.dissoc","cljs.core.update","cljs.spec.alpha/describe","G__51504","cljs.spec.test.alpha/summarize-results","check-results","cljs.spec.test.alpha.summarize_results","summary-result","summary","cljs.pprint.pprint","cljs.core/inc","cljs.core.fnil"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.spec.test.alpha\n  (:require-macros [cljs.spec.test.alpha :as m :refer [with-instrument-disabled setup-static-dispatches]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn ->sym\n  [x]\n  (@#'s/->sym x))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- fn-spec?\n  \"Fn-spec must include at least :args or :ret specs.\"\n  [m]\n  (or (:args m) (:ret m)))\n\n;; wrap spec/explain-data until specs always return nil for ok data\n(defn- explain-data*\n  [spec v]\n  (when-not (s/valid? spec v nil)\n    (s/explain-data spec v)))\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n         (drop-while #(not (search-spec-fn %)))\n         (drop-while search-spec-fn)\n         first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f fn-spec]\n  (let [fn-spec (@#'s/maybe-spec fn-spec)\n        args-spec (:args fn-spec)\n        conform! (fn [v role spec data args]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             ed (merge (assoc (s/explain-data* spec [] [] [] data)\n                                         ::s/fn (->sym v)\n                                         ::s/args args\n                                         ::s/failure :instrument)\n                                  (when caller\n                                    {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \" v \" did not conform to spec.\" )\n                                  ed)))\n                       conformed)))\n        pure-variadic? (and (-> (meta v) :top-fn :variadic?)\n                            (zero? (-> (meta v) :top-fn :max-fixed-arity)))\n        apply' (fn [f args]\n                 (if (and (nil? args)\n                          pure-variadic?)\n                   (.cljs$core$IFn$_invoke$arity$variadic f)\n                   (apply f args)))\n        conform!* #(conform! v :args args-spec % %)\n        ret (if args-spec\n              (fn [& args]\n                (if *instrument-enabled*\n                  (with-instrument-disabled\n                    (conform!* args)\n                    (binding [*instrument-enabled* true]\n                      (apply' f args)))\n                  (apply' f args)))\n              f)]\n    (when (and (not pure-variadic?) args-spec)\n      (setup-static-dispatches f ret conform!* 20)\n      (when-some [variadic (.-cljs$core$IFn$_invoke$arity$variadic f)]\n        (set! (.-cljs$core$IFn$_invoke$arity$variadic ret)\n          (fn [& args]\n            (if *instrument-enabled*\n              (with-instrument-disabled\n                (conform!* (apply list* args))\n                (binding [*instrument-enabled* true]\n                  (apply' variadic args)))\n              (apply' variadic args))))))\n    ret))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n    {:var v :spec spec ::s/failure :no-fspec}))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn- instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn- unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn- collectionize\n  [x]\n  (if (symbol? x)\n    (list x)\n    x))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\nthat can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; testing  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- explain-check\n  [args spec v role]\n  (ex-info\n    \"Specification-based check failed\"\n    (when-not (s/valid? spec v nil)\n      (assoc (s/explain-data* spec [role] [] [] v)\n        ::args args\n        ::val v\n        ::s/failure :check-failed))))\n\n(defn- check-call\n  \"Returns true if call passes specs, otherwise *returns* an exception\nwith explain-data + ::s/failure.\"\n  [f specs args]\n  (let [cargs (when (:args specs) (s/conform (:args specs) args))]\n    (if (= cargs ::s/invalid)\n      (explain-check args (:args specs) args :args)\n      (let [ret (apply f args)\n            cret (when (:ret specs) (s/conform (:ret specs) ret))]\n        (if (= cret ::s/invalid)\n          (explain-check args (:ret specs) ret :ret)\n          (if (and (:args specs) (:ret specs) (:fn specs))\n            (if (s/valid? (:fn specs) {:args cargs :ret cret})\n              true\n              (explain-check args (:fn specs) {:args cargs :ret cret} :fn))\n            true))))))\n\n(defn- quick-check\n  [f specs {gen :gen opts :clojure.spec.test.check/opts}]\n  (let [{:keys [num-tests] :or {num-tests 1000}} opts\n        g (try (s/gen (:args specs) gen) (catch js/Error t t))]\n    (if (instance? js/Error g)\n      {:result g}\n      (let [prop (gen/for-all* [g] #(check-call f specs %))]\n        (apply gen/quick-check num-tests prop (mapcat identity opts))))))\n\n(defn- make-check-result\n  \"Builds spec result map.\"\n  [check-sym spec test-check-ret tc-ret-key]\n  (merge {:spec spec\n          tc-ret-key test-check-ret}\n    (when check-sym\n      {:sym check-sym})\n    (when-let [result (-> test-check-ret :result)]\n      (when-not (true? result) {:failure result}))\n    (when-let [shrunk (-> test-check-ret :shrunk)]\n      {:failure (:result shrunk)})))\n\n(defn validate-check-opts\n  [opts]\n  (assert (every? ident? (keys (:gen opts))) \"check :gen expects ident keys\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; check reporting  ;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn- failure-type\n  [x]\n  (::s/failure (ex-data x)))\n\n(defn- unwrap-failure\n  [x]\n  (if (failure-type x)\n    (ex-data x)\n    x))\n\n(defn- result-type\n  \"Returns the type of the check result. This can be any of the\n::s/failure keywords documented in 'check', or:\n\n  :check-passed   all checked fn returns conformed\n  :check-threw    checked fn threw an exception\"\n  [ret]\n  (let [failure (:failure ret)]\n    (cond\n      (nil? failure) :check-passed\n      (failure-type failure) (failure-type failure)\n      :default :check-threw)))\n\n(defn abbrev-result\n  \"Given a check result, returns an abbreviated version\nsuitable for summary use.\"\n  [x]\n  (if (:failure x)\n    (-> (dissoc x :clojure.spec.test.check/ret)\n      (update :spec s/describe)\n      (update :failure unwrap-failure))\n    (dissoc x :spec :clojure.spec.test.check/opts)))\n\n(defn summarize-results\n  \"Given a collection of check-results, e.g. from 'check', pretty\nprints the summary-result (default abbrev-result) of each.\n\nReturns a map with :total, the total number of results, plus a\nkey with a count for each different :type of result.\"\n  ([check-results] (summarize-results check-results abbrev-result))\n  ([check-results summary-result]\n   (reduce\n     (fn [summary result]\n       (pp/pprint (summary-result result))\n       (-> summary\n         (update :total inc)\n         (update (result-type result) (fnil inc 0))))\n     {:total 0}\n     check-results)))\n\n(comment\n  (require\n    '[cljs.pprint :as pp]\n    '[cljs.spec :as s]\n    '[cljs.spec.gen :as gen]\n    '[cljs.test :as ctest])\n\n  (require :reload '[cljs.spec.test :as test])\n\n  ;; discover speced vars for your own test runner\n  (s/speced-vars)\n\n  ;; check a single var\n  (test/check-var #'-)\n  (test/check-var #'+)\n  (test/check-var #'clojure.spec.broken-specs/throwing-fn)\n\n  ;; old style example tests\n  (ctest/run-all-tests)\n\n  (s/speced-vars 'clojure.spec.correct-specs)\n  ;; new style spec tests return same kind of map\n  (test/check-var #'subs)\n  (cljs.spec.test/run-tests 'clojure.core)\n  (test/run-all-tests)\n\n  ;; example evaluation\n  (defn ranged-rand\n    \"Returns random int in range start <= rand < end\"\n    [start end]\n    (+ start (long (rand (- end start)))))\n\n  (s/fdef ranged-rand\n    :args (s/and (s/cat :start int? :end int?)\n                 #(< (:start %) (:end %)))\n    :ret  int?\n    :fn   (s/and #(>= (:ret %) (-> % :args :start))\n                 #(< (:ret %) (-> % :args :end))))\n\n  (instrumentable-syms)\n\n  (m/instrument-1 `ranged-rand {})\n  (m/unstrument-1 `ranged-rand)\n\n  (m/instrument)\n  (m/instrument `ranged-rand)\n  (m/instrument `[ranged-rand])\n\n  (m/unstrument)\n  (m/unstrument `ranged-rand)\n  (m/unstrument `[ranged-rand])\n\n  (ranged-rand 8 5)\n  (defn foo\n    ([a])\n    ([a b]\n     (ranged-rand 8 5)))\n  (foo 1 2)\n  (m/unstrument-1 `ranged-rand)\n\n  (m/check-1 `ranged-rand nil nil {})\n\n  (m/check-fn inc\n    (s/fspec\n      :args (s/cat :x int?)\n      :ret  int?))\n\n  (m/checkable-syms)\n\n  (m/check `ranged-rand)\n  )\n\n\n\n\n\n"]}