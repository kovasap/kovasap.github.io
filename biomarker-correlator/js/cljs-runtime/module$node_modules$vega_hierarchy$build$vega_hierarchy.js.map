{
"version":3,
"file":"module$node_modules$vega_hierarchy$build$vega_hierarchy.js",
"lineCount":18,
"mappings":"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,eAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,gBAAvB,CAAgC,CACnH,SAAS,CAACH,MAAD,CAASI,OAAT,CAAkB,CACP,QAAnB,GAAA,MAAOD,iBAAP,EAAiD,WAAjD,GAA+B,MAAOD,OAAtC,CAA+DE,OAAA,CAAQD,gBAAR,CAAiBF,OAAA,CAAQ,uDAAR,CAAjB,CAA2CA,OAAA,CAAQ,+CAAR,CAA3C,CAAiEA,OAAA,CAAQ,oDAAR,CAAjE,CAA/D,CACkB,UAAlB,GAAA,MAAOI,OAAP,EAAgCA,MAAOC,CAAAA,GAAvC,CAA6CD,MAAA,CAAO,CAAC,SAAD,CAAY,eAAZ;AAA6B,WAA7B,CAA0C,cAA1C,CAAP,CAAkED,OAAlE,CAA7C,EACCJ,MAAA,CAA+B,WAAtB,GAAA,MAAOO,WAAP,CAAoCA,UAApC,CAAiDP,MAAjD,EAA2DQ,IAApE,CAA0EJ,OAAA,CAAQJ,MAAOS,CAAAA,IAAf,CAAsB,EAAtB,CAA0BT,MAAOS,CAAAA,IAAjC,CAAuCT,MAAOS,CAAAA,IAA9C,CAAoDT,MAAOU,CAAAA,EAA3D,CAD3E,CAF0B,CAA3B,CAAA,CAIC,IAJD,CAIQ,QAAS,CAACP,OAAD,CAAUQ,YAAV,CAAwBC,QAAxB,CAAkCC,WAAlC,CAA+C,CAG/DC,QAASA,OAAO,CAACC,IAAD,CAAOC,GAAP,CAAYC,MAAZ,CAAoB,CAClC,MAAMC,IAAM,EACZH,KAAKI,CAAAA,IAAL,CAAUC,IAAA,EAAQ,CAChB,MAAMC,EAAID,IAAKE,CAAAA,IACXL,OAAA,CAAOI,CAAP,CAAJ,GAAeH,GAAA,CAAIF,GAAA,CAAIK,CAAJ,CAAJ,CAAf,CAA6BD,IAA7B,CAFgB,CAAlB,CAIAL,KAAKD,CAAAA,MAAL,CAAcI,GACd,OAAOH,KAP2B,CAqBpCQ,QAASA,KAAI,CAACC,MAAD,CAAS,CACpBb,YAAac,CAAAA,SAAUC,CAAAA,IAAvB,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCF,MAAxC,CADoB,CAsEtBG,QAASA,cAAI,EAAG,CAOdC,QAASA,MAAK,CAACC,KAAD,CAAQC,KAAR,CAAe,CAC3B,GAAIA,KAAJ,EAAaC,IAAKC,CAAAA,MAAlB,CACE,MAAOH,MAFkB;MAKrBI,EAAIJ,KAAMG,CAAAA,MALW,CAMrBhB,IAAMe,IAAA,CAAKD,KAAA,EAAL,CANe,CAOrBI,YAAc,EAPO,CAQrBC,OAAS,EARY,KASvBC,EAAI,CAAC,CATkB,CAUvBC,QAVuB,CAWvBC,KAXuB,CAYvBC,MAEJ,KAAA,CAAO,EAAEH,CAAT,CAAaH,CAAb,CAAA,CACEI,QAEA,CAFWrB,GAAA,CAAIsB,KAAJ,CAAYT,KAAA,CAAMO,CAAN,CAAZ,CAEX,CAFmC,EAEnC,CAAA,CAAIG,MAAJ,CAAaL,WAAA,CAAYG,QAAZ,CAAb,EACEE,MAAOC,CAAAA,IAAP,CAAYF,KAAZ,CADF,CAGEJ,WAAA,CAAYG,QAAZ,CAHF,CAG0B,CAACC,KAAD,CAI5B,KAAKD,QAAL,GAAiBH,YAAjB,CACEC,MAAA,CAAOE,QAAP,CAAA,CAAmBT,KAAA,CAAMM,WAAA,CAAYG,QAAZ,CAAN,CAA6BP,KAA7B,CAGrB,OAAOK,OA5BoB,CA+B7BM,QAASA,QAAO,CAACvB,GAAD,CAAMY,KAAN,CAAa,CAC3B,GAAI,EAAEA,KAAN,CAAcC,IAAKC,CAAAA,MAAnB,CAA2B,MAAOd,IAClC,OAAMW,MAAQ,EAEd,KAAK,MAAMb,GAAX,GAAkBE,IAAlB,CACEW,KAAMW,CAAAA,IAAN,CAAW,CACTxB,GADS,CAETuB,OAAQE,OAAA,CAAQvB,GAAA,CAAIF,GAAJ,CAAR,CAAkBc,KAAlB,CAFC,CAAX,CAMF,OAAOD,MAXoB,CAtCf,MACRE,KAAO,EADC,CAERJ,KAAO,CACXc,QAASZ,KAAAY;AAASA,OAAA,CAAQb,KAAA,CAAMC,KAAN,CAAa,CAAb,CAAR,CAAyB,CAAzB,CADP,CAEXb,IAAK0B,CAAA1B,GAAMe,IAAKS,CAAAA,IAAL,CAAUE,CAAV,CAAA,CAAcf,IAApBX,CAFM,CAkDb,OAAOW,KApDO,CA6DhBgB,QAASA,gBAAe,CAACnB,MAAD,CAAS,CAC/Bb,YAAac,CAAAA,SAAUC,CAAAA,IAAvB,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCF,MAAxC,CAD+B,CAoCjCoB,QAASA,UAAS,CAACC,MAAD,CAASrB,MAAT,CAAiBsB,CAAjB,CAAoB,CACpC,IAAK,IAAIC,CAAJ,CAAOX,EAAI,CAAX,CAAcH,EAAIT,MAAOQ,CAAAA,MAA9B,CAAsCI,CAAtC,CAA0CH,CAA1C,CAA6C,EAAEG,CAA/C,CAEE,GADAW,CACI,CADAvB,MAAA,CAAOY,CAAP,CACA,CAAAW,CAAA,GAAKD,EAAT,CAAYD,MAAA,CAAOE,CAAP,CAAA,CAAUD,CAAA,CAAEC,CAAF,CAAV,CAHsB,CA0BtCC,QAASA,KAAI,CAACxB,MAAD,CAAS,CACpBmB,eAAgBjB,CAAAA,IAAhB,CAAqB,IAArB,CAA2BF,MAA3B,CADoB,CAkDtByB,QAASA,UAAS,CAACzB,MAAD,CAAS,CACzBmB,eAAgBjB,CAAAA,IAAhB,CAAqB,IAArB,CAA2BF,MAA3B,CADyB,CAmD3B0B,QAASA,SAAQ,CAAC1B,MAAD,CAAS,CACxBb,YAAac,CAAAA,SAAUC,CAAAA,IAAvB,CAA4B,IAA5B,CAAkC,IAAlC,CAAwCF,MAAxC,CADwB,CAuD1B2B,QAASA,KAAI,CAAC3B,MAAD,CAAS,CACpBmB,eAAgBjB,CAAAA,IAAhB,CAAqB,IAArB,CAA2BF,MAA3B,CADoB;AA+DtB4B,QAASA,UAAS,CAAC5B,MAAD,CAAS,CACzBb,YAAac,CAAAA,SAAUC,CAAAA,IAAvB,CAA4B,IAA5B,CAAkC,EAAlC,CAAsCF,MAAtC,CADyB,CAsE3B6B,QAASA,QAAO,CAAC7B,MAAD,CAAS,CACvBmB,eAAgBjB,CAAAA,IAAhB,CAAqB,IAArB,CAA2BF,MAA3B,CADuB,CA/dzBD,IAAK+B,CAAAA,UAAL,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CACV,WAAc,CAAA,CADJ,CAEV,QAAW,CAAA,CAFD,CAFI,CAMhB,OAAU,CAAC,CACT,KAAQ,MADC,CAET,KAAQ,OAFC,CAGT,MAAS,CAAA,CAHA,CAAD,CAIP,CACD,KAAQ,UADP,CAED,KAAQ,SAFP,CAJO,CANM,CAgBlB,OAAMC,SAAWtB,CAAAsB,EAAKtB,CAAEM,CAAAA,MAExB3B,SAAS4C,CAAAA,QAAT,CAAkBjC,IAAlB,CAAwBZ,YAAac,CAAAA,SAArC,CAAgD,CAC9CgC,SAAS,CAACX,CAAD,CAAIY,KAAJ,CAAW,CACbA,KAAMC,CAAAA,MAAX,EACE/C,QAASgD,CAAAA,KAAT,CAAe,kDAAf,CAFgB,KAKdC,IAAMf,CAAEgB,CAAAA,QALM,CAMdC,IAAMjB,CAAEkB,CAAAA,QAAF,EANQ,CAOdC,IAAMP,KAAMQ,CAAAA,KAAN,EAPQ;AAQdnD,KAAO,IAAKuB,CAAAA,KAEhB,IAAI,CAACvB,IAAL,EAAagD,GAAb,EAAoBL,KAAMS,CAAAA,OAAN,EAApB,CAEMpD,IA2BJ,EA1BEA,IAAKI,CAAAA,IAAL,CAAUC,IAAA,EAAQ,CACZA,IAAKmC,CAAAA,QAAT,EAAqB5C,YAAayD,CAAAA,OAAb,CAAqBhD,IAAKE,CAAAA,IAA1B,CAArB,EACE2C,GAAII,CAAAA,GAAI7B,CAAAA,IAAR,CAAapB,IAAKE,CAAAA,IAAlB,CAFc,CAAlB,CA0BF,CAlBA,IAAKgB,CAAAA,KAkBL,CAlBavB,IAkBb,CAlBoBF,WAAYyD,CAAAA,SAAZ,CAAsB,CACxC/B,OAAQ3B,QAASiB,CAAAA,KAAT,CAAeiB,CAAEf,CAAAA,IAAjB,CAAuBwC,CAAAA,MAAvB,CAA8B,CAACtC,CAAD,CAAIuC,CAAJ,CAAA,EAAU,CAC9CvC,CAAEjB,CAAAA,GAAF,CAAMwD,CAAN,CACA,OAAOvC,EAFuC,CAAxC,CAGLN,aAAA,EAHK,CAGGc,CAAAA,OAHH,CAGWwB,GAAIN,CAAAA,MAHf,CADgC,CAAtB,CAKjBJ,QALiB,CAkBpB,CAXIM,GAWJ,EAVE9C,IAAKI,CAAAA,IAAL,CAAUC,IAAA,EAAQ,CACZA,IAAKmC,CAAAA,QAAT,GACEnC,IAEA,CAFOT,YAAa8D,CAAAA,MAAb,CAAoBrD,IAAKE,CAAAA,IAAzB,CAEP,CADA2C,GAAIS,CAAAA,GAAIlC,CAAAA,IAAR,CAAapB,IAAb,CACA,CAAA6C,GAAIN,CAAAA,MAAOnB,CAAAA,IAAX,CAAgBpB,IAAhB,CAHF,CADgB,CAAlB,CAUF,CAAAN,MAAA,CAAOC,IAAP,CAAaJ,YAAagE,CAAAA,OAA1B,CAAmChE,YAAagE,CAAAA,OAAhD,CAGFV,IAAIN,CAAAA,MAAOiB,CAAAA,IAAX,CAAkB7D,IAClB,OAAOkD,IA3CW,CAD0B,CAAhD,CAkHA;MAAMY,kBAAoB,CAACC,CAAD,CAAIC,CAAJ,CAAAF,EAAUC,CAAEE,CAAAA,MAAF,GAAaD,CAAEC,CAAAA,MAAf,CAAwB,CAAxB,CAA4B,CAEhEpE,SAAS4C,CAAAA,QAAT,CAAkBb,eAAlB,CAAmChC,YAAac,CAAAA,SAAhD,CAA2D,CACzDgC,SAAS,CAACX,CAAD,CAAIY,KAAJ,CAAW,CACbA,KAAMC,CAAAA,MAAX,EAAsBD,KAAMC,CAAAA,MAAOiB,CAAAA,IAAnC,EACEhE,QAASgD,CAAAA,KAAT,CAAe,IAAKqB,CAAAA,WAAYC,CAAAA,IAAhC,CAAuC,iDAAvC,CAFgB,OAKZrC,OAAS,IAAKA,CAAAA,MAAL,CAAYC,CAAEqC,CAAAA,MAAd,CALG,CAMZC,OAAS,IAAKA,CAAAA,MANF,CAOZR,KAAOlB,KAAMC,CAAAA,MAAOiB,CAAAA,IAPR,CAQZS,GAAKvC,CAAEuC,CAAAA,EAAPA,EAAaD,MACftC,EAAEwC,CAAAA,KAAN,CAAaV,IAAKW,CAAAA,GAAL,CAASzC,CAAEwC,CAAAA,KAAX,CAAb,CAAoCV,IAAKY,CAAAA,KAAL,EAChC1C,EAAE2C,CAAAA,IAAN,EAAYb,IAAKa,CAAAA,IAAL,CAAU9E,YAAa+E,CAAAA,aAAb,CAA2B5C,CAAE2C,CAAAA,IAA7B,CAAmC/C,CAAA,EAAKA,CAAEpB,CAAAA,IAA1C,CAAV,CACZsB,UAAA,CAAUC,MAAV,CAAkB,IAAKrB,CAAAA,MAAvB,CAA+BsB,CAA/B,CAEID,OAAO8C,CAAAA,UAAX,EACE9C,MAAO8C,CAAAA,UAAP,CAAmC,CAAA,CAAjB;AAAA7C,CAAE6C,CAAAA,UAAF,CAAyBd,iBAAzB,CAA6CjE,QAASgF,CAAAA,GAAxE,CAGF,IAAI,CACF,IAAKtD,CAAAA,KAAL,CAAaO,MAAA,CAAO+B,IAAP,CADX,CAEF,MAAOiB,GAAP,CAAY,CACZjF,QAASgD,CAAAA,KAAT,CAAeiC,GAAf,CADY,CAIdjB,IAAKzD,CAAAA,IAAL,CAAUC,IAAA,EAAQ,CAae,MAC7BC,EAdwBD,IAcfE,CAAAA,IADoB,CAE7BW,EAf8BmD,MAenBpD,CAAAA,MAAXC,CAAoB,CAE1B,KAAK,IAAIG,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,CAApB,CAAuB,EAAEG,CAAzB,CACEf,CAAA,CAlB0CgE,EAkBxC,CAAGjD,CAAH,CAAF,CAAA,CAlB4BhB,IAkBjB,CAlBuBgE,MAkBlB,CAAOhD,CAAP,CAAL,CAGbf,EAAA,CArB4CgE,EAqB1C,CAAGpD,CAAH,CAAF,CAAA,CArB8Bb,IAqBdmC,CAAAA,QAAL,CArBmBnC,IAqBEmC,CAAAA,QAASvB,CAAAA,MAA9B,CAAuC,CArB9B,CAAlB,CACA,OAAO0B,MAAMoC,CAAAA,MAAN,CAAahD,CAAEkB,CAAAA,QAAF,EAAb,CAA2B+B,CAAAA,QAA3B,CAAoCV,EAApC,CAAwCU,CAAAA,QAAxC,CAAiD,MAAjD,CAxBW,CADqC,CAA3D,CAgDA,KAAMC,OAAS,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,CAAgB,OAAhB,CAAyB,UAAzB,CAWfhD,KAAKM,CAAAA,UAAL,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CACV,KAAQ,CAAA,CADE,CAEV,SAAY,CAAA,CAFF,CAFI,CAMhB,OAAU,CAAC,CACT,KAAQ,OADC,CAET,KAAQ,OAFC,CAAD,CAGP,CACD,KAAQ,MADP,CAED,KAAQ,SAFP,CAHO,CAMP,CACD,KAAQ,SADP;AAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CANO,CAUP,CACD,KAAQ,QADP,CAED,KAAQ,OAFP,CAGD,UAAW,IAHV,CAVO,CAcP,CACD,KAAQ,MADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU,CAJT,CAdO,CAmBP,CACD,KAAQ,IADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU0C,MAAOhE,CAAAA,MAJhB,CAKD,UAAWgE,MALV,CAnBO,CANM,CAiClBpF,SAAS4C,CAAAA,QAAT,CAAkBR,IAAlB,CAAwBL,eAAxB,CAAyC,CACvCE,OAAQhC,WAAYoF,CAAAA,IADmB,CAEvCzE,OAAQ,CAAC,QAAD,CAAW,MAAX,CAAmB,SAAnB,CAF+B,CAGvC4D,OAAQY,MAH+B,CAAzC,CAMME,OAAAA,CAAW,4BAAA,CAAA,KAAA,CAAA,GAAA,CAWjBjD,UAAUK,CAAAA,UAAV,CAAuB,CACrB,KAAQ,WADa,CAErB,SAAY,CACV,KAAQ,CAAA,CADE,CAEV,SAAY,CAAA,CAFF,CAFS,CAMrB,OAAU,CAAC,CACT,KAAQ,OADC,CAET,KAAQ,OAFC,CAAD,CAGP,CACD,KAAQ,MADP,CAED,KAAQ,SAFP,CAHO,CAMP,CACD,KAAQ,SADP;AAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CANO,CAUP,CACD,KAAQ,OADP,CAED,KAAQ,SAFP,CAGD,UAAW,CAAA,CAHV,CAVO,CAcP,CACD,KAAQ,MADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU,CAJT,CAdO,CAmBP,CACD,KAAQ,IADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU4C,MAASlE,CAAAA,MAJlB,CAKD,UAAWkE,MALV,CAnBO,CANW,CAiCvBtF,SAAS4C,CAAAA,QAAT,CAAkBP,SAAlB,CAA6BN,eAA7B,CAA8C,CAC5CE,OAAQhC,WAAYsF,CAAAA,SADwB,CAE5C3E,OAAQ,CAAC,MAAD,CAAS,OAAT,CAAkB,SAAlB,CAFoC,CAG5C4D,OAAQc,MAHoC,CAA9C,CAkBAhD,SAASI,CAAAA,UAAT,CAAsB,CACpB,KAAQ,UADY,CAEpB,SAAY,CACV,WAAc,CAAA,CADJ,CAFQ,CAKpB,OAAU,CAAC,CACT,KAAQ,KADC,CAET,KAAQ,OAFC,CAGT,SAAY,CAAA,CAHH,CAAD,CAIP,CACD,KAAQ,WADP,CAED,KAAQ,OAFP,CAGD,SAAY,CAAA,CAHX,CAJO,CALU,CAetB1C,SAAS4C,CAAAA,QAAT,CAAkBN,QAAlB,CAA4BvC,YAAac,CAAAA,SAAzC;AAAoD,CAClDgC,SAAS,CAACX,CAAD,CAAIY,KAAJ,CAAW,CACbA,KAAMC,CAAAA,MAAX,EACE/C,QAASgD,CAAAA,KAAT,CAAe,sDAAf,CAGF,KAAI7C,KAAO,IAAKuB,CAAAA,KALE,OAOZyB,IAAMjB,CAAEkB,CAAAA,QAAF,EAPM,CAQZC,IAAMP,KAAM0C,CAAAA,IAAN,CAAW1C,KAAM2C,CAAAA,GAAjB,CAAsBC,CAAAA,WAAtB,CAAkC5C,KAAM6C,CAAAA,MAAxC,CACNC,MAAAA,CAAM,CAACzF,IAAPyF,EAAezC,GAAfyC,EAAsB9C,KAAMS,CAAAA,OAAN,CAAcT,KAAM+C,CAAAA,OAApB,CAAtBD,EAAsD9C,KAAMM,CAAAA,QAAN,CAAelB,CAAE9B,CAAAA,GAAIoE,CAAAA,MAArB,CAAtDoB,EAAsF9C,KAAMM,CAAAA,QAAN,CAAelB,CAAE4D,CAAAA,SAAUtB,CAAAA,MAA3B,CAG5FnB,IAAIN,CAAAA,MAAJ,CAAaM,GAAIN,CAAAA,MAAOgD,CAAAA,KAAX,EAETH,MAAJ,GACEzF,IADF,CACSkD,GAAIN,CAAAA,MAAO3B,CAAAA,MAAX,CAAoBlB,MAAA,CAAOD,WAAY+F,CAAAA,QAAZ,EAAuBC,CAAAA,EAAvB,CAA0B/D,CAAE9B,CAAAA,GAA5B,CAAiC8F,CAAAA,QAAjC,CAA0ChE,CAAE4D,CAAAA,SAA5C,CAAA,CAAuDzC,GAAIN,CAAAA,MAA3D,CAAP,CAA2Eb,CAAE9B,CAAAA,GAA7E,CAAkFJ,QAASmG,CAAAA,MAA3F,CAApB,CAAyHjG,MAAA,CAAOD,WAAY+F,CAAAA,QAAZ,EAAA,CAAuB,CAAC,EAAD,CAAvB,CAAP;AAAqC9D,CAAE9B,CAAAA,GAAvC,CAA4C8B,CAAE9B,CAAAA,GAA9C,CADlI,CAIAiD,IAAIN,CAAAA,MAAOiB,CAAAA,IAAX,CAAkB,IAAKtC,CAAAA,KAAvB,CAA+BvB,IAC/B,OAAOkD,IAnBW,CAD8B,CAApD,CAyBA,OAAM+C,QAAU,CACdC,KAAMpG,WAAYE,CAAAA,IADJ,CAEdmG,QAASrG,WAAYqG,CAAAA,OAFP,CAIVC,OAAAA,CAAW,CAAC,GAAD,CAAM,GAAN,CAAW,OAAX,CAAoB,UAApB,CAWjBhE,KAAKG,CAAAA,UAAL,CAAkB,CAChB,KAAQ,MADQ,CAEhB,SAAY,CACV,KAAQ,CAAA,CADE,CAEV,SAAY,CAAA,CAFF,CAFI,CAMhB,OAAU,CAAC,CACT,KAAQ,OADC,CAET,KAAQ,OAFC,CAAD,CAGP,CACD,KAAQ,MADP,CAED,KAAQ,SAFP,CAHO,CAMP,CACD,KAAQ,QADP,CAED,KAAQ,MAFP,CAGD,UAAW,MAHV,CAID,OAAU,CAAC,MAAD,CAAS,SAAT,CAJT,CANO,CAWP,CACD,KAAQ,MADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU,CAJT,CAXO,CAgBP,CACD,KAAQ,UADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU,CAJT,CAhBO,CAqBP,CACD,KAAQ,YADP,CAED,KAAQ,SAFP,CAGD,UAAW,CAAA,CAHV,CArBO;AAyBP,CACD,KAAQ,IADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU6D,MAASnF,CAAAA,MAJlB,CAKD,UAAWmF,MALV,CAzBO,CANM,CAuClBvG,SAAS4C,CAAAA,QAAT,CAAkBL,IAAlB,CAAwBR,eAAxB,CAAyC,CAIvCE,MAAM,CAACsC,MAAD,CAAS,CACPiC,MAAAA,CAAIjC,MAAJiC,EAAc,MACpB,IAAIxG,QAASyG,CAAAA,cAAT,CAAwBL,OAAxB,CAAiCI,MAAjC,CAAJ,CAAyC,MAAOJ,QAAA,CAAQI,MAAR,CAAA,EAAkBxG,SAASgD,CAAAA,KAAT,CAAe,mCAAf,CAAqDwD,MAArD,CAFrD,CAJwB,CASvC5F,OAAQ,CAAC,MAAD,CAAS,UAAT,CAT+B,CAUvC4D,OAAQ+B,MAV+B,CAAzC,CAwBA/D,UAAUE,CAAAA,UAAV,CAAuB,CACrB,KAAQ,WADa,CAErB,SAAY,CACV,KAAQ,CAAA,CADE,CAEV,UAAa,CAAA,CAFH,CAGV,QAAW,CAAA,CAHD,CAFS,CAOrB,OAAU,EAPW,CASvB1C,SAAS4C,CAAAA,QAAT,CAAkBJ,SAAlB,CAA6BzC,YAAac,CAAAA,SAA1C,CAAqD,CACnDgC,SAAS,CAACX,CAAD,CAAIY,KAAJ,CAAW,CACZ4D,CAAAA,CAAQ,IAAKhF,CAAAA,KADD,OAEZvB;AAAO2C,KAAMC,CAAAA,MAAb5C,EAAuB2C,KAAMC,CAAAA,MAAOiB,CAAAA,IAFxB,CAGZX,IAAMP,KAAM0C,CAAAA,IAAN,CAAW1C,KAAM6D,CAAAA,SAAjB,CAHM,CAIZC,IAAM,EACPzG,KAAL,EAAWH,QAASgD,CAAAA,KAAT,CAAe,kDAAf,CAEPF,MAAMS,CAAAA,OAAN,CAAcT,KAAM+C,CAAAA,OAApB,CAAJ,EAEExC,GAAII,CAAAA,GAeJ,CAfUiD,CAeV,CAbA5D,KAAM+D,CAAAA,KAAN,CAAY/D,KAAM6C,CAAAA,MAAlB,CAA0BlF,CAAA,EAAKmG,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqBtD,CAArB,CAAJ,CAAL,CAAoC,CAA9D,CAaA,CAXAN,IAAKI,CAAAA,IAAL,CAAUC,IAAA,EAAQ,CAAA,MACVC,EAAID,IAAKE,CAAAA,IAGf,EAFMyB,IAEN,CAFU3B,IAAK4D,CAAAA,MAEf,EAFyB5D,IAAK4D,CAAAA,MAAO1D,CAAAA,IAErC,GAASkG,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqBtD,CAArB,CAAJ,CAAT,EAAyCmG,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqB5B,IAArB,CAAJ,CAAzC,EACEkB,GAAIS,CAAAA,GAAIlC,CAAAA,IAAR,CAAa7B,YAAa8D,CAAAA,MAAb,CAAoB,CAC/Bd,OAAQZ,IADuB,CAE/B2E,OAAQrG,CAFuB,CAApB,CAAb,CALc,CAAlB,CAWA,CAAA,IAAKiB,CAAAA,KAAL,CAAa2B,GAAIS,CAAAA,GAjBnB,EAkBWhB,KAAMS,CAAAA,OAAN,CAAcT,KAAMiE,CAAAA,GAApB,CAlBX,GAoBEjE,KAAM+D,CAAAA,KAAN,CAAY/D,KAAMiE,CAAAA,GAAlB;AAAuBtG,CAAA,EAAKmG,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqBtD,CAArB,CAAJ,CAAL,CAAoC,CAA3D,CAEA,CAAAiG,CAAMM,CAAAA,OAAN,CAAcC,IAAA,EAAQ,CACpB,CAAIL,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqBkD,IAAKlE,CAAAA,MAA1B,CAAJ,CAAJ,EAA8C6D,GAAA,CAAI7G,YAAagE,CAAAA,OAAb,CAAqBkD,IAAKH,CAAAA,MAA1B,CAAJ,CAA9C,GACEzD,GAAIF,CAAAA,GAAIvB,CAAAA,IAAR,CAAaqF,IAAb,CAFkB,CAAtB,CAtBF,CA6BA,OAAO5D,IApCW,CAD+B,CAArD,CA0CA,OAAM6D,MAAQ,CACZC,OAAQlH,WAAYmH,CAAAA,aADR,CAEZC,KAAMpH,WAAYqH,CAAAA,WAFN,CAGZvB,MAAO9F,WAAYsH,CAAAA,YAHP,CAIZC,UAAWvH,WAAYwH,CAAAA,gBAJX,CAKZC,SAAUzH,WAAY0H,CAAAA,eALV,CAMZC,WAAY3H,WAAY4H,CAAAA,iBANZ,CAQRC,OAAAA,CAAW,4BAAA,CAAA,KAAA,CAAA,GAAA,CAWjBrF,QAAQC,CAAAA,UAAR,CAAqB,CACnB,KAAQ,SADW,CAEnB,SAAY,CACV,KAAQ,CAAA,CADE,CAEV,SAAY,CAAA,CAFF,CAFO;AAMnB,OAAU,CAAC,CACT,KAAQ,OADC,CAET,KAAQ,OAFC,CAAD,CAGP,CACD,KAAQ,MADP,CAED,KAAQ,SAFP,CAHO,CAMP,CACD,KAAQ,QADP,CAED,KAAQ,MAFP,CAGD,UAAW,UAHV,CAID,OAAU,iDAAA,CAAA,KAAA,CAAA,GAAA,CAJT,CANO,CAWP,CACD,KAAQ,SADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CAXO,CAeP,CACD,KAAQ,cADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CAfO,CAmBP,CACD,KAAQ,cADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CAnBO,CAuBP,CACD,KAAQ,YADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CAvBO,CA2BP,CACD,KAAQ,cADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CA3BO,CA+BP,CACD,KAAQ,eADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CA/BO,CAmCP,CACD,KAAQ,aADP,CAED,KAAQ,QAFP,CAGD,UAAW,CAHV,CAnCO;AAuCP,CACD,KAAQ,OADP,CAED,KAAQ,QAFP,CAGD,UAAW,iBAHV,CAvCO,CA2CP,CACD,KAAQ,OADP,CAED,KAAQ,SAFP,CAGD,UAAW,CAAA,CAHV,CA3CO,CA+CP,CACD,KAAQ,MADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAU,CAJT,CA/CO,CAoDP,CACD,KAAQ,IADP,CAED,KAAQ,QAFP,CAGD,MAAS,CAAA,CAHR,CAID,OAAUoF,MAAS1G,CAAAA,MAJlB,CAKD,UAAW0G,MALV,CApDO,CANS,CAkErB9H,SAAS4C,CAAAA,QAAT,CAAkBH,OAAlB,CAA2BV,eAA3B,CAA4C,CAK1CE,MAAM,EAAG,CACP,MAAM8F,EAAI9H,WAAY+H,CAAAA,OAAZ,EAEVD,EAAEE,CAAAA,KAAF,CAAU/F,CAAAgG,EAAK,CACb,MAAMzH,EAAIsH,CAAEI,CAAAA,IAAF,EACN1H,EAAEwH,CAAAA,KAAN,EAAaF,CAAEI,CAAAA,IAAF,CAAO1H,CAAEwH,CAAAA,KAAF,CAAQ/F,CAAR,CAAP,CAFA,CAKf6F,EAAExD,CAAAA,MAAF,CAAWrC,CAAAkG,EAAK,CACVpI,QAASyG,CAAAA,cAAT,CAAwBS,KAAxB,CAA+BhF,CAA/B,CAAJ,CAAuC6F,CAAEI,CAAAA,IAAF,CAAOjB,KAAA,CAAMhF,CAAN,CAAP,CAAvC,CAA6DlC,QAASgD,CAAAA,KAAT,CAAe,sCAAf,CAAwDd,CAAxD,CAD/C,CAIhB,OAAO6F,EAZA,CALiC,CAoB1CnH,OAAQ,6GAAA,CAAA,KAAA,CAAA,GAAA,CApBkC;AAqB1C4D,OAAQsD,MArBkC,CAA5C,CAwBAvI,QAAQwB,CAAAA,IAAR,CAAeJ,IACfpB,QAAQ8F,CAAAA,IAAR,CAAejD,IACf7C,QAAQgG,CAAAA,SAAR,CAAoBlD,SACpB9C,QAAQyG,CAAAA,QAAR,CAAmB1D,QACnB/C,QAAQY,CAAAA,IAAR,CAAeoC,IACfhD,QAAQ8I,CAAAA,SAAR,CAAoB7F,SACpBjD,QAAQyI,CAAAA,OAAR,CAAkBvF,OAElB6F,OAAOC,CAAAA,cAAP,CAAsBhJ,OAAtB,CAA+B,YAA/B,CAA6C,CAAEmC,MAAO,CAAA,CAAT,CAA7C,CA/lB+D,CAJhE,CADmH;",
"sources":["node_modules/vega-hierarchy/build/vega-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_hierarchy$build$vega_hierarchy\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-dataflow'), require('vega-util'), require('d3-hierarchy')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-dataflow', 'vega-util', 'd3-hierarchy'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.d3));\n}(this, (function (exports, vegaDataflow, vegaUtil, d3Hierarchy) { 'use strict';\n\n  // Build lookup table mapping tuple keys to tree node instances\n  function lookup (tree, key, filter) {\n    const map = {};\n    tree.each(node => {\n      const t = node.data;\n      if (filter(t)) map[key(t)] = node;\n    });\n    tree.lookup = map;\n    return tree;\n  }\n\n  /**\n   * Nest tuples into a tree structure, grouped by key values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.keys - The key fields to nest by, in order.\n   * @param {boolean} [params.generate=false] - A boolean flag indicating if\n   *   non-leaf nodes generated by this transform should be included in the\n   *   output. The default (false) includes only the input data (leaf nodes)\n   *   in the data stream.\n   */\n\n  function Nest(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Nest.Definition = {\n    'type': 'Nest',\n    'metadata': {\n      'treesource': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'keys',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'generate',\n      'type': 'boolean'\n    }]\n  };\n\n  const children = n => n.values;\n\n  vegaUtil.inherits(Nest, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Nest transform requires an upstream data source.');\n      }\n\n      var gen = _.generate,\n          mod = _.modified(),\n          out = pulse.clone(),\n          tree = this.value;\n\n      if (!tree || mod || pulse.changed()) {\n        // collect nodes to remove\n        if (tree) {\n          tree.each(node => {\n            if (node.children && vegaDataflow.isTuple(node.data)) {\n              out.rem.push(node.data);\n            }\n          });\n        } // generate new tree structure\n\n\n        this.value = tree = d3Hierarchy.hierarchy({\n          values: vegaUtil.array(_.keys).reduce((n, k) => {\n            n.key(k);\n            return n;\n          }, nest()).entries(out.source)\n        }, children); // collect nodes to add\n\n        if (gen) {\n          tree.each(node => {\n            if (node.children) {\n              node = vegaDataflow.ingest(node.data);\n              out.add.push(node);\n              out.source.push(node);\n            }\n          });\n        } // build lookup table\n\n\n        lookup(tree, vegaDataflow.tupleid, vegaDataflow.tupleid);\n      }\n\n      out.source.root = tree;\n      return out;\n    }\n\n  });\n\n  function nest() {\n    const keys = [],\n          nest = {\n      entries: array => entries(apply(array, 0), 0),\n      key: d => (keys.push(d), nest)\n    };\n\n    function apply(array, depth) {\n      if (depth >= keys.length) {\n        return array;\n      }\n\n      const n = array.length,\n            key = keys[depth++],\n            valuesByKey = {},\n            result = {};\n      let i = -1,\n          keyValue,\n          value,\n          values;\n\n      while (++i < n) {\n        keyValue = key(value = array[i]) + '';\n\n        if (values = valuesByKey[keyValue]) {\n          values.push(value);\n        } else {\n          valuesByKey[keyValue] = [value];\n        }\n      }\n\n      for (keyValue in valuesByKey) {\n        result[keyValue] = apply(valuesByKey[keyValue], depth);\n      }\n\n      return result;\n    }\n\n    function entries(map, depth) {\n      if (++depth > keys.length) return map;\n      const array = [];\n\n      for (const key in map) {\n        array.push({\n          key,\n          values: entries(map[key], depth)\n        });\n      }\n\n      return array;\n    }\n\n    return nest;\n  }\n\n  /**\n   * Abstract class for tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function HierarchyLayout(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n\n  const defaultSeparation = (a, b) => a.parent === b.parent ? 1 : 2;\n\n  vegaUtil.inherits(HierarchyLayout, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source || !pulse.source.root) {\n        vegaUtil.error(this.constructor.name + ' transform requires a backing tree data source.');\n      }\n\n      const layout = this.layout(_.method),\n            fields = this.fields,\n            root = pulse.source.root,\n            as = _.as || fields;\n      if (_.field) root.sum(_.field);else root.count();\n      if (_.sort) root.sort(vegaDataflow.stableCompare(_.sort, d => d.data));\n      setParams(layout, this.params, _);\n\n      if (layout.separation) {\n        layout.separation(_.separation !== false ? defaultSeparation : vegaUtil.one);\n      }\n\n      try {\n        this.value = layout(root);\n      } catch (err) {\n        vegaUtil.error(err);\n      }\n\n      root.each(node => setFields(node, fields, as));\n      return pulse.reflow(_.modified()).modifies(as).modifies('leaf');\n    }\n\n  });\n\n  function setParams(layout, params, _) {\n    for (let p, i = 0, n = params.length; i < n; ++i) {\n      p = params[i];\n      if (p in _) layout[p](_[p]);\n    }\n  }\n\n  function setFields(node, fields, as) {\n    const t = node.data,\n          n = fields.length - 1;\n\n    for (let i = 0; i < n; ++i) {\n      t[as[i]] = node[fields[i]];\n    }\n\n    t[as[n]] = node.children ? node.children.length : 0;\n  }\n\n  const Output = ['x', 'y', 'r', 'depth', 'children'];\n  /**\n   * Packed circle tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Pack(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Pack.Definition = {\n    'type': 'Pack',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'radius',\n      'type': 'field',\n      'default': null\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output.length,\n      'default': Output\n    }]\n  };\n  vegaUtil.inherits(Pack, HierarchyLayout, {\n    layout: d3Hierarchy.pack,\n    params: ['radius', 'size', 'padding'],\n    fields: Output\n  });\n\n  const Output$1 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Partition tree layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Partition(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Partition.Definition = {\n    'type': 'Partition',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$1.length,\n      'default': Output$1\n    }]\n  };\n  vegaUtil.inherits(Partition, HierarchyLayout, {\n    layout: d3Hierarchy.partition,\n    params: ['size', 'round', 'padding'],\n    fields: Output$1\n  });\n\n  /**\n   * Stratify a collection of tuples into a tree structure based on\n   * id and parent id fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.key - Unique key field for each tuple.\n   * @param {function(object): *} params.parentKey - Field with key for parent tuple.\n   */\n\n  function Stratify(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Stratify.Definition = {\n    'type': 'Stratify',\n    'metadata': {\n      'treesource': true\n    },\n    'params': [{\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'parentKey',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Stratify, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (!pulse.source) {\n        vegaUtil.error('Stratify transform requires an upstream data source.');\n      }\n\n      let tree = this.value;\n\n      const mod = _.modified(),\n            out = pulse.fork(pulse.ALL).materialize(pulse.SOURCE),\n            run = !tree || mod || pulse.changed(pulse.ADD_REM) || pulse.modified(_.key.fields) || pulse.modified(_.parentKey.fields); // prevent upstream source pollution\n\n\n      out.source = out.source.slice();\n\n      if (run) {\n        tree = out.source.length ? lookup(d3Hierarchy.stratify().id(_.key).parentId(_.parentKey)(out.source), _.key, vegaUtil.truthy) : lookup(d3Hierarchy.stratify()([{}]), _.key, _.key);\n      }\n\n      out.source.root = this.value = tree;\n      return out;\n    }\n\n  });\n\n  const Layouts = {\n    tidy: d3Hierarchy.tree,\n    cluster: d3Hierarchy.cluster\n  };\n  const Output$2 = ['x', 'y', 'depth', 'children'];\n  /**\n   * Tree layout. Depending on the method parameter, performs either\n   * Reingold-Tilford 'tidy' layout or dendrogram 'cluster' layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Tree(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Tree.Definition = {\n    'type': 'Tree',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'tidy',\n      'values': ['tidy', 'cluster']\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'nodeSize',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'separation',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$2.length,\n      'default': Output$2\n    }]\n  };\n  vegaUtil.inherits(Tree, HierarchyLayout, {\n    /**\n     * Tree layout generator. Supports both 'tidy' and 'cluster' layouts.\n     */\n    layout(method) {\n      const m = method || 'tidy';\n      if (vegaUtil.hasOwnProperty(Layouts, m)) return Layouts[m]();else vegaUtil.error('Unrecognized Tree layout method: ' + m);\n    },\n\n    params: ['size', 'nodeSize'],\n    fields: Output$2\n  });\n\n  /**\n   * Generate tuples representing links between tree nodes.\n   * The resulting tuples will contain 'source' and 'target' fields,\n   * which point to parent and child node tuples, respectively.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function TreeLinks(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  TreeLinks.Definition = {\n    'type': 'TreeLinks',\n    'metadata': {\n      'tree': true,\n      'generates': true,\n      'changes': true\n    },\n    'params': []\n  };\n  vegaUtil.inherits(TreeLinks, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const links = this.value,\n            tree = pulse.source && pulse.source.root,\n            out = pulse.fork(pulse.NO_SOURCE),\n            lut = {};\n      if (!tree) vegaUtil.error('TreeLinks transform requires a tree data source.');\n\n      if (pulse.changed(pulse.ADD_REM)) {\n        // remove previous links\n        out.rem = links; // build lookup table of valid tuples\n\n        pulse.visit(pulse.SOURCE, t => lut[vegaDataflow.tupleid(t)] = 1); // generate links for all edges incident on valid tuples\n\n        tree.each(node => {\n          const t = node.data,\n                p = node.parent && node.parent.data;\n\n          if (p && lut[vegaDataflow.tupleid(t)] && lut[vegaDataflow.tupleid(p)]) {\n            out.add.push(vegaDataflow.ingest({\n              source: p,\n              target: t\n            }));\n          }\n        });\n        this.value = out.add;\n      } else if (pulse.changed(pulse.MOD)) {\n        // build lookup table of modified tuples\n        pulse.visit(pulse.MOD, t => lut[vegaDataflow.tupleid(t)] = 1); // gather links incident on modified tuples\n\n        links.forEach(link => {\n          if (lut[vegaDataflow.tupleid(link.source)] || lut[vegaDataflow.tupleid(link.target)]) {\n            out.mod.push(link);\n          }\n        });\n      }\n\n      return out;\n    }\n\n  });\n\n  const Tiles = {\n    binary: d3Hierarchy.treemapBinary,\n    dice: d3Hierarchy.treemapDice,\n    slice: d3Hierarchy.treemapSlice,\n    slicedice: d3Hierarchy.treemapSliceDice,\n    squarify: d3Hierarchy.treemapSquarify,\n    resquarify: d3Hierarchy.treemapResquarify\n  };\n  const Output$3 = ['x0', 'y0', 'x1', 'y1', 'depth', 'children'];\n  /**\n   * Treemap layout.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to size nodes.\n   */\n\n  function Treemap(params) {\n    HierarchyLayout.call(this, params);\n  }\n  Treemap.Definition = {\n    'type': 'Treemap',\n    'metadata': {\n      'tree': true,\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field'\n    }, {\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'squarify',\n      'values': ['squarify', 'resquarify', 'binary', 'dice', 'slice', 'slicedice']\n    }, {\n      'name': 'padding',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingInner',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingOuter',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingTop',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingRight',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingBottom',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'paddingLeft',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'ratio',\n      'type': 'number',\n      'default': 1.618033988749895\n    }, {\n      'name': 'round',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'size',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': Output$3.length,\n      'default': Output$3\n    }]\n  };\n  vegaUtil.inherits(Treemap, HierarchyLayout, {\n    /**\n     * Treemap layout generator. Adds 'method' and 'ratio' parameters\n     * to configure the underlying tile method.\n     */\n    layout() {\n      const x = d3Hierarchy.treemap();\n\n      x.ratio = _ => {\n        const t = x.tile();\n        if (t.ratio) x.tile(t.ratio(_));\n      };\n\n      x.method = _ => {\n        if (vegaUtil.hasOwnProperty(Tiles, _)) x.tile(Tiles[_]);else vegaUtil.error('Unrecognized Treemap layout method: ' + _);\n      };\n\n      return x;\n    },\n\n    params: ['method', 'ratio', 'size', 'round', 'padding', 'paddingInner', 'paddingOuter', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],\n    fields: Output$3\n  });\n\n  exports.nest = Nest;\n  exports.pack = Pack;\n  exports.partition = Partition;\n  exports.stratify = Stratify;\n  exports.tree = Tree;\n  exports.treelinks = TreeLinks;\n  exports.treemap = Treemap;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","vegaDataflow","vegaUtil","d3Hierarchy","lookup","tree","key","filter","map","each","node","t","data","Nest","params","Transform","call","nest","apply","array","depth","keys","length","n","valuesByKey","result","i","keyValue","value","values","push","entries","d","HierarchyLayout","setParams","layout","_","p","Pack","Partition","Stratify","Tree","TreeLinks","Treemap","Definition","children","inherits","transform","pulse","source","error","gen","generate","mod","modified","out","clone","changed","isTuple","rem","hierarchy","reduce","k","ingest","add","tupleid","root","defaultSeparation","a","b","parent","constructor","name","method","fields","as","field","sum","count","sort","stableCompare","separation","one","err","reflow","modifies","Output","pack","Output$1","partition","fork","ALL","materialize","SOURCE","run","ADD_REM","parentKey","slice","stratify","id","parentId","truthy","Layouts","tidy","cluster","Output$2","m","hasOwnProperty","links","NO_SOURCE","lut","visit","target","MOD","forEach","link","Tiles","binary","treemapBinary","dice","treemapDice","treemapSlice","slicedice","treemapSliceDice","squarify","treemapSquarify","resquarify","treemapResquarify","Output$3","x","treemap","ratio","x.ratio","tile","x.method","treelinks","Object","defineProperty"]
}
