shadow$provide.module$node_modules$vega_loader$build$vega_loader_browser=function(global$jscomp$0,require,module,exports$jscomp$0){var Buffer=require("module$node_modules$buffer$index").Buffer;(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0,require("module$node_modules$vega_util$build$vega_util"),require("module$node_modules$d3_dsv$dist$d3_dsv"),require("module$node_modules$topojson_client$dist$topojson_client"),require("module$node_modules$vega_format$build$vega_format")):
"function"===typeof define&&define.amd?define(["exports","vega-util","d3-dsv","topojson-client","vega-format"],factory):(global="undefined"!==typeof globalThis?globalThis:global||self,factory(global.vega={},global.vega,global.d3,global.topojson,global.vega))})(this,function(exports,vegaUtil,d3Dsv,topojsonClient,vegaFormat){function load(uri,options){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){const opt=yield $jscomp$async$this.sanitize(uri,options),
url=opt.href;return opt.localFile?$jscomp$async$this.file(url):$jscomp$async$this.http(url,options)})}function sanitize(uri,options){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){options=vegaUtil.extend({},$jscomp$async$this.options,options);const fileAccess=$jscomp$async$this.fileAccess,result={href:null};var isFile;let loadFile;var isAllowed=allowed_re.test(uri.replace(whitespace_re,""));null!=uri&&"string"===typeof uri&&isAllowed||vegaUtil.error("Sanitize failure, invalid URI: "+
vegaUtil.stringValue(uri));isAllowed=protocol_re.test(uri);(isFile=options.baseURL)&&!isAllowed&&(uri.startsWith("/")||isFile.endsWith("/")||(uri="/"+uri),uri=isFile+uri);loadFile=(isFile=uri.startsWith("file://"))||"file"===options.mode||"http"!==options.mode&&!isAllowed&&fileAccess;isFile?uri=uri.slice(7):uri.startsWith("//")&&("file"===options.defaultProtocol?(uri=uri.slice(2),loadFile=!0):uri=(options.defaultProtocol||"http")+":"+uri);Object.defineProperty(result,"localFile",{value:!!loadFile});
result.href=uri;options.target&&(result.target=options.target+"");options.rel&&(result.rel=options.rel+"");"image"===options.context&&options.crossOrigin&&(result.crossOrigin=options.crossOrigin+"");return result})}function fileLoader(fs){return fs?filename=>new Promise((accept,reject)=>{fs.readFile(filename,(error,data)=>{error?reject(error):accept(data)})}):fileReject}function fileReject(){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){vegaUtil.error("No file system access.")})}
function httpLoader(fetch){return fetch?function(url,options){const $jscomp$async$this=this;return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){var opt=vegaUtil.extend({},$jscomp$async$this.options.http,options);const type=options&&options.response;opt=yield fetch(url,opt);return opt.ok?vegaUtil.isFunction(opt[type])?opt[type]():opt.text():vegaUtil.error(opt.status+""+opt.statusText)})}:httpReject}function httpReject(){return $jscomp.asyncExecutePromiseGeneratorFunction(function*(){vegaUtil.error("No HTTP fetch method available.")})}
function inferType(values,field){if(!values||!values.length)return"unknown";const n=values.length,m=typeTests.length,a=typeTests.map((_,i)=>i+1);for(let i=0,t=0,j,value;i<n;++i)for(value=field?values[i][field]:values[i],j=0;j<m;++j)if(a[j]&&null!=value&&value===value&&!typeTests[j](value)&&(a[j]=0,++t,t===typeTests.length))return"string";return typeList[a.reduce((u,v)=>0===u?v:u,0)-1]}function inferTypes(data,fields){return fields.reduce((types,field)=>{types[field]=inferType(data,field);return types},
{})}function delimitedFormat(delimiter){const parse=function(data,format){const delim={delimiter};return dsv(data,format?vegaUtil.extend(format,delim):delim)};parse.responseType="text";return parse}function dsv(data,format){format.header&&(data=format.header.map(vegaUtil.stringValue).join(format.delimiter)+"\n"+data);return d3Dsv.dsvFormat(format.delimiter).parse(data+"")}function json(data,format){const prop=format&&format.property?vegaUtil.field(format.property):vegaUtil.identity;var JSCompiler_temp;
if(JSCompiler_temp=vegaUtil.isObject(data))JSCompiler_temp=!("function"===typeof Buffer&&vegaUtil.isFunction(Buffer.isBuffer)&&Buffer.isBuffer(data));JSCompiler_temp?(data=prop(data),!vegaUtil.isArray(data)&&vegaUtil.isIterable(data)&&(data=[...data]),format=format&&format.copy?JSON.parse(JSON.stringify(data)):data):format=prop(JSON.parse(data));return format}function topojson(data,format){let method,object,property,filter;data=json(data,format);format&&format.feature?(method=topojsonClient.feature,
property=format.feature):format&&format.mesh?(method=topojsonClient.mesh,property=format.mesh,filter=filters[format.filter]):vegaUtil.error("Missing TopoJSON feature or mesh parameter.");return(object=(object=data.objects[property])?method(data,object,filter):vegaUtil.error("Invalid TopoJSON object: "+property))&&object.features||[object]}function formats(name,reader){return 1<arguments.length?(format$jscomp$0[name]=reader,this):vegaUtil.hasOwnProperty(format$jscomp$0,name)?format$jscomp$0[name]:
null}function parse$jscomp$0(data,types,timeParser,utcParser){if(data.length){var locale=vegaFormat.timeFormatDefaultLocale();timeParser=timeParser||locale.timeParse;utcParser=utcParser||locale.utcParse;locale=data.columns||Object.keys(data[0]);var j,m;"auto"===types&&(types=inferTypes(data,locale));locale=Object.keys(types);var parsers=locale.map(field=>{var type=types[field];if(type&&(type.startsWith("date:")||type.startsWith("utc:"))){field=type.split(/:(.+)?/,2);type=field[1];if("'"===type[0]&&
"'"===type[type.length-1]||'"'===type[0]&&'"'===type[type.length-1])type=type.slice(1,-1);return("utc"===field[0]?utcParser:timeParser)(type)}if(!typeParsers[type])throw Error("Illegal format pattern: "+field+":"+type);return typeParsers[type]});var i=0;var n=data.length;for(m=locale.length;i<n;++i){var datum=data[i];for(j=0;j<m;++j){var field$jscomp$0=locale[j];datum[field$jscomp$0]=parsers[j](datum[field$jscomp$0])}}}}const protocol_re=/^(data:|([A-Za-z]+:)?\/\/)/,allowed_re=/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp|file|data):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i,
whitespace_re=/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g,isNumber=_=>!Number.isNaN(+_)&&!(_ instanceof Date),typeParsers={boolean:vegaUtil.toBoolean,integer:vegaUtil.toNumber,number:vegaUtil.toNumber,date:vegaUtil.toDate,string:vegaUtil.toString,unknown:vegaUtil.identity},typeTests=[_=>"true"===_||"false"===_||!0===_||!1===_,_=>isNumber(_)&&Number.isInteger(+_),isNumber,_=>!Number.isNaN(Date.parse(_))],typeList=["boolean","integer","number","date"];dsv.responseType="text";json.responseType=
"json";const filters={interior:(a,b)=>a!==b,exterior:(a,b)=>a===b};topojson.responseType="json";const format$jscomp$0={dsv,csv:delimitedFormat(","),tsv:delimitedFormat("\t"),json,topojson},loader=function(fetch,fs){return options=>({options:options||{},sanitize,load,fileAccess:!!fs,file:fileLoader(fs),http:httpLoader(fetch)})}("undefined"!==typeof fetch&&fetch,null);exports.format=format$jscomp$0;exports.formats=formats;exports.inferType=inferType;exports.inferTypes=inferTypes;exports.loader=loader;
exports.read=function(data,schema,timeParser,utcParser){schema=schema||{};const reader=formats(schema.type||"json");reader||vegaUtil.error("Unknown data format type: "+schema.type);data=reader(data,schema);schema.parse&&parse$jscomp$0(data,schema.parse,timeParser,utcParser);vegaUtil.hasOwnProperty(data,"columns")&&delete data.columns;return data};exports.responseType=function(type){return(type=formats(type))&&type.responseType||"text"};exports.typeParsers=typeParsers;Object.defineProperty(exports,
"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$vega_loader$build$vega_loader_browser.js.map
