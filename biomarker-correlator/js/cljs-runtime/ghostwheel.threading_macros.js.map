{"version":3,"sources":["ghostwheel/threading_macros.cljc"],"mappings":"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","names":["var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ghostwheel.threading-macros/log-threading-header","p__52732","vec__52733","cljs.core.nth","seq52726","G__52727","cljs.core/first","cljs.core/next","G__52728","self__4851__auto__","threading-type","expr","name","ghostwheel.logging.group","ghostwheel.logging/ghostwheel-colors","ghostwheel.threading-macros/log-cond-step","p__52747","vec__52748","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","seq52739","G__52740","G__52741","G__52742","test","step","data","style","ghostwheel.threading-macros/log-some-step","some-step","cljs.core.filter","cljs.core/seq?","cljs.core/last"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ghostwheel.threading-macros\n  #?(:cljs (:require-macros ghostwheel.threading-macros))\n  (:require [ghostwheel.logging :as l :refer [ghostwheel-colors pr-clog]]\n            [ghostwheel.utils :as u :refer [cljs-env? clj->cljs]]))\n\n\n;;;; Traced threading macros\n\n\n;; REVIEW: Consider doing this at compile time and passing the &env to differentiate\n;; between Clojure and -Script\n(defn log-threading-header\n  [threading-type expr & [name]]\n  (l/group (str threading-type \" \" expr (when name \" \") name)\n           {::l/background (:black ghostwheel-colors)}))\n\n(defmacro *->\n  \"Traced version of ->\"\n  [orig-x & orig-forms]\n  (let [untraced `(~'-> ~orig-x ~@orig-forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(loop [x orig-x, forms orig-forms]\n             (if forms\n               (let [form     (first forms)\n                     threaded (if (seq? form)\n                                (with-meta `(pr-clog ~(str form)\n                                                     (~(first form) ~x ~@(next form)))\n                                           (meta form))\n                                `(pr-clog ~(str form)\n                                          ~(list form x)))]\n                 (recur threaded (next forms)))\n               `(do\n                  (log-threading-header \"->\" ~(str orig-x))\n                  (pr-clog ~(str orig-x) ~orig-x)\n                  (let [x# ~x]\n                    ~(when (cljs-env? &env)\n                       `(l/group-end))\n                    x#))))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *->>\n  \"Traced version of ->>\"\n  [orig-x & orig-forms]\n  (let [untraced `(~'->> ~orig-x ~@orig-forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          (do\n            ~(loop [x orig-x, forms orig-forms]\n               (if forms\n                 (let [form     (first forms)\n                       threaded (if (seq? form)\n                                  (with-meta `(pr-clog ~(str form)\n                                                       (~(first form) ~@(next form) ~x))\n                                             (meta form))\n                                  `(pr-clog ~(str form)\n                                            ~(list form x)))]\n                   (recur threaded (next forms)))\n                 `(do\n                    (log-threading-header \"->>\" ~(str orig-x))\n                    (pr-clog ~(str orig-x) ~orig-x)\n                    (let [x# ~x]\n                      ~(when (cljs-env? &env)\n                         `(l/group-end))\n                      x#)))))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *as->\n  \"Traced version of as->\"\n  [expr name & forms]\n  (let [untraced `(~'as-> ~expr ~name ~@forms)\n        log-step (fn [form] `(pr-clog ~(str form) ~form))]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          (do\n            (log-threading-header \"as->\" ~(str expr) ~(str name))\n            (pr-clog ~(str name) ~expr)\n            (let [~name ~expr\n                  ~@(interleave (repeat name) (map log-step forms))]\n              ~(when (cljs-env? &env)\n                 `(l/group-end))\n              ~name))))\n     (cljs-env? &env) clj->cljs)))\n\n(defn- log-cond-step\n  [test step data & [style]]\n  `(pr-clog\n    ~(str test\n          \" \"\n          step)\n    ~data\n    ~style))\n\n(defmacro *cond->\n  \"Traced version of cond->\"\n  [expr & clauses]\n  (assert (even? (count clauses)))\n  (let [untraced `(~'cond-> ~expr ~@clauses)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [[test step]]\n                         `(if ~test\n                            ~(log-cond-step test step `(-> ~g ~step) {::l/weight :bold})\n                            ~(log-cond-step test step g {::l/foreground (:base0 ghostwheel-colors)})))]\n             `(do\n                (log-threading-header \"cond->\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map pstep (partition 2 clauses)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *cond->>\n  \"Traced version of cond->>\"\n  [expr & clauses]\n  (assert (even? (count clauses)))\n  (let [untraced `(~'cond->> ~expr ~@clauses)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [[test step]]\n                         `(if ~test\n                            ~(log-cond-step test step `(->> ~g ~step) {::l/weight :bold})\n                            ~(log-cond-step test step g {::l/foreground (:base0 ghostwheel-colors)})))]\n             `(do\n                (log-threading-header \"cond->>\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map pstep (partition 2 clauses)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defn- log-some-step\n  [some-step]\n  `(pr-clog\n    ~(str #_(second some-step)\n      #_\" \"\n      (->> some-step (filter seq?) last last))\n    ~some-step))\n\n(defmacro *some->\n  \"Traced version of some->\"\n  [expr & forms]\n  (let [untraced `(~'some-> ~expr ~@forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [step] `(if (nil? ~g) nil (-> ~g ~step)))]\n             `(do\n                (log-threading-header \"some->\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map log-some-step (map pstep forms)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n(defmacro *some->>\n  \"Traced version of some->>\"\n  [expr & forms]\n  (let [untraced `(~'some->> ~expr ~@forms)]\n    (cond->\n     (if-not (u/get-env-config)\n       untraced\n       `(if-not ghostwheel.core/*global-trace-allowed?*\n          ~untraced\n          ~(let [g     (gensym)\n                 pstep (fn [step] `(if (nil? ~g) nil (->> ~g ~step)))]\n             `(do\n                (log-threading-header \"some->>\" ~(str expr))\n                (pr-clog ~(str expr) ~expr)\n                (let [~g ~expr\n                      ~@(interleave (repeat g) (map log-some-step (map pstep forms)))]\n                  ~(when (cljs-env? &env)\n                     `(l/group-end))\n                  ~g)))))\n     (cljs-env? &env) clj->cljs)))\n\n\n"]}