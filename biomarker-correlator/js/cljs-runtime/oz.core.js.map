{"version":3,"sources":["oz/core.cljs"],"mappings":"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","names":["oz.core/vegaEmbed*","cljs.core/fn?","js/shadow.js.shim.module$vega_embed","js/shadow.js.shim.module$vega_embed.default","cljs.core/enable-console-print!","p__81258","map__81261","cljs.core/--destructure-map","cljs.core.get","oz.core/apply-log-level","opts","log-level","cljs.core/Keyword","cljs.core.dissoc","cljs.core.assoc","G__81264","js/Error","cljs.core.keyword","js/shadow.js.shim.module$vega.Debug","js/shadow.js.shim.module$vega.Info","js/shadow.js.shim.module$vega.Warn","var_args","G__81267","oz.core/embed-vega","p__81268","map__81269","elem","doc","oz.core.embed_vega","view-callback","cljs.core/clj->js","cljs.core.merge","G__81270","G__81271","G__81272","res","G__81273","err","js/console.log","oz.core/update-vega","old-doc","new-doc","old-opts","new-opts","G__81274","cljs.core._EQ_","or__4253__auto__","cljs.core.not_EQ_","G__81277","oz.core/vega","oz.core.vega","reagent.core.create_class","this","reagent.dom/dom-node","p__81280","vec__81281","cljs.core.nth","_","G__81287","oz.core/vega-lite","oz.core.vega_lite","oz.core/live-viewers-state","reagent.core.atom","oz.core/register-live-view","key","component","cljs.core.swap_BANG_","cljs.core/assoc","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","oz.core/register-live-views","p__81291","map__81292","seq81290","self__4852__auto__","cljs.core/seq","live-views","cljs.core/merge","oz.core/default-data-table-opts","G__81297","oz.core/data-table","p__81298","map__81299","data","oz.core.data_table","page","sort-key","sort-order","state","header","cljs.core.take","cljs.core.map","cljs.core.comp","cljs.core/set","cljs.core/keys","cljs.core.reduce","clojure.set/union","map__81302","cljs.core/deref","map__81303","per-page","tr-style","td-style","th-style","cljs.core.merge_with","opt1","opt2","cljs.core/map?","scoped-data","G__81305","cljs.core.sort_by","cljs.core/reverse","cljs.core.drop","last-page","cljs.core/quot","cljs.core/count","cljs.core/update","cljs.core/dec","cljs.core/inc","iter__4652__auto__","s__81309","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__81311","cljs.core/chunk-buffer","i__81310","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__81308","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/name","G__81312","G__81313","s__81316","b__81318","i__81317","iter__81315","row","cljs.core/hash","s__81321","b__81323","i__81322","iter__81320","s__81329","b__81331","i__81330","iter__81328","oz.core.register_live_views","oz.core/live-view","live-viewers","live-viewer-keys","clojure.walk/prewalk","x","and__4251__auto__","cljs.core/coll?","G__81346","cljs.core.into","oz.core/view-spec","cljs.core/chunk-first"],"sourcesContent":["(ns oz.core\n  (:require [\"vega-embed\" :as vegaEmbed]\n            [\"vega\" :as vega]\n            ;[\"leaflet-vega\" :as leafletVega]\n            ;[\"leaflet\" :as leaflet]\n            [clojure.string :as str]\n            [clojure.spec.alpha :as s]\n            [reagent.core :as r]\n            [reagent.dom :as rd]))\n\n; See https://github.com/thheller/shadow-cljs/issues/988#issuecomment-1046175204\n(def vegaEmbed* (if (fn? vegaEmbed) vegaEmbed vegaEmbed/default))\n\n\n(enable-console-print!)\n\n\n(defn- apply-log-level\n  [{:as opts :keys [log-level]}]\n  (if (or (keyword? log-level) (string? log-level))\n    (-> opts\n        (dissoc :log-level)\n        (assoc :logLevel\n               (case (keyword log-level)\n                 :debug vega/Debug\n                 :info vega/Info\n                 :warn vega/Warn)))\n    opts))\n\n(defn ^:no-doc embed-vega\n  ([elem doc] (embed-vega elem doc {}))\n  ([elem doc {:as opts :keys [view-callback]}]\n   (when doc\n     (let [doc (clj->js doc)\n           opts (-> opts\n                    (dissoc :view-callback)\n                    (->> (merge {:renderer :canvas\n                                 :mode \"vega-lite\"}))\n                    (apply-log-level))\n           opts (merge {:renderer :canvas}\n                        ;; Have to think about how we want the defaults here to behave\n                       opts)]\n       (-> (vegaEmbed* elem doc (clj->js opts))\n           (.then (fn [res]\n                    (when view-callback\n                      (view-callback (.-view res)))))\n           (.catch (fn [err]\n                     (js/console.log err))))))))\n\n;; WIP; TODO Finish figuring this out; A little thornier than I thought, because data can come in so many\n;; different shapes; Should clojure.spec this out:\n;; * url\n;; * named data\n;; * vega vs lite\n;; * data nested in layers\n;; * other?\n(defn ^:no-doc update-vega\n  ([elem old-doc new-doc old-opts new-opts]\n   (case\n     ;; Only rerender from scratch if the viz specification has actually changed, or if always rerender is\n     ;; specified\n     (or (:always-rerender new-opts)\n         (not= (dissoc old-doc :data) (dissoc new-doc :data))\n         (not= old-opts new-opts))\n     (embed-vega elem new-doc new-opts)\n     ;; Otherwise, just update the data component\n     ;; TODO This is the hard part to figure out\n     ;(= ())\n     ;()\n     ;; Otherwise, do nothing\n     :else\n     nil)))\n\n(defn vega\n  \"Reagent component that renders vega\"\n  ([doc] (vega doc {}))\n  ([doc opts]\n   ;; Is this the right way to do this? So vega component behaves abstractly like a vega-lite potentially?\n   (let [opts (merge {:mode \"vega\"} opts)]\n     (r/create-class\n      {:display-name \"vega\"\n       :component-did-mount (fn [this]\n                              (embed-vega (rd/dom-node this) doc opts))\n       ;; Need to look into this further to see how these args even work; may not be doing new-opts right here?\n       ;; (http://reagent-project.github.io/docs/master/reagent.core.html)\n       ;; (https://reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\n       :component-will-update (fn [this [_ new-doc new-opts]]\n                                ;(update-vega (rd/dom-node this) doc new-doc opts new-opts)\n                                (embed-vega (rd/dom-node this) new-doc new-opts))\n       :reagent-render (fn [doc]\n                         [:div.viz])}))))\n\n(defn vega-lite\n  \"Reagent component that renders vega-lite.\"\n  ([doc] (vega-lite doc {}))\n  ([doc opts]\n   ;; Which way should the merge go?\n   (vega doc (merge opts {:mode \"vega-lite\"}))))\n\n\n(def ^:private live-viewers-state\n  (r/atom {:vega vega\n           :vega-lite vega-lite}))\n\n(defn register-live-view\n  [key component]\n  (swap! live-viewers-state assoc key component))\n\n(defn register-live-views\n  [& {:as live-views}]\n  (swap! live-viewers-state merge live-views))\n\n\n(def ^:no-doc default-data-table-opts\n  {:per-page 50\n   :tr-style {}\n   :td-style {:padding-right 10}\n   :th-style {:padding-right 10\n              :cursor :pointer}})\n\n(defn data-table\n  ([data] (data-table data {}))\n  ([data {:keys [page sort-key sort-order]}]\n   (let [state (r/atom {:page (or page 0) :sort-key sort-key :sort-order (or sort-order :ascending)})\n         header (->> data (take 10) (map (comp set keys)) (reduce clojure.set/union))]\n     (fn [data opts]\n       (let [{:keys [page sort-key sort-order]} @state\n             {:keys [per-page tr-style td-style th-style]}\n             (merge-with (fn [opt1 opt2]\n                           (if (and (map? opt1) (map? opt2))\n                             (merge opt1 opt2)\n                             opt2))\n               default-data-table-opts\n               opts)\n             scoped-data (cond->> data\n                           sort-key (sort-by sort-key)\n                           (= :descending sort-order) (reverse)\n                           per-page (drop (* per-page page))\n                           per-page (take per-page))\n             last-page (quot (count data) per-page)]\n         [:div\n          (when (> (count data) per-page)\n            [:p\n             {:style {:margin-bottom 10}}\n             [:span\n              {:style {:padding-right 20}}\n              \"Current page: \" (inc page)]\n             (when (> page 0)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page dec))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"prev\"])\n             (when (< page last-page)\n               [:a\n                {:on-click (fn [& _] (swap! state update :page inc))\n                 :style {:padding-right 10\n                         :cursor :pointer}}\n                \"next\"])])\n          [:table\n           ;; header row\n           [:tr\n            {:style tr-style}\n            (for [key header]\n              ^{:key key}\n              [:th {:style th-style\n                    :on-click (fn [& _]\n                                (swap! state merge {:sort-key key\n                                                    :sort-order (if (and (= key sort-key) (= sort-order :ascending))\n                                                                  :descending\n                                                                  :ascending)}))}\n                (name key)\n                (when (= sort-key key)\n                  (case sort-order\n                    :ascending \"\u2303\"\n                    :descending \"\u2304\"))])]\n           (for [row scoped-data]\n             ^{:key (hash row)}\n             [:tr\n              {:style tr-style}\n              (for [key header]\n                ^{:key key}\n                [:td {:style td-style} (get row key)])])]])))))\n\n\n(register-live-views\n  :vega vega\n  :vega-lite vega-lite\n  :data-table data-table)\n\n(defn ^:no-doc live-view\n  ;; should handle sharing data with nodes that need it?\n  [doc]\n  ;; prewalk spec, rendering special hiccup tags like :vega and :vega-lite, and potentially other composites,\n  ;; rendering using the components above. Leave regular hiccup unchanged).\n  ;; TODO finish writing; already hooked in below so will break now\n  (let [live-viewers @live-viewers-state\n        live-viewer-keys (set (keys live-viewers))]\n    (clojure.walk/prewalk\n      (fn [x] (if (and (coll? x) (live-viewer-keys (first x)))\n                (into\n                  [(get live-viewers (first x))]\n                  (rest x))\n                x))\n      doc)))\n\n\n;; TODO Rename this to live-view; But need to make sure to edit in the repl tooling application code as well,\n;; since that's what actually uses this\n(def ^:no-doc view-spec live-view)\n  ;; should handle sharing data with nodes that need it?\n\n\n\n;(comment)\n  ;; This is still a work in progress\n  ;(defn ^:private render-leaflet-vega [dom-node]\n    ;;(.map leaflet dom-node)\n    ;(let [m (.map leaflet \"map\")\n          ;_ (.setView m (clj->js [51.505 -0.09]) 4)\n          ;tile (.tileLayer leaflet\n                           ;\"https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png\"\n                           ;(clj->js {:attribution \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"}))\n\n          ;_ (.addTo tile m)\n          ;marker (.marker leaflet (clj->js [40.7128 -74.0059]))]\n      ;;(js/console.log (clj->js [40.7128 -74.0059]))\n      ;(.addTo marker m)))\n      ;;(.bindPopup marker \"a red-headed rhino\")))\n\n  ;;; This is still a work in progress\n  ;(defn ^:private leaflet-vega\n    ;\"WIP/Alpha wrapper around leaflet-vega\"\n    ;[]\n    ;(r/create-class\n      ;{:display-name \"leaflet-vega\"\n       ;:component-did-mount (fn [this]\n                              ;(render-leaflet-vega (rd/dom-node this)))\n       ;:component-did-update (fn [this [_]]\n                               ;(render-leaflet-vega (rd/dom-node this)))\n       ;:reagent-render (fn []\n                         ;[:div#map])})))\n\n\n"]}