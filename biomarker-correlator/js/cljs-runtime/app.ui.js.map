{"version":3,"sources":["app/ui.cljs"],"mappings":"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","names":["app.ui/px-per-character","app.ui/get-rough-px-width","string","cljs.core/count","app.ui/make-datagrid-column","k","lines","clojure.string.split","cljs.core/name","reagent.core.as_element","cljs.core.into","cljs.core.concat","cljs.core.interleave","cljs.core.repeat","cljs.core.apply","cljs.core/max","cljs.core.map","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.ui/maps-to-datagrid","p__49171","map__49174","cljs.core/--destructure-map","cljs.core.get","seq49159","G__49160","cljs.core/first","cljs.core/next","self__4851__auto__","maps","custom-make-datagrid-column","_","sorted-rows","reagent.core.atom","sort-columns","js/shadow.js.shim.module$react_data_grid.default","cljs.core/clj->js","p1__49152#","cljs.core.merge","cljs.core/keys","cljs.core/deref","newSortColumns","map__49185","columnKey","direction","cljs.core.js__GT_clj","p1__49156#","cljs.core.swap_BANG_","cljs.core.sort","m1","m2","v1","v2","cljs.core._EQ_","app.csv/download-as-csv","app.ui/value-to-str","value","cljs.core/map?","app.ui/map-to-sorted-pairs","m","cljs.core.sort_by","pair","cljs.core/seq","app.ui/maps-to-html","sorted-pairs","iter__4652__auto__","s__49201","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__49203","cljs.core/chunk-buffer","i__49202","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49200","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","s__49209","b__49211","i__49210","iter__49208","pairs","s__49215","b__49217","i__49216","iter__49214","s__49247","b__49249","i__49248","iter__49246","r","cljs.core/peek","app.ui/hideable","hidden","component","cljs.core/reset!","cljs.core/not","app.ui/hover-to-render","hoverable","hidable","cljs.core/chunk-first"],"sourcesContent":["(ns app.ui\n  (:require\n    [app.specs :as specs]\n    [reagent.core :as r]\n    [\"react-data-grid\" :default DataGrid]\n    [app.csv :as csv]\n    [clojure.string :as st]))\n\n\n(def px-per-character 13)\n(defn get-rough-px-width\n  \"Gives a rough estimate for the pixel width of a string.\"\n  [string]\n  (* px-per-character (count string)))\n\n(defn make-datagrid-column\n  \"Generates a react-data-grid column \n  https://github.com/adazzle/react-data-grid/blob/929911c506919e96bd12e48ea5de68ec9511ca10/src/types.ts#L7\n  \n  '--' substrings in the input key are converted to newlines.\"\n  [k]\n  (let [lines (st/split (name k) #\"\\-\\-\")]\n    {:key k\n     :name (r/as-element\n             (into [] (concat\n                        [:div {:style {:line-height \"20px\"}}]\n                        (interleave lines (repeat [:br])))))\n     :sortable true\n     :width (apply max (map get-rough-px-width lines))})) \n\n(defn maps-to-datagrid\n  [maps & {:keys [custom-make-datagrid-column]\n           :or {custom-make-datagrid-column (fn [_] {})}}]\n  (let [sorted-rows (r/atom maps)\n        sort-columns (r/atom [{:columnKey \"input\" :direction \"ASC\"}])]\n    [:div\n      [:> DataGrid\n       {:columns (clj->js (map #(merge (make-datagrid-column %)\n                                       (custom-make-datagrid-column %))\n                               (keys (first maps))))\n        ; This in combination with [role=columndheader] in public/css/site.css\n        ; allows for multiline column headers.\n        :headerRowHeight 60\n        :defaultColumnOptions #js {:sortable true\n                                   :resizable true}\n        ; See\n        ; https://github.com/adazzle/react-data-grid/blob/b7ad586498ab8a6ed3235ccfd93d3d490b24f4cc/website/demos/CommonFeatures.tsx#L330\n        ; for how to make column sorting work. See also\n        ; https://github.com/reagent-project/reagent/issues/545\n        :sortColumns (clj->js @sort-columns)\n        :onSortColumnsChange\n        (fn [newSortColumns]\n          (let [{columnKey :columnKey\n                 direction :direction} (first (js->clj newSortColumns\n                                                       :keywordize-keys true))]\n            (swap! sorted-rows\n                   #(sort (fn [m1 m2]\n                            (let [v1 (get columnKey m1)\n                                  v2 (get columnKey m2)]\n                              (if (= direction \"ASC\")\n                                (< v1 v2)\n                                (> v1 v2))))\n                          %))))\n        :rows (clj->js @sorted-rows)}]\n      [:button {:on-click #(csv/download-as-csv maps \"data.csv\")}\n       \"Download as CSV\"]]))\n\n(maps-to-datagrid [{:test \"v1\" :test2 \"v2\"}])\n\n\n(defn value-to-str\n  \"Converts a given value into something displayable by an html tabl.\"\n  [value]\n  (cond\n    (map? value) \"{...}\"\n    :else value))\n\n; (value-to-str {:test \"map\"})\n\n; Beware sorting maps directly - it's been unreliable.  It's better to convert\n; to lists of 2-vectors and sort those.\n(defn map-to-sorted-pairs [m]\n  (sort-by (fn [pair]\n             (let [k (first pair)]\n               ; Capital letters get sorted before lowercase!\n               (if (= k :input) \"AAAAA\" (name k))))\n           (seq m)))\n\n(defn maps-to-html\n  \"Converts collection of maps like\n  [{:col1 val1 :col2 val2} {:col1 val3 :col2 val4}]\n  to an HTML table.\n  \n  See https://stackoverflow.com/a/33458370 for ^{:key} map explanation.\n  \"\n  {:malli/schema [:=> [:cat [:sequential :map]]\n                  specs/Hiccup]}\n  [maps]\n  (let [sorted-pairs (map map-to-sorted-pairs maps)]\n    [:table\n     (into [:tbody\n            (into [:tr] (for [k (map first (first sorted-pairs))]\n                          [:th k]))]\n           (for [pairs sorted-pairs]\n             (into [:tr] (for [r (map peek pairs)]\n                           [:td (value-to-str r)]))))]))\n\n(defn hideable\n  \"Adds a clickable hide button to the component.\n\n  I would use a details/summary html element, but they don't seem to play\n  nicely with react/reagent :(.\n  \n  Can be used like this:\n  [hidable component-to-hide]\"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [component]\n      [:div\n        [:button {:on-click #(reset! hidden (not @hidden))}\n         \"Click to hide/show\"]\n        [:div {:style {:display (if @hidden \"none\" \"block\")}}\n         component]])))\n\n\n(defn hover-to-render\n  \"Wraps a component in a function that only shows and renders it when an\n  element is hovered.\n\n  Original inspiration:\n  https://www.reddit.com/r/Clojure/comments/sihk4b/comment/hv8xrh6/\n  \"\n  [_]\n  (let [hidden (r/atom true)]\n    (fn [hoverable hidable]\n      [:div\n        [:div {:on-mouse-over #(reset! hidden false)\n               :on-mouse-out #(reset! hidden true)}\n         hoverable]\n        (if @hidden\n          nil\n          [:div {:style {:position \"absolute\" :z-index 100}}\n           hidable])])))\n"]}