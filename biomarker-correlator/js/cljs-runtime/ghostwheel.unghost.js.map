{"version":3,"sources":["ghostwheel/unghost.cljc"],"mappings":";AAEA;;;;gCAAA,hCAAMA,wEAGHC,GAAGC;AAHN,AAIE,IAAMC,sBAAc,WAAKC;AAAL,AAAe,OAACC,mBAAQ,AAACC,eAAKC,wBAAQH;;IACpDI,cAAc,WAAKC;AAAL,AAAW,IAAAC,aAA2BD;IAA3BE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;WAAAE,PAAOG;IAAPH,mBAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;aAAAE,TAAYI;WAAZN,PAAqBO;AAArB,AACE,OAACC,eAAKH,KAAKE;;AAF5C,2EAGO,EAAI,AAACf,oBAAcD,QACjB,iBAAAkB,aAA8B,AAACO,qBAAW,AAACC,qBAAWrB,yBAASL,1MAIjE,OAACgC,+CAAOC;iBAJN,AAAAd,4CAAAD,WAAA,IAAA,xEAAOK;iBAAP,AAAAJ,4CAAAD,WAAA,IAAA,xEAAkBM;AAAlB,AAAA,OAAAJ,iDAAA,AAAAV,cAAA,AAAAW,sDAAA,KAAAC,eAAA,QAAA,KAAA,IAAA,ZACKvB,mBAAKwB,6DAAa,AAACjB,YAAYkB;KACpC,iBAAAG,aAA4C,AAACE,qDAAa,AAACH,qBAAWI,sBAAM9B;iBAA5E,AAAAmB,4CAAAQ,WAAA,IAAA,xEAAOJ;iBAAP,AAAAJ,4CAAAQ,WAAA,IAAA,xEAAkBH;oBAAlB,AAAAL,4CAAAQ,WAAA,IAAA,3EAA6BC;AAA7B,AAAA,OAAAR,iDAAA,AAAAV,cAAA,AAAAW,sDAAA,KAAAC,eAAA,QAAA,KAAA,IAAA,ZACKvB,mBAAKwB,6DAAa,AAACQ,4CAAIzB,YAAYkB,YAAcI","names":["ghostwheel.unghost/clean-defn","op","forms","single-arity?","fn-forms","cljs.core/boolean","cljs.core/some","cljs.core/vector?","strip-gspec","body","vec__51831","seq__51832","cljs.core/seq","first__51833","cljs.core/first","cljs.core/next","args","_gspec","more","cljs.core/cons","vec__51839","cljs.core.nth","cljs.core.sequence","cljs.core.concat","cljs.core/List","head-forms","body-forms","cljs.core/split-with","cljs.core/complement","vec__51842","tail-attr-map","cljs.core.partition_by","cljs.core/seq?","cljs.core.map","cljs.core.remove","cljs.core/nil?"],"sourcesContent":["(ns ghostwheel.unghost)\n\n(defn clean-defn\n  \"This removes the gspec and returns a\n  clean defn for use in production builds.\"\n  [op forms]\n  (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n        strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                   (cons args more)))]\n    (->> (if (single-arity? forms)\n           (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n             `(~op ~@head-forms ~@(strip-gspec body-forms)))\n           (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n             `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?))))\n"]}