{"version":3,"sources":["clojure/test/check.cljc"],"mappings":"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","names":["clojure.test.check/make-rng","seed","clojure.test.check.random.make_random","non-nil-seed","clojure.test.check.impl/get-current-time-millis","clojure.test.check/complete","property","num-trials","start-time","reporter-fn","time-elapsed-ms","G__38580","clojure.test.check/legacy-result","result","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","clojure.test.check.results/Result","d","clojure.test.check.results/result-data","temp__5751__auto__","vec__38609","cljs.core.nth","_","e","cljs.core/find","js/Error","cljs.core.ex_info","clojure.test.check.results/pass?","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","clojure.test.check/quick-check","p__38634","map__38635","cljs.core/--destructure-map","cljs.core.get","seq38627","G__38628","cljs.core/first","cljs.core/next","G__38629","self__4851__auto__","num-tests","max-size","cljs.core/constantly","vec__38636","created-seed","rng","size-seq","clojure.test.check.generators/make-size-range-seq","so-far","rstate","vec__38650","seq__38651","cljs.core/seq","first__38652","vec__38653","size","rest-size-seq","r1","r2","clojure.test.check.random/split","result-map-rose","clojure.test.check.generators/call-gen","result-map","clojure.test.check.rose-tree/root","args","G__38657","clojure.test.check/failure","clojure.test.check/smallest-shrink","total-nodes-visited","depth","smallest","map__38661","clojure.test.check/shrink-loop","rose-tree","shrinks-this-depth","clojure.test.check.rose-tree/children","nodes","current-smallest","cljs.core/empty?","head","tail","cljs.core/rest","pass?","reporter-fn-arg","cljs.core/boolean","new-smallest","G__38691","cljs.core/assoc-in","children","failing-rose-tree","trial-number","failed-after-ms","root","failure-data","G__38697","cljs.core.assoc","shrunk","p1__38695#","G__38702","cljs.core.merge","G__38706","cljs.core.dissoc"],"sourcesContent":[";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.test.check\n  (:require [clojure.test.check.generators :as gen]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.results :as results]\n            [clojure.test.check.rose-tree :as rose]\n            [clojure.test.check.impl :refer [get-current-time-millis]]))\n\n(declare shrink-loop failure)\n\n(defn- make-rng\n  [seed]\n  (if seed\n    [seed (random/make-random seed)]\n    (let [non-nil-seed (get-current-time-millis)]\n      [non-nil-seed (random/make-random non-nil-seed)])))\n\n(defn- complete\n  [property num-trials seed start-time reporter-fn]\n  (let [time-elapsed-ms (- (get-current-time-millis) start-time)]\n    (reporter-fn {:type :complete\n                  :property property\n                  :result true\n                  :pass? true\n                  :num-tests num-trials\n                  :time-elapsed-ms time-elapsed-ms\n                  :seed seed})\n    {:result true\n     :pass? true\n     :num-tests num-trials\n     :time-elapsed-ms time-elapsed-ms\n     :seed seed}))\n\n\n(defn ^:private legacy-result\n  \"Returns a value for the legacy :result key, which has the peculiar\n  property of conflating returned exceptions with thrown exceptions.\"\n  [result]\n  (if (satisfies? results/Result result)\n    (let [d (results/result-data result)]\n      (if-let [[_ e] (find d :clojure.test.check.properties/error)]\n        #?(:clj e\n           :cljs (if (instance? js/Error e)\n                   e\n                   (ex-info \"Non-Error object thrown in test\"\n                            {}\n                            e)))\n        (results/pass? result)))\n    result))\n\n(defn quick-check\n  \"Tests `property` `num-tests` times.\n\n  Takes several optional keys:\n\n  `:seed`\n    Can be used to re-run previous tests, as the seed used is returned\n    after a test is run.\n\n  `:max-size`.\n    can be used to control the 'size' of generated values. The size will\n    start at 0, and grow up to max-size, as the number of tests increases.\n    Generators will use the size parameter to bound their growth. This\n    prevents, for example, generating a five-thousand element vector on\n    the very first test.\n\n  `:reporter-fn`\n    A callback function that will be called at various points in the test\n    run, with a map like:\n\n      ;; called after a passing trial\n      {:type            :trial\n       :args            [...]\n       :num-tests       <number of tests run so far>\n       :num-tests-total <total number of tests to be run>\n       :seed            42\n       :pass?           true\n       :property        #<...>\n       :result          true\n       :result-data     {...}}\n\n      ;; called after the first failing trial\n      {:type         :failure\n       :fail         [...failing args...]\n       :failing-size 13\n       :num-tests    <tests ran before failure found>\n       :pass?        false\n       :property     #<...>\n       :result       false/exception\n       :result-data  {...}\n       :seed         42}\n\n    It will also be called on :complete, :shrink-step and :shrunk. Many\n    of the keys also appear in the quick-check return value, and are\n    documented below.\n\n  If the test passes, the return value will be something like:\n\n      {:num-tests       100,\n       :pass?           true,\n       :result          true,\n       :seed            1561826505982,\n       :time-elapsed-ms 24}\n\n  If the test fails, the return value will be something like:\n\n      {:fail            [0],\n       :failed-after-ms 0,\n       :failing-size    0,\n       :num-tests       1,\n       :pass?           false,\n       :result          false,\n       :result-data     nil,\n       :seed            1561826506080,\n       :shrunk\n       {:depth               0,\n        :pass?               false,\n        :result              false,\n        :result-data         nil,\n        :smallest            [0],\n        :time-shrinking-ms   0,\n        :total-nodes-visited 0}}\n\n  The meaning of the individual entries is:\n\n      :num-tests\n      The total number of trials that was were run, not including\n      shrinking (if applicable)\n\n      :pass?\n      A boolean indicating whether the test passed or failed\n\n      :result\n      A legacy entry that is similar to :pass?\n\n      :seed\n      The seed used for the entire test run; can be used to reproduce\n      a test run by passing it as the :seed option to quick-check\n\n      :time-elapsed-ms\n      The total time, in milliseconds, of a successful test run\n\n      :fail\n      The generated values for the first failure; note that this is\n      always a vector, since prop/for-all can have multiple clauses\n\n      :failed-after-ms\n      The total time, in milliseconds, spent finding the first failing\n      trial\n\n      :failing-size\n      The value of the size parameter used to generate the first\n      failure\n\n      :result-data\n      The result data, if any, of the first failing trial (to take\n      advantage of this a property must return an object satisfying\n      the clojure.test.check.results/Result protocol)\n\n      :shrunk\n      A map of data about the shrinking process; nested keys that\n      appear at the top level have the same meaning; other keys are\n      documented next\n\n      :shrunk / :depth\n      The depth in the shrink tree that the smallest failing instance\n      was found; this is essentially the idea of how many times the\n      original failure was successfully shrunk\n\n      :smallest\n      The smallest values found in the shrinking process that still\n      fail the test; this is a vector of the same type as :fail\n\n      :time-shrinking-ms\n      The total time, in milliseconds, spent shrinking\n\n      :total-nodes-visited\n      The total number of steps in the shrinking process\n\n  Examples:\n\n      (def p (for-all [a gen/nat] (> (* a a) a)))\n\n      (quick-check 100 p)\n      (quick-check 200 p\n                   :seed 42\n                   :max-size 50\n                   :reporter-fn (fn [m]\n                                  (when (= :failure (:type m))\n                                    (println \\\"Uh oh...\\\"))))\"\n  [num-tests property & {:keys [seed max-size reporter-fn]\n                         :or {max-size 200, reporter-fn (constantly nil)}}]\n  (let [[created-seed rng] (make-rng seed)\n        size-seq (gen/make-size-range-seq max-size)\n        start-time (get-current-time-millis)]\n    (loop [so-far 0\n           size-seq size-seq\n           rstate rng]\n      (if (== so-far num-tests)\n        (complete property num-tests created-seed start-time reporter-fn)\n        (let [[size & rest-size-seq] size-seq\n              [r1 r2] (random/split rstate)\n              result-map-rose (gen/call-gen property r1 size)\n              result-map (rose/root result-map-rose)\n              result (:result result-map)\n              args (:args result-map)\n              so-far (inc so-far)]\n          (if (results/pass? result)\n            (do\n              (reporter-fn {:type            :trial\n                            :args            args\n                            :num-tests       so-far\n                            :num-tests-total num-tests\n                            :pass?           true\n                            :property        property\n                            :result          result\n                            :result-data     (results/result-data result)\n                            :seed            seed})\n              (recur so-far rest-size-seq r2))\n            (failure property result-map-rose so-far size\n                     created-seed start-time reporter-fn)))))))\n\n(defn- smallest-shrink\n  [total-nodes-visited depth smallest start-time]\n  (let [{:keys [result]} smallest]\n    {:total-nodes-visited total-nodes-visited\n     :depth depth\n     :pass? false\n     :result (legacy-result result)\n     :result-data (results/result-data result)\n     :time-shrinking-ms (- (get-current-time-millis) start-time)\n     :smallest (:args smallest)}))\n\n(defn- shrink-loop\n  \"Shrinking a value produces a sequence of smaller values of the same type.\n  Each of these values can then be shrunk. Think of this as a tree. We do a\n  modified depth-first search of the tree:\n\n  Do a non-exhaustive search for a deeper (than the root) failing example.\n  Additional rules added to depth-first search:\n  * If a node passes the property, you may continue searching at this depth,\n  but not backtrack\n  * If a node fails the property, search its children\n  The value returned is the left-most failing example at the depth where a\n  passing example was found.\n\n  Calls reporter-fn on every shrink step.\"\n  [rose-tree reporter-fn]\n  (let [start-time (get-current-time-millis)\n        shrinks-this-depth (rose/children rose-tree)]\n    (loop [nodes shrinks-this-depth\n           current-smallest (rose/root rose-tree)\n           total-nodes-visited 0\n           depth 0]\n      (if (empty? nodes)\n        (smallest-shrink total-nodes-visited depth current-smallest start-time)\n        (let [;; can't destructure here because that could force\n              ;; evaluation of (second nodes)\n              head (first nodes)\n              tail (rest nodes)\n              result (:result (rose/root head))\n              args (:args (rose/root head))\n              pass? (results/pass? result)\n              reporter-fn-arg {:type :shrink-step\n                               :shrinking {:args                args\n                                           :depth               depth\n                                           :pass?               (boolean pass?)\n                                           :result              result\n                                           :result-data         (results/result-data result)\n                                           :smallest            (:args current-smallest)\n                                           :total-nodes-visited total-nodes-visited}}]\n          (if pass?\n            ;; this node passed the test, so now try testing its right-siblings\n            (do\n              (reporter-fn reporter-fn-arg)\n              (recur tail current-smallest (inc total-nodes-visited) depth))\n            ;; this node failed the test, so check if it has children,\n            ;; if so, traverse down them. If not, save this as the best example\n            ;; seen now and then look at the right-siblings\n            ;; children\n            (let [new-smallest (rose/root head)]\n              (reporter-fn (assoc-in reporter-fn-arg\n                                     [:shrinking :smallest]\n                                     (:args new-smallest)))\n              (if-let [children (seq (rose/children head))]\n                (recur children new-smallest (inc total-nodes-visited) (inc depth))\n                (recur tail new-smallest (inc total-nodes-visited) depth)))))))))\n\n(defn- failure\n  [property failing-rose-tree trial-number size seed start-time reporter-fn]\n  (let [failed-after-ms (- (get-current-time-millis) start-time)\n        root (rose/root failing-rose-tree)\n        result (:result root)\n        failure-data {:fail            (:args root)\n                      :failing-size    size\n                      :num-tests       trial-number\n                      :pass?           false\n                      :property        property\n                      :result          (legacy-result result)\n                      :result-data     (results/result-data result)\n                      :failed-after-ms failed-after-ms\n                      :seed            seed}]\n\n    (reporter-fn (assoc failure-data :type :failure))\n\n    (let [shrunk (shrink-loop failing-rose-tree\n                              #(reporter-fn (merge failure-data %)))]\n      (reporter-fn (assoc failure-data\n                          :type :shrunk\n                          :shrunk shrunk))\n      (-> failure-data\n          (dissoc :property)\n          (assoc :shrunk shrunk)))))\n"]}