{"version":3,"sources":["malli/impl/util.cljc"],"mappings":";AAIA,AAAaA,uCAAyC,AAAaC;AAEnE,0BAAA,1BAAMC,4DAASC,EAAEC;AAAjB,AAAmD,YAAAC,uBAAA,JAAWF,EAAEC;;AAChE,iCAAA,jCAAME,0EAAUF;AAAhB,AAAmB,qBAAWC,bAASD;;AAEvC,kCAAA,lCAAMG,4EAAWC;AAAjB,AAAsE,4CAAA,rCAACC,mCAAmBD;;AAC1F,6BAAA,7BAAME,kEAAYC,EAAEP;AAApB,AAAuB,GAAI,AAACG,gCAAUH;AAAGA;;AAAE,QAACO,kCAAAA,qCAAAA,LAAEP,iBAAAA;;;AAC9C,+BAAA,/BAAMQ,sEAAcD,EAAEP;AAAtB,AAAyB,GAAI,AAACG,gCAAUH;AAAG,QAACO,kCAAAA,qCAAAA,LAAEP,iBAAAA;;AAAGA;;;AAEjD,AAAA,yBAAA,iCAAAS,1DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAMD,kEACFE,KAAKC,IAAGC,OAAOC;AADnB,AAAA,kDAAA,0DAAA,sDAAA,iEAAA,5HACiCH,uDAAUC,8DAAYC,6DAAeC;;;AADtE,CAAA,uDAAA,vDAAML,kEAEFE,KAAKC,IAAGC,OAAOC,MAAMC;AAFzB,AAAA,kDAAA,0DAAA,sDAAA,iEAAA,4DAAA,xLAEsCJ,uDAAUC,8DAAYC,6DAAeC,2DAAaC;;;AAFxF,CAAA,iDAAA,jDAAMN;;AAAN,AAIA,AAAA,wBAAA,gCAAAF,xDAAMU;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAP,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAMO,iEACFC;AADJ,AACQ,OAACC,oDAAMC,mBAASF;;;AADxB,CAAA,sDAAA,tDAAMD,iEAEFZ,EAAEa;AAFN,AAOmB,oDAAA,7CAACG,8EAAQ,AAACC,4CAAIjB,GAAGa;;;AAPpC,CAAA,gDAAA,hDAAMD;;AAAN,AA2CA,AAAiCM,8BAEtB,sCAAKC;AAAL,AAAY,kBAAKC;AAAL,AAAQ,OAACC,mBAAQ,+CAAA,WAAAC,iBAAAC,3EAACC;AAAD,AAAS,IAAAC,mBAAI,CAAAF,iDAAAA,oDAAAA,LAAIH,gCAAAA;AAAR,AAAA,oBAAAK;AAAAA;;AAAW,yBAAA,lBAACC;;GAArB,KAA0CP;;;AAElF,AAAiCQ,6BAEtB,qCAAKR;AAAL,AAAY,kBAAKtB;AAAL,AAAQ,OAACwB,mBAAQ,eAAA,WAAAO,1BAACC;AAAD,AAAO,QAAAD,iDAAAA,oDAAAA,LAAG/B,gCAAAA;GAAGsB","names":["malli.impl.util/+max-size+","js/Number","malli.impl.util/-tagged","k","v","cljs.core/MapEntry","malli.impl.util/-tagged?","malli.impl.util/-invalid?","x","cljs.core/keyword-identical?","malli.impl.util/-map-valid","f","malli.impl.util/-map-invalid","var_args","G__82533","malli.impl.util/-error","js/Error","path","in","schema","value","type","G__82541","malli.impl.util/-vmap","os","malli.impl.util._vmap","cljs.core/identity","cljs.core.into","cljs.core.map","malli.impl.util/-every-pred","preds","m","cljs.core/boolean","p1__82552#","p2__82551#","cljs.core.reduce","or__4253__auto__","cljs.core/reduced","malli.impl.util/-some-pred","p1__82557#","cljs.core/some"],"sourcesContent":["(ns malli.impl.util\n  #?(:clj (:import (clojure.lang MapEntry LazilyPersistentVector)\n                   (java.util.concurrent TimeoutException TimeUnit FutureTask))))\n\n(def ^:const +max-size+ #?(:clj Long/MAX_VALUE, :cljs (.-MAX_VALUE js/Number)))\n\n(defn -tagged [k v] #?(:clj (MapEntry. k v), :cljs (MapEntry. k v nil)))\n(defn -tagged? [v] (instance? MapEntry v))\n\n(defn -invalid? [x] #?(:clj (identical? x :malli.core/invalid), :cljs (keyword-identical? x :malli.core/invalid)))\n(defn -map-valid [f v] (if (-invalid? v) v (f v)))\n(defn -map-invalid [f v] (if (-invalid? v) (f v) v))\n\n(defn -error\n  ([path in schema value] {:path path, :in in, :schema schema, :value value})\n  ([path in schema value type] {:path path, :in in, :schema schema, :value value, :type type}))\n\n(defn -vmap\n  ([os] (-vmap identity os))\n  ([f os] #?(:clj  (let [c (count os)]\n                     (if-not (zero? c)\n                       (let [oa (object-array c), iter (.iterator ^Iterable os)]\n                         (loop [n 0] (when (.hasNext iter) (aset oa n (f (.next iter))) (recur (unchecked-inc n))))\n                         (LazilyPersistentVector/createOwning oa)) []))\n             :cljs (into [] (map f) os))))\n\n#?(:clj\n   (defn ^:no-doc -run [^Runnable f ms]\n     (let [task (FutureTask. f), t (Thread. task)]\n       (try\n         (.start t) (.get task ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException _ (.cancel task true) (.stop t) ::timeout)\n         (catch Exception e (.cancel task true) (.stop t) (throw e))))))\n\n#?(:clj\n   (defmacro -combine-n\n     [c n xs]\n     (let [syms (repeatedly n gensym)\n           g (gensym \"preds__\")\n           bs (interleave syms (map (fn [n] `(nth ~g ~n)) (range n)))\n           arg (gensym \"arg__\")\n           body `(~c ~@(map (fn [sym] `(~sym ~arg)) syms))]\n       `(let [~g (-vmap ~xs) ~@bs]\n          (fn [~arg] ~body)))))\n\n#?(:clj\n   (defmacro -pred-composer\n     [c n]\n     (let [preds (gensym \"preds__\")\n           f (gensym \"f__\")\n           cases (mapcat (fn [i] [i `(-combine-n ~c ~i ~preds)]) (range 2 (inc n)))\n           else `(let [p# (~f (take ~n ~preds)) q# (~f (drop ~n ~preds))]\n                   (fn [x#] (~c (p# x#) (q# x#))))]\n       `(fn ~f [~preds]\n          (case (count ~preds)\n            0 (constantly true)\n            1 (first ~preds)\n            ~@cases\n            ~else)))))\n\n(def ^{:arglists '([[& preds]])} -every-pred\n  #?(:clj (-pred-composer and 16)\n     :cljs (fn [preds] (fn [m] (boolean (reduce #(or (%2 m) (reduced false)) true preds))))))\n\n(def ^{:arglists '([[& preds]])} -some-pred\n  #?(:clj (-pred-composer or 16)\n     :cljs (fn [preds] (fn [x] (boolean (some #(% x) preds))))))\n"]}