{
"version":3,
"file":"module$node_modules$vega_statistics$build$vega_statistics.js",
"lineCount":35,
"mappings":"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",
"sources":["node_modules/vega-statistics/build/vega-statistics.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_statistics$build$vega_statistics\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3));\n}(this, (function (exports, d3Array) { 'use strict';\n\n  function* numbers (values, valueof) {\n    if (valueof == null) {\n      for (let value of values) {\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    } else {\n      let index = -1;\n\n      for (let value of values) {\n        value = valueof(value, ++index, values);\n\n        if (value != null && value !== '' && (value = +value) >= value) {\n          yield value;\n        }\n      }\n    }\n  }\n\n  function quantiles (array, p, f) {\n    const values = Float64Array.from(numbers(array, f)); // don't depend on return value from typed array sort call\n    // protects against undefined sort results in Safari (vega/vega-lite#4964)\n\n    values.sort(d3Array.ascending);\n    return p.map(_ => d3Array.quantileSorted(values, _));\n  }\n\n  function quartiles (array, f) {\n    return quantiles(array, [0.25, 0.50, 0.75], f);\n  }\n\n  // Theory, Practice, and Visualization. Wiley.\n\n  function estimateBandwidth (array, f) {\n    const n = array.length,\n          d = d3Array.deviation(array, f),\n          q = quartiles(array, f),\n          h = (q[2] - q[0]) / 1.34,\n          v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n    return 1.06 * v * Math.pow(n, -0.2);\n  }\n\n  function bin (_) {\n    // determine range\n    const maxb = _.maxbins || 20,\n          base = _.base || 10,\n          logb = Math.log(base),\n          div = _.divide || [5, 2];\n    let min = _.extent[0],\n        max = _.extent[1],\n        step,\n        level,\n        minstep,\n        v,\n        i,\n        n;\n    const span = _.span || max - min || Math.abs(min) || 1;\n\n    if (_.step) {\n      // if step size is explicitly given, use that\n      step = _.step;\n    } else if (_.steps) {\n      // if provided, limit choice to acceptable step sizes\n      v = span / maxb;\n\n      for (i = 0, n = _.steps.length; i < n && _.steps[i] < v; ++i);\n\n      step = _.steps[Math.max(0, i - 1)];\n    } else {\n      // else use span to determine step size\n      level = Math.ceil(Math.log(maxb) / logb);\n      minstep = _.minstep || 0;\n      step = Math.max(minstep, Math.pow(base, Math.round(Math.log(span) / logb) - level)); // increase step size if too many bins\n\n      while (Math.ceil(span / step) > maxb) {\n        step *= base;\n      } // decrease step size if allowed\n\n\n      for (i = 0, n = div.length; i < n; ++i) {\n        v = step / div[i];\n        if (v >= minstep && span / v <= maxb) step = v;\n      }\n    } // update precision, min and max\n\n\n    v = Math.log(step);\n    const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n          eps = Math.pow(base, -precision - 1);\n\n    if (_.nice || _.nice === undefined) {\n      v = Math.floor(min / step + eps) * step;\n      min = min < v ? v - step : v;\n      max = Math.ceil(max / step) * step;\n    }\n\n    return {\n      start: min,\n      stop: max === min ? min + step : max,\n      step: step\n    };\n  }\n\n  exports.random = Math.random;\n  function setRandom(r) {\n    exports.random = r;\n  }\n\n  function bootstrapCI (array, samples, alpha, f) {\n    if (!array.length) return [undefined, undefined];\n    const values = Float64Array.from(numbers(array, f)),\n          n = values.length,\n          m = samples;\n    let a, i, j, mu;\n\n    for (j = 0, mu = Array(m); j < m; ++j) {\n      for (a = 0, i = 0; i < n; ++i) {\n        a += values[~~(exports.random() * n)];\n      }\n\n      mu[j] = a / n;\n    }\n\n    mu.sort(d3Array.ascending);\n    return [d3Array.quantile(mu, alpha / 2), d3Array.quantile(mu, 1 - alpha / 2)];\n  }\n\n  // Dot density binning for dot plot construction.\n  // Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n  // https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n  function dotbin (array, step, smooth, f) {\n    f = f || (_ => _);\n\n    const n = array.length,\n          v = new Float64Array(n);\n    let i = 0,\n        j = 1,\n        a = f(array[0]),\n        b = a,\n        w = a + step,\n        x;\n\n    for (; j < n; ++j) {\n      x = f(array[j]);\n\n      if (x >= w) {\n        b = (a + b) / 2;\n\n        for (; i < j; ++i) v[i] = b;\n\n        w = x + step;\n        a = x;\n      }\n\n      b = x;\n    }\n\n    b = (a + b) / 2;\n\n    for (; i < j; ++i) v[i] = b;\n\n    return smooth ? smoothing(v, step + step / 4) : v;\n  } // perform smoothing to reduce variance\n  // swap points between \"adjacent\" stacks\n  // Wilkinson defines adjacent as within step/4 units\n\n  function smoothing(v, thresh) {\n    const n = v.length;\n    let a = 0,\n        b = 1,\n        c,\n        d; // get left stack\n\n    while (v[a] === v[b]) ++b;\n\n    while (b < n) {\n      // get right stack\n      c = b + 1;\n\n      while (v[b] === v[c]) ++c; // are stacks adjacent?\n      // if so, compare sizes and swap as needed\n\n\n      if (v[b] - v[b - 1] < thresh) {\n        d = b + (a + c - b - b >> 1);\n\n        while (d < b) v[d++] = v[b];\n\n        while (d > b) v[d--] = v[a];\n      } // update left stack indices\n\n\n      a = b;\n      b = c;\n    }\n\n    return v;\n  }\n\n  function lcg (seed) {\n    // Random numbers using a Linear Congruential Generator with seed value\n    // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n    return function () {\n      seed = (1103515245 * seed + 12345) % 2147483647;\n      return seed / 2147483647;\n    };\n  }\n\n  function integer (min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n\n    let a, b, d;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n\n      max(_) {\n        if (arguments.length) {\n          b = _ || 0;\n          d = b - a;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n\n      sample() {\n        return a + Math.floor(d * exports.random());\n      },\n\n      pdf(x) {\n        return x === Math.floor(x) && x >= a && x < b ? 1 / d : 0;\n      },\n\n      cdf(x) {\n        const v = Math.floor(x);\n        return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n      },\n\n      icdf(p) {\n        return p >= 0 && p <= 1 ? a - 1 + Math.floor(p * d) : NaN;\n      }\n\n    };\n    return dist.min(min).max(max);\n  }\n\n  const SQRT2PI = Math.sqrt(2 * Math.PI);\n  const SQRT2 = Math.SQRT2;\n\n  let nextSample = NaN;\n  function sampleNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    let x = 0,\n        y = 0,\n        rds,\n        c;\n\n    if (nextSample === nextSample) {\n      x = nextSample;\n      nextSample = NaN;\n    } else {\n      do {\n        x = exports.random() * 2 - 1;\n        y = exports.random() * 2 - 1;\n        rds = x * x + y * y;\n      } while (rds === 0 || rds > 1);\n\n      c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n\n      x *= c;\n      nextSample = y * c;\n    }\n\n    return mean + x * stdev;\n  }\n  function densityNormal(value, mean, stdev) {\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - (mean || 0)) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n  } // Approximation from West (2009)\n  // Better Approximations to Cumulative Normal Functions\n\n  function cumulativeNormal(value, mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (value - mean) / stdev,\n          Z = Math.abs(z);\n    let cd;\n\n    if (Z > 37) {\n      cd = 0;\n    } else {\n      const exp = Math.exp(-Z * Z / 2);\n      let sum;\n\n      if (Z < 7.07106781186547) {\n        sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n        sum = sum * Z + 6.37396220353165;\n        sum = sum * Z + 33.912866078383;\n        sum = sum * Z + 112.079291497871;\n        sum = sum * Z + 221.213596169931;\n        sum = sum * Z + 220.206867912376;\n        cd = exp * sum;\n        sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n        sum = sum * Z + 16.064177579207;\n        sum = sum * Z + 86.7807322029461;\n        sum = sum * Z + 296.564248779674;\n        sum = sum * Z + 637.333633378831;\n        sum = sum * Z + 793.826512519948;\n        sum = sum * Z + 440.413735824752;\n        cd = cd / sum;\n      } else {\n        sum = Z + 0.65;\n        sum = Z + 4 / sum;\n        sum = Z + 3 / sum;\n        sum = Z + 2 / sum;\n        sum = Z + 1 / sum;\n        cd = exp / sum / 2.506628274631;\n      }\n    }\n\n    return z > 0 ? 1 - cd : cd;\n  } // Approximation of Probit function using inverse error function.\n\n  function quantileNormal(p, mean, stdev) {\n    if (p < 0 || p > 1) return NaN;\n    return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n  } // Approximate inverse error function. Implementation from \"Approximating\n  // the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n  // Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\n\n  function erfinv(x) {\n    // beware that the logarithm argument must be\n    // commputed as (1.0 - x) * (1.0 + x),\n    // it must NOT be simplified as 1.0 - x * x as this\n    // would induce rounding errors near the boundaries +/-1\n    let w = -Math.log((1 - x) * (1 + x)),\n        p;\n\n    if (w < 6.25) {\n      w -= 3.125;\n      p = -3.6444120640178196996e-21;\n      p = -1.685059138182016589e-19 + p * w;\n      p = 1.2858480715256400167e-18 + p * w;\n      p = 1.115787767802518096e-17 + p * w;\n      p = -1.333171662854620906e-16 + p * w;\n      p = 2.0972767875968561637e-17 + p * w;\n      p = 6.6376381343583238325e-15 + p * w;\n      p = -4.0545662729752068639e-14 + p * w;\n      p = -8.1519341976054721522e-14 + p * w;\n      p = 2.6335093153082322977e-12 + p * w;\n      p = -1.2975133253453532498e-11 + p * w;\n      p = -5.4154120542946279317e-11 + p * w;\n      p = 1.051212273321532285e-09 + p * w;\n      p = -4.1126339803469836976e-09 + p * w;\n      p = -2.9070369957882005086e-08 + p * w;\n      p = 4.2347877827932403518e-07 + p * w;\n      p = -1.3654692000834678645e-06 + p * w;\n      p = -1.3882523362786468719e-05 + p * w;\n      p = 0.0001867342080340571352 + p * w;\n      p = -0.00074070253416626697512 + p * w;\n      p = -0.0060336708714301490533 + p * w;\n      p = 0.24015818242558961693 + p * w;\n      p = 1.6536545626831027356 + p * w;\n    } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p = 2.2137376921775787049e-09;\n      p = 9.0756561938885390979e-08 + p * w;\n      p = -2.7517406297064545428e-07 + p * w;\n      p = 1.8239629214389227755e-08 + p * w;\n      p = 1.5027403968909827627e-06 + p * w;\n      p = -4.013867526981545969e-06 + p * w;\n      p = 2.9234449089955446044e-06 + p * w;\n      p = 1.2475304481671778723e-05 + p * w;\n      p = -4.7318229009055733981e-05 + p * w;\n      p = 6.8284851459573175448e-05 + p * w;\n      p = 2.4031110387097893999e-05 + p * w;\n      p = -0.0003550375203628474796 + p * w;\n      p = 0.00095328937973738049703 + p * w;\n      p = -0.0016882755560235047313 + p * w;\n      p = 0.0024914420961078508066 + p * w;\n      p = -0.0037512085075692412107 + p * w;\n      p = 0.005370914553590063617 + p * w;\n      p = 1.0052589676941592334 + p * w;\n      p = 3.0838856104922207635 + p * w;\n    } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p = -2.7109920616438573243e-11;\n      p = -2.5556418169965252055e-10 + p * w;\n      p = 1.5076572693500548083e-09 + p * w;\n      p = -3.7894654401267369937e-09 + p * w;\n      p = 7.6157012080783393804e-09 + p * w;\n      p = -1.4960026627149240478e-08 + p * w;\n      p = 2.9147953450901080826e-08 + p * w;\n      p = -6.7711997758452339498e-08 + p * w;\n      p = 2.2900482228026654717e-07 + p * w;\n      p = -9.9298272942317002539e-07 + p * w;\n      p = 4.5260625972231537039e-06 + p * w;\n      p = -1.9681778105531670567e-05 + p * w;\n      p = 7.5995277030017761139e-05 + p * w;\n      p = -0.00021503011930044477347 + p * w;\n      p = -0.00013871931833623122026 + p * w;\n      p = 1.0103004648645343977 + p * w;\n      p = 4.8499064014085844221 + p * w;\n    } else {\n      p = Infinity;\n    }\n\n    return p * x;\n  }\n\n  function gaussian (mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n\n      sample: () => sampleNormal(mu, sigma),\n      pdf: value => densityNormal(value, mu, sigma),\n      cdf: value => cumulativeNormal(value, mu, sigma),\n      icdf: p => quantileNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function kde (support, bandwidth) {\n    const kernel = gaussian();\n    let n = 0;\n    const dist = {\n      data(_) {\n        if (arguments.length) {\n          support = _;\n          n = _ ? _.length : 0;\n          return dist.bandwidth(bandwidth);\n        } else {\n          return support;\n        }\n      },\n\n      bandwidth(_) {\n        if (!arguments.length) return bandwidth;\n        bandwidth = _;\n        if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n        return dist;\n      },\n\n      sample() {\n        return support[~~(exports.random() * n)] + bandwidth * kernel.sample();\n      },\n\n      pdf(x) {\n        let y = 0,\n            i = 0;\n\n        for (; i < n; ++i) {\n          y += kernel.pdf((x - support[i]) / bandwidth);\n        }\n\n        return y / bandwidth / n;\n      },\n\n      cdf(x) {\n        let y = 0,\n            i = 0;\n\n        for (; i < n; ++i) {\n          y += kernel.cdf((x - support[i]) / bandwidth);\n        }\n\n        return y / n;\n      },\n\n      icdf() {\n        throw Error('KDE icdf not supported.');\n      }\n\n    };\n    return dist.data(support);\n  }\n\n  function sampleLogNormal(mean, stdev) {\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    return Math.exp(mean + sampleNormal() * stdev);\n  }\n  function densityLogNormal(value, mean, stdev) {\n    if (value <= 0) return 0;\n    mean = mean || 0;\n    stdev = stdev == null ? 1 : stdev;\n    const z = (Math.log(value) - mean) / stdev;\n    return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n  }\n  function cumulativeLogNormal(value, mean, stdev) {\n    return cumulativeNormal(Math.log(value), mean, stdev);\n  }\n  function quantileLogNormal(p, mean, stdev) {\n    return Math.exp(quantileNormal(p, mean, stdev));\n  }\n  function lognormal (mean, stdev) {\n    let mu, sigma;\n    const dist = {\n      mean(_) {\n        if (arguments.length) {\n          mu = _ || 0;\n          return dist;\n        } else {\n          return mu;\n        }\n      },\n\n      stdev(_) {\n        if (arguments.length) {\n          sigma = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return sigma;\n        }\n      },\n\n      sample: () => sampleLogNormal(mu, sigma),\n      pdf: value => densityLogNormal(value, mu, sigma),\n      cdf: value => cumulativeLogNormal(value, mu, sigma),\n      icdf: p => quantileLogNormal(p, mu, sigma)\n    };\n    return dist.mean(mean).stdev(stdev);\n  }\n\n  function mixture (dists, weights) {\n    let m = 0,\n        w;\n\n    function normalize(x) {\n      const w = [];\n      let sum = 0,\n          i;\n\n      for (i = 0; i < m; ++i) {\n        sum += w[i] = x[i] == null ? 1 : +x[i];\n      }\n\n      for (i = 0; i < m; ++i) {\n        w[i] /= sum;\n      }\n\n      return w;\n    }\n\n    const dist = {\n      weights(_) {\n        if (arguments.length) {\n          w = normalize(weights = _ || []);\n          return dist;\n        }\n\n        return weights;\n      },\n\n      distributions(_) {\n        if (arguments.length) {\n          if (_) {\n            m = _.length;\n            dists = _;\n          } else {\n            m = 0;\n            dists = [];\n          }\n\n          return dist.weights(weights);\n        }\n\n        return dists;\n      },\n\n      sample() {\n        const r = exports.random();\n        let d = dists[m - 1],\n            v = w[0],\n            i = 0; // first select distribution\n\n        for (; i < m - 1; v += w[++i]) {\n          if (r < v) {\n            d = dists[i];\n            break;\n          }\n        } // then sample from it\n\n\n        return d.sample();\n      },\n\n      pdf(x) {\n        let p = 0,\n            i = 0;\n\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].pdf(x);\n        }\n\n        return p;\n      },\n\n      cdf(x) {\n        let p = 0,\n            i = 0;\n\n        for (; i < m; ++i) {\n          p += w[i] * dists[i].cdf(x);\n        }\n\n        return p;\n      },\n\n      icdf() {\n        throw Error('Mixture icdf not supported.');\n      }\n\n    };\n    return dist.distributions(dists).weights(weights);\n  }\n\n  function sampleUniform(min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return min + (max - min) * exports.random();\n  }\n  function densityUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return value >= min && value <= max ? 1 / (max - min) : 0;\n  }\n  function cumulativeUniform(value, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n  }\n  function quantileUniform(p, min, max) {\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return p >= 0 && p <= 1 ? min + p * (max - min) : NaN;\n  }\n  function uniform (min, max) {\n    let a, b;\n    const dist = {\n      min(_) {\n        if (arguments.length) {\n          a = _ || 0;\n          return dist;\n        } else {\n          return a;\n        }\n      },\n\n      max(_) {\n        if (arguments.length) {\n          b = _ == null ? 1 : _;\n          return dist;\n        } else {\n          return b;\n        }\n      },\n\n      sample: () => sampleUniform(a, b),\n      pdf: value => densityUniform(value, a, b),\n      cdf: value => cumulativeUniform(value, a, b),\n      icdf: p => quantileUniform(p, a, b)\n    };\n\n    if (max == null) {\n      max = min == null ? 1 : min;\n      min = 0;\n    }\n\n    return dist.min(min).max(max);\n  }\n\n  // Ordinary Least Squares\n  function ols (uX, uY, uXY, uX2) {\n    const delta = uX2 - uX * uX,\n          slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n          intercept = uY - slope * uX;\n    return [intercept, slope];\n  }\n\n  function points(data, x, y, sort) {\n    data = data.filter(d => {\n      let u = x(d),\n          v = y(d);\n      return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n    });\n\n    if (sort) {\n      data.sort((a, b) => x(a) - x(b));\n    }\n\n    const n = data.length,\n          X = new Float64Array(n),\n          Y = new Float64Array(n); // extract values, calculate means\n\n    let i = 0,\n        ux = 0,\n        uy = 0,\n        xv,\n        yv,\n        d;\n\n    for (d of data) {\n      X[i] = xv = +x(d);\n      Y[i] = yv = +y(d);\n      ++i;\n      ux += (xv - ux) / i;\n      uy += (yv - uy) / i;\n    } // mean center the data\n\n\n    for (i = 0; i < n; ++i) {\n      X[i] -= ux;\n      Y[i] -= uy;\n    }\n\n    return [X, Y, ux, uy];\n  }\n  function visitPoints(data, x, y, callback) {\n    let i = -1,\n        u,\n        v;\n\n    for (const d of data) {\n      u = x(d);\n      v = y(d);\n\n      if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n        callback(u, v, ++i);\n      }\n    }\n  }\n\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n  function rSquared (data, x, y, uY, predict) {\n    let SSE = 0,\n        SST = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const sse = dy - predict(dx),\n            sst = dy - uY;\n      SSE += sse * sse;\n      SST += sst * sst;\n    });\n    return 1 - SSE / SST;\n  }\n\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n  function linear (data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * x;\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n  function log (data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n;\n      dx = Math.log(dx);\n      X += (dx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (dx * dy - XY) / n;\n      X2 += (dx * dx - X2) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] + coef[1] * Math.log(x);\n\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, Y, predict)\n    };\n  }\n\n  function exp (data, x, y) {\n    // eslint-disable-next-line no-unused-vars\n    const [xv, yv, ux, uy] = points(data, x, y);\n    let YL = 0,\n        XY = 0,\n        XYL = 0,\n        X2Y = 0,\n        n = 0,\n        dx,\n        ly,\n        xy;\n    visitPoints(data, x, y, (_, dy) => {\n      dx = xv[n++];\n      ly = Math.log(dy);\n      xy = dx * dy;\n      YL += (dy * ly - YL) / n;\n      XY += (xy - XY) / n;\n      XYL += (xy * ly - XYL) / n;\n      X2Y += (dx * xy - X2Y) / n;\n    });\n\n    const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n          predict = x => Math.exp(c0 + c1 * (x - ux));\n\n    return {\n      coef: [Math.exp(c0 - c1 * ux), c1],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n\n  function pow (data, x, y) {\n    let X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        YS = 0,\n        n = 0;\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx),\n            ly = Math.log(dy);\n      ++n;\n      X += (lx - X) / n;\n      Y += (ly - Y) / n;\n      XY += (lx * ly - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      YS += (dy - YS) / n;\n    });\n\n    const coef = ols(X, Y, XY, X2),\n          predict = x => coef[0] * Math.pow(x, coef[1]);\n\n    coef[0] = Math.exp(coef[0]);\n    return {\n      coef: coef,\n      predict: predict,\n      rSquared: rSquared(data, x, y, YS, predict)\n    };\n  }\n\n  function quad (data, x, y) {\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length;\n    let X2 = 0,\n        X3 = 0,\n        X4 = 0,\n        XY = 0,\n        X2Y = 0,\n        i,\n        dx,\n        dy,\n        x2;\n\n    for (i = 0; i < n;) {\n      dx = xv[i];\n      dy = yv[i++];\n      x2 = dx * dx;\n      X2 += (x2 - X2) / i;\n      X3 += (x2 * dx - X3) / i;\n      X4 += (x2 * x2 - X4) / i;\n      XY += (dx * dy - XY) / i;\n      X2Y += (x2 * dy - X2Y) / i;\n    }\n\n    const X2X2 = X4 - X2 * X2,\n          d = X2 * X2X2 - X3 * X3,\n          a = (X2Y * X2 - XY * X3) / d,\n          b = (XY * X2X2 - X2Y * X3) / d,\n          c = -a * X2,\n          predict = x => {\n      x = x - ux;\n      return a * x * x + b * x + c + uy;\n    }; // transform coefficients back from mean-centered space\n\n\n    return {\n      coef: [c - b * ux + a * ux * ux + uy, b - 2 * a * ux, a],\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  // License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n  // ... which was adapted from regression-js by Tom Alexander\n  // Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n  // License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n\n  function poly (data, x, y, order) {\n    // use more efficient methods for lower orders\n    if (order === 1) return linear(data, x, y);\n    if (order === 2) return quad(data, x, y);\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n    let i, j, l, v, c;\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n\n      lhs.push(v);\n      c = new Float64Array(k);\n\n      for (j = 0; j < k; ++j) {\n        for (l = 0, v = 0; l < n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n\n        c[j] = v;\n      }\n\n      rhs.push(c);\n    }\n\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          predict = x => {\n      x -= ux;\n      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n      return y;\n    };\n\n    return {\n      coef: uncenter(k, coef, -ux, uy),\n      predict: predict,\n      rSquared: rSquared(data, x, y, uy, predict)\n    };\n  }\n\n  function uncenter(k, a, x, y) {\n    const z = Array(k);\n    let i, j, v, c; // initialize to zero\n\n    for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n    for (i = k - 1; i >= 0; --i) {\n      v = a[i];\n      c = 1;\n      z[i] += v;\n\n      for (j = 1; j <= i; ++j) {\n        c *= (i + 1 - j) / j; // binomial coefficent\n\n        z[i - j] += v * Math.pow(x, j) * c;\n      }\n    } // bias term\n\n\n    z[0] += y;\n    return z;\n  } // Given an array for a two-dimensional matrix and the polynomial order,\n  // solve A * x = b using Gaussian elimination.\n\n\n  function gaussianElimination(matrix) {\n    const n = matrix.length - 1,\n          coef = [];\n    let i, j, k, r, t;\n\n    for (i = 0; i < n; ++i) {\n      r = i; // max row\n\n      for (j = i + 1; j < n; ++j) {\n        if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n          r = j;\n        }\n      }\n\n      for (k = i; k < n + 1; ++k) {\n        t = matrix[k][i];\n        matrix[k][i] = matrix[k][r];\n        matrix[k][r] = t;\n      }\n\n      for (j = i + 1; j < n; ++j) {\n        for (k = n; k >= i; k--) {\n          matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n        }\n      }\n    }\n\n    for (j = n - 1; j >= 0; --j) {\n      t = 0;\n\n      for (k = j + 1; k < n; ++k) {\n        t += matrix[k][j] * coef[k];\n      }\n\n      coef[j] = (matrix[n][j] - t) / matrix[j][j];\n    }\n\n    return coef;\n  }\n\n  const maxiters = 2,\n        epsilon = 1e-12; // Adapted from science.js by Jason Davies\n  // Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n  // License: https://github.com/jasondavies/science.js/blob/master/LICENSE\n\n  function loess (data, x, y, bandwidth) {\n    const [xv, yv, ux, uy] = points(data, x, y, true),\n          n = xv.length,\n          bw = Math.max(2, ~~(bandwidth * n)),\n          // # nearest neighbors\n    yhat = new Float64Array(n),\n          residuals = new Float64Array(n),\n          robustWeights = new Float64Array(n).fill(1);\n\n    for (let iter = -1; ++iter <= maxiters;) {\n      const interval = [0, bw - 1];\n\n      for (let i = 0; i < n; ++i) {\n        const dx = xv[i],\n              i0 = interval[0],\n              i1 = interval[1],\n              edge = dx - xv[i0] > xv[i1] - dx ? i0 : i1;\n        let W = 0,\n            X = 0,\n            Y = 0,\n            XY = 0,\n            X2 = 0;\n        const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n        for (let k = i0; k <= i1; ++k) {\n          const xk = xv[k],\n                yk = yv[k],\n                w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n                xkw = xk * w;\n          W += w;\n          X += xkw;\n          Y += yk * w;\n          XY += yk * xkw;\n          X2 += xk * xkw;\n        } // linear regression fit\n\n\n        const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n        yhat[i] = a + b * dx;\n        residuals[i] = Math.abs(yv[i] - yhat[i]);\n        updateInterval(xv, i + 1, interval);\n      }\n\n      if (iter === maxiters) {\n        break;\n      }\n\n      const medianResidual = d3Array.median(residuals);\n      if (Math.abs(medianResidual) < epsilon) break;\n\n      for (let i = 0, arg, w; i < n; ++i) {\n        arg = residuals[i] / (6 * medianResidual); // default to epsilon (rather than zero) for large deviations\n        // keeping weights tiny but non-zero prevents singularites\n\n        robustWeights[i] = arg >= 1 ? epsilon : (w = 1 - arg * arg) * w;\n      }\n    }\n\n    return output(xv, yhat, ux, uy);\n  } // weighting kernel for local regression\n\n  function tricube(x) {\n    return (x = 1 - x * x * x) * x * x;\n  } // advance sliding window interval of nearest neighbors\n\n\n  function updateInterval(xv, i, interval) {\n    const val = xv[i];\n    let left = interval[0],\n        right = interval[1] + 1;\n    if (right >= xv.length) return; // step right if distance to new right edge is <= distance to old left edge\n    // step when distance is equal to ensure movement over duplicate x values\n\n    while (i > left && xv[right] - val <= val - xv[left]) {\n      interval[0] = ++left;\n      interval[1] = right;\n      ++right;\n    }\n  } // generate smoothed output points\n  // average points with repeated x values\n\n\n  function output(xv, yhat, ux, uy) {\n    const n = xv.length,\n          out = [];\n    let i = 0,\n        cnt = 0,\n        prev = [],\n        v;\n\n    for (; i < n; ++i) {\n      v = xv[i] + ux;\n\n      if (prev[0] === v) {\n        // average output values via online update\n        prev[1] += (yhat[i] - prev[1]) / ++cnt;\n      } else {\n        // add new output point\n        cnt = 0;\n        prev[1] += uy;\n        prev = [v, yhat[i]];\n        out.push(prev);\n      }\n    }\n\n    prev[1] += uy;\n    return out;\n  }\n\n  // subdivide up to accuracy of 0.5 degrees\n  const MIN_RADIANS = 0.5 * Math.PI / 180; // Adaptively sample an interpolated function over a domain extent\n\n  function sampleCurve (f, extent, minSteps, maxSteps) {\n    minSteps = minSteps || 25;\n    maxSteps = Math.max(minSteps, maxSteps || 200);\n\n    const point = x => [x, f(x)],\n          minX = extent[0],\n          maxX = extent[1],\n          span = maxX - minX,\n          stop = span / maxSteps,\n          prev = [point(minX)],\n          next = [];\n\n    if (minSteps === maxSteps) {\n      // no adaptation, sample uniform grid directly and return\n      for (let i = 1; i < maxSteps; ++i) {\n        prev.push(point(minX + i / minSteps * span));\n      }\n\n      prev.push(point(maxX));\n      return prev;\n    } else {\n      // sample minimum points on uniform grid\n      // then move on to perform adaptive refinement\n      next.push(point(maxX));\n\n      for (let i = minSteps; --i > 0;) {\n        next.push(point(minX + i / minSteps * span));\n      }\n    }\n\n    let p0 = prev[0];\n    let p1 = next[next.length - 1];\n    const sx = 1 / span;\n    const sy = scaleY(p0[1], next);\n\n    while (p1) {\n      // midpoint for potential curve subdivision\n      const pm = point((p0[0] + p1[0]) / 2);\n      const dx = pm[0] - p0[0] >= stop;\n\n      if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n        // maximum resolution has not yet been met, and\n        // subdivision midpoint is sufficiently different from endpoint\n        // save subdivision, push midpoint onto the visitation stack\n        next.push(pm);\n      } else {\n        // subdivision midpoint sufficiently similar to endpoint\n        // skip subdivision, store endpoint, move to next point on the stack\n        p0 = p1;\n        prev.push(p1);\n        next.pop();\n      }\n\n      p1 = next[next.length - 1];\n    }\n\n    return prev;\n  }\n\n  function scaleY(init, points) {\n    let ymin = init;\n    let ymax = init;\n    const n = points.length;\n\n    for (let i = 0; i < n; ++i) {\n      const y = points[i][1];\n      if (y < ymin) ymin = y;\n      if (y > ymax) ymax = y;\n    }\n\n    return 1 / (ymax - ymin);\n  }\n\n  function angleDelta(p, q, r, sx, sy) {\n    const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n          a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n    return Math.abs(a0 - a1);\n  }\n\n  exports.bandwidthNRD = estimateBandwidth;\n  exports.bin = bin;\n  exports.bootstrapCI = bootstrapCI;\n  exports.cumulativeLogNormal = cumulativeLogNormal;\n  exports.cumulativeNormal = cumulativeNormal;\n  exports.cumulativeUniform = cumulativeUniform;\n  exports.densityLogNormal = densityLogNormal;\n  exports.densityNormal = densityNormal;\n  exports.densityUniform = densityUniform;\n  exports.dotbin = dotbin;\n  exports.quantileLogNormal = quantileLogNormal;\n  exports.quantileNormal = quantileNormal;\n  exports.quantileUniform = quantileUniform;\n  exports.quantiles = quantiles;\n  exports.quartiles = quartiles;\n  exports.randomInteger = integer;\n  exports.randomKDE = kde;\n  exports.randomLCG = lcg;\n  exports.randomLogNormal = lognormal;\n  exports.randomMixture = mixture;\n  exports.randomNormal = gaussian;\n  exports.randomUniform = uniform;\n  exports.regressionExp = exp;\n  exports.regressionLinear = linear;\n  exports.regressionLoess = loess;\n  exports.regressionLog = log;\n  exports.regressionPoly = poly;\n  exports.regressionPow = pow;\n  exports.regressionQuad = quad;\n  exports.sampleCurve = sampleCurve;\n  exports.sampleLogNormal = sampleLogNormal;\n  exports.sampleNormal = sampleNormal;\n  exports.sampleUniform = sampleUniform;\n  exports.setRandom = setRandom;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","d3Array","numbers","values","valueof","value","index","quantiles","array","p","f","Float64Array","from","sort","ascending","map","_","quantileSorted","quartiles","estimateBandwidth","n","length","d","deviation","q","Math","min","abs","pow","smoothing","v","thresh","a","b","c","sampleNormal","mean","stdev","x","y","nextSample","NaN","random","rds","sqrt","log","densityNormal","z","exp","SQRT2PI","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","Infinity","SQRT2","gaussian","mu","sigma","dist","arguments","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","max","densityUniform","cumulativeUniform","quantileUniform","ols","uX","uY","uXY","uX2","delta","slope","points","data","filter","u","X","Y","i","ux","uy","yv","xv","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","quad","X3","X4","X2Y","x2","X2X2","uncenter","k","Array","j","gaussianElimination","matrix","r","t","PI","MIN_RADIANS","bandwidthNRD","bin","maxb","maxbins","base","logb","div","divide","extent","minstep","span","step","steps","level","ceil","round","eps","precision","nice","undefined","floor","start","stop","bootstrapCI","samples","alpha","quantile","dotbin","smooth","randomInteger","integer","randomKDE","kde","support","bandwidth","kernel","Error","randomLCG","lcg","seed","randomLogNormal","lognormal","randomMixture","mixture","dists","weights","m","sum","distributions","randomNormal","randomUniform","uniform","regressionExp","YL","XYL","ly","xy","c0","c1","regressionLinear","regressionLoess","loess","bw","yhat","residuals","robustWeights","fill","iter","maxiters","interval","i0","i1","W","denom","edge","xk","yk","xkw","val","left","right","medianResidual","median","epsilon","arg","out","cnt","prev","push","regressionLog","regressionPoly","poly","order","lhs","rhs","l","regressionPow","YS","lx","regressionQuad","sampleCurve","minSteps","maxSteps","minX","maxX","next","p0","p1","sx","ymin","ymax","pm","atan2","a0","sy","a1","pop","setRandom","Object","defineProperty"]
}
