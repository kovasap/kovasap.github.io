{"version":3,"sources":["clojure/core/rrb_vector/nodes.cljs"],"mappings":"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","names":["clojure.core.rrb-vector.nodes/empty-node","cljs.core/PersistentVector","clojure.core.rrb-vector.nodes/clone","shift","node","cljs.core/VectorNode","cljs.core/aclone","clojure.core.rrb-vector.nodes/regular?","clojure.core.rrb-vector.nodes/node-ranges","clojure.core.rrb-vector.nodes/last-range","rngs","i","clojure.core.rrb-vector.nodes/regular-ranges","cnt","step","r","clojure.core.rrb-vector.nodes/overflow?","root","slc","and__4251__auto__","or__4253__auto__","clojure.core.rrb-vector.nodes/index-of-0","arr","l","h","mid","clojure.core.rrb-vector.nodes/index-of-nil","clojure.core.rrb-vector.nodes/first-child","clojure.core.rrb-vector.nodes/last-child","clojure.core.rrb-vector.nodes/remove-leftmost-child","parent","r?","new-arr","js/Array","cljs.core/array-copy","rng0","new-rngs","lim","cljs.core/->VectorNode","clojure.core.rrb-vector.nodes/replace-leftmost-child","pcnt","child","d","ncnt","li","clojure.core.rrb-vector.nodes/replace-rightmost-child","j","clojure.core.rrb-vector.nodes/new-path*","reg?","len","G__83138","ret","a","e","clojure.core.rrb-vector.nodes/fold-tail","tail","tlen","cret","G__83140","G__83141","G__83142","G__83143","cljs.core/mod"],"sourcesContent":[";   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.core.rrb-vector.nodes\n  (:refer-clojure :exclude [clone]))\n\n;;; node ops\n\n(def empty-node cljs.core.PersistentVector.EMPTY_NODE)\n\n(defn clone [shift node]\n  (VectorNode. (.-edit node) (aclone (.-arr node))))\n\n(defn regular? [node]\n  (not (== (alength (.-arr node)) 33)))\n\n;;; ranges\n\n(defn node-ranges [node]\n  (aget (.-arr node) 32))\n\n(defn last-range [node]\n  (let [rngs (node-ranges node)\n        i    (dec (aget rngs 32))]\n    (aget rngs i)))\n\n(defn regular-ranges [shift cnt]\n  (let [step (bit-shift-left 1 shift)\n        rngs (make-array 33)]\n    (loop [i 0 r step]\n      (if (< r cnt)\n        (do (aset rngs i r)\n            (recur (inc i) (+ r step)))\n        (do (aset rngs i cnt)\n            (aset rngs 32 (inc i))\n            rngs)))))\n\n;;; root overflow\n\n(defn overflow? [root shift cnt]\n  (if (regular? root)\n    (> (bit-shift-right cnt 5)\n       (bit-shift-left 1 shift))\n    (let [rngs (node-ranges root)\n          slc  (aget rngs 32)]\n      (and (== slc 32)\n           (or (== shift 5)\n               (recur (aget (.-arr root) (dec slc))\n                      (- shift 5)\n                      (+ (- (aget rngs 31) (aget rngs 30)) 32)))))))\n\n;;; find nil / 0\n\n(defn index-of-0 [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (zero? (int (aget arr l)))\n        l\n        (if (zero? (int (aget arr h)))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (zero? (int (aget arr mid)))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n(defn index-of-nil ^long [arr]\n  (loop [l 0 h 31]\n    (if (>= l (dec h))\n      (if (nil? (aget arr l))\n        l\n        (if (nil? (aget arr h))\n          h\n          32))\n      (let [mid (+ l (bit-shift-right (- h l) 1))]\n        (if (nil? (aget arr mid))\n          (recur l mid)\n          (recur (inc mid) h))))))\n\n;;; children\n\n(defn first-child [node]\n  (aget (.-arr node) 0))\n\n(defn last-child [node]\n  (let [arr (.-arr node)]\n    (if (regular? node)\n      (aget arr (dec (index-of-nil arr)))\n      (aget arr (dec (aget (node-ranges node) 32))))))\n\n(defn remove-leftmost-child [shift parent]\n  (let [arr (.-arr parent)]\n    (if (nil? (aget arr 1))\n      nil\n      (let [r?      (regular? parent)\n            new-arr (make-array (if r? 32 33))]\n        (array-copy arr 1 new-arr 0 31)\n        (if-not r?\n          (let [rngs     (node-ranges parent)\n                rng0     (aget rngs 0)\n                new-rngs (make-array 33)\n                lim      (aget rngs 32)]\n            (array-copy rngs 1 new-rngs 0 (dec lim))\n            (loop [i 0]\n              (when (< i lim)\n                (aset new-rngs i (- (aget new-rngs i) rng0))\n                (recur (inc i))))\n            (aset new-rngs 32 (dec (aget rngs 32)))\n            (aset new-rngs (dec (aget rngs 32)) 0)\n            (aset new-arr 32 new-rngs)))\n        (->VectorNode (.-edit parent) new-arr)))))\n\n(defn replace-leftmost-child [shift parent pcnt child d]\n  (if (regular? parent)\n    (let [step (bit-shift-left 1 shift)\n          rng0 (- step d)\n          ncnt (- pcnt d)\n          li   (bit-and (bit-shift-right shift (dec pcnt)) 0x1f)\n          arr      (.-arr parent)\n          new-arr  (make-array 33)\n          new-rngs (make-array 33)]\n      (aset new-arr 0 child)\n      (array-copy arr 1 new-arr 1 li)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs 0 rng0)\n      (aset new-rngs li ncnt)\n      (aset new-rngs 32 (inc li))\n      (loop [i 1]\n        (when (<= i li)\n          (aset new-rngs i (+ (aget new-rngs (dec i)) step))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))\n    (let [new-arr  (aclone (.-arr parent))\n          rngs     (node-ranges parent)\n          new-rngs (make-array 33)\n          li       (dec (aget rngs 32))]\n      (aset new-rngs 32 (aget rngs 32))\n      (aset new-arr 32 new-rngs)\n      (aset new-arr 0 child)\n      (loop [i 0]\n        (when (<= i li)\n          (aset new-rngs i (- (aget rngs i) d))\n          (recur (inc i))))\n      (->VectorNode nil new-arr))))\n\n(defn replace-rightmost-child [shift parent child d]\n  (if (regular? parent)\n    (let [arr (.-arr parent)\n          i   (dec (index-of-nil arr))]\n      (if (regular? child)\n        (let [new-arr (aclone arr)]\n          (aset new-arr i child)\n          (->VectorNode nil new-arr))\n        (let [arr     (.-arr parent)\n              new-arr (make-array 33)\n              step    (bit-shift-left 1 shift)\n              rngs    (make-array 33)]\n          (aset rngs 32 (inc i))\n          (aset new-arr 32 rngs)\n          (array-copy arr 0 new-arr 0 i)\n          (aset new-arr i child)\n          (loop [j 0 r step]\n            (when (<= j i)\n              (aset rngs j r)\n              (recur (inc j) (+ r step))))\n          (aset rngs i (last-range child))\n          (->VectorNode nil new-arr))))\n    (let [rngs     (node-ranges parent)\n          new-rngs (aclone rngs)\n          i        (dec (aget rngs 32))\n          new-arr  (aclone (.-arr parent))]\n      (aset new-arr i child)\n      (aset new-arr 32 new-rngs)\n      (aset new-rngs i (+ (aget rngs i) d))\n      (->VectorNode nil new-arr))))\n\n;;; fold-tail\n\n(defn new-path* [shift node]\n  (let [reg? (== 32 (alength (.-arr node)))\n        len  (if reg? 32 33)\n        arr  (make-array len)\n        rngs (if-not reg?\n               (doto (make-array 33)\n                 (aset 0 (alength (.-arr node)))\n                 (aset 32 1)))\n        ret  (->VectorNode nil arr)]\n    (loop [arr arr shift shift]\n      (if (== shift 5)\n        (do (if-not reg?\n              (aset arr 32 rngs))\n            (aset arr 0 node))\n        (let [a (make-array len)\n              e (->VectorNode nil a)]\n          (aset arr 0 e)\n          (if-not reg?\n            (aset arr 32 rngs))\n          (recur a (- shift 5)))))\n    ret))\n\n(defn fold-tail [node shift cnt tail]\n  (let [tlen     (alength tail)\n        reg?     (and (regular? node) (== tlen 32))\n        arr      (.-arr node)\n        li       (index-of-nil arr)\n        new-arr  (make-array (if reg? 32 33))\n        rngs     (if-not (regular? node) (node-ranges node))\n        cret     (if (== shift 5)\n                   (->VectorNode nil tail)\n                   (fold-tail (aget arr (dec li))\n                              (- shift 5)\n                              (if (regular? node)\n                                (mod cnt (bit-shift-left 1 shift))\n                                (let [li (dec (aget rngs 32))]\n                                  (if (pos? li)\n                                    (- (aget rngs li) (aget rngs (dec li)))\n                                    (aget rngs 0))))\n                              tail))\n        new-rngs (if-not reg?\n                   (if rngs\n                     (aclone rngs)\n                     (regular-ranges shift cnt)))]\n    (when-not (and (or (nil? cret) (== shift 5)) (== li 32))\n      (array-copy arr 0 new-arr 0 li)\n      (when-not reg?\n        (if (or (nil? cret) (== shift 5))\n          (do (aset new-rngs li\n                    (+ (if (pos? li)\n                         (aget new-rngs (dec li))\n                         (int 0))\n                       tlen))\n              (aset new-rngs 32 (inc li)))\n          (do (when (pos? li)\n                (aset new-rngs (dec li)\n                      (+ (aget new-rngs (dec li)) tlen)))\n              (aset new-rngs 32 li))))\n      (if-not reg?\n        (aset new-arr 32 new-rngs))\n      (if (nil? cret)\n        (aset new-arr li (new-path* (- shift 5) (->VectorNode nil tail)))\n        (aset new-arr (if (== shift 5) li (dec li)) cret))\n      (->VectorNode nil new-arr))))\n"]}