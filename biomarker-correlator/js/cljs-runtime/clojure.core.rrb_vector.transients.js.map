{"version":3,"sources":["clojure/core/rrb_vector/transients.cljs"],"mappings":"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","names":["clojure.core.rrb-vector.transients/ensure-editable","edit","node","new-arr","cljs.core/aclone","cljs.core/VectorNode","clojure.core.rrb-vector.transients/editable-root","root","clojure.core.rrb-vector.transients/editable-tail","tail","ret","cljs.core/array-copy","clojure.core.rrb-vector.transients/push-tail!","shift","cnt","root-edit","current-node","tail-node","clojure.core.rrb-vector.nodes/regular?","n","arr","subidx","child","clojure.core.rrb-vector.trees/new-path","editable-child","rngs","clojure.core.rrb-vector.nodes/node-ranges","li","cret","ccnt","clojure.core.rrb-vector.nodes/overflow?","G__83267","G__83268","G__83269","G__83270","G__83271","msg","data","cljs.core.ex_info","clojure.core.rrb-vector.transients/pop-tail!","G__83272","G__83273","G__83274","G__83275","child-cnt","new-child","G__83281","G__83282","G__83283","G__83284","rng","clojure.core.rrb-vector.nodes/last-range","diff","clojure.core.rrb-vector.transients/do-assoc!","i","val","G__83291","G__83292","G__83293","G__83294","G__83295"],"sourcesContent":[";   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns clojure.core.rrb-vector.transients\n  (:refer-clojure :exclude [new-path])\n  (:require [clojure.core.rrb-vector.nodes\n             :refer [regular? clone node-ranges last-range overflow?]]\n            [clojure.core.rrb-vector.trees :refer [new-path]]))\n\n(defn ensure-editable [edit node]\n  (if (identical? (.-edit node) edit)\n    node\n    (let [new-arr (aclone (.-arr node))]\n      (if (== 33 (alength new-arr))\n        (aset new-arr 32 (aclone (aget new-arr 32))))\n      (VectorNode. edit new-arr))))\n\n(defn editable-root [root]\n  (let [new-arr (aclone (.-arr root))]\n    (if (== 33 (alength new-arr))\n      (aset new-arr 32 (aclone (aget new-arr 32))))\n    (VectorNode. (js-obj) new-arr)))\n\n(defn editable-tail [tail]\n  (let [ret (make-array 32)]\n    (array-copy tail 0 ret 0 (alength tail))\n    ret))\n\n;; Note 1: This condition check and exception are a little bit closer\n;; to the source of the cause for what was issue CRRBV-20, added in\n;; case there is still some remaining way to cause this condition to\n;; occur.\n\n;; Note 2: In the worst case, when the tree is nearly full, calling\n;; overflow? here takes run time O(tree_depth^2) here.  That could be\n;; made O(tree_depth).  One way would be to call push-tail! in hopes\n;; that it succeeds, but return some distinctive value indicating a\n;; failure on the full condition, and create the node via a new-path\n;; call at most recent recursive push-tail! call that has an empty\n;; slot available.\n(defn push-tail! [shift cnt root-edit current-node tail-node]\n  (let [ret (ensure-editable root-edit current-node)]\n    (if (regular? ret)\n      (do (loop [n ret shift shift]\n            (let [arr    (.-arr n)\n                  subidx (bit-and (bit-shift-right (dec cnt) shift) 0x1f)]\n              (if (== shift 5)\n                (aset arr subidx tail-node)\n                (let [child (aget arr subidx)]\n                  (if (nil? child)\n                    (aset arr subidx\n                          (new-path (.-arr tail-node)\n                                    root-edit\n                                    (- shift 5)\n                                    tail-node))\n                    (let [editable-child (ensure-editable root-edit child)]\n                      (aset arr subidx editable-child)\n                      (recur editable-child (- shift 5))))))))\n          ret)\n      (let [arr  (.-arr ret)\n            rngs (node-ranges ret)\n            li   (dec (aget rngs 32))\n            cret (if (== shift 5)\n                   nil\n                   (let [child (ensure-editable root-edit (aget arr li))\n                         ccnt  (+ (if (pos? li)\n                                    (- (aget rngs li) (aget rngs (dec li)))\n                                    (aget rngs 0))\n                                  ;; add 32 elems to account for the\n                                  ;; new full tail we plan to add to\n                                  ;; the subtree.\n                                  32)]\n                     ;; See Note 2\n                     (if-not (overflow? child (- shift 5) ccnt)\n                       (push-tail! (- shift 5) ccnt root-edit\n                                   child\n                                   tail-node))))]\n        (if cret\n          (do (aset arr  li cret)\n              (aset rngs li (+ (aget rngs li) 32))\n              ret)\n          (do (when (>= li 31)\n                ;; See Note 1\n                (let [msg (str \"Assigning index \" (inc li) \" of vector\"\n                               \" object array to become a node, when that\"\n                               \" index should only be used for storing\"\n                               \" range arrays.\")\n                      data {:shift shift, :cnd cnt,\n                            :current-node current-node,\n                            :tail-node tail-node, :rngs rngs, :li li,\n                            :cret cret}]\n                  (throw (ex-info msg data))))\n              (aset arr (inc li)\n                    (new-path (.-arr tail-node)\n                              root-edit\n                              (- shift 5)\n                              tail-node))\n              (aset rngs (inc li) (+ (aget rngs li) 32))\n              (aset rngs 32 (inc (aget rngs 32)))\n              ret))))))\n\n(defn pop-tail! [shift cnt root-edit current-node]\n  (let [ret (ensure-editable root-edit current-node)]\n    (if (regular? ret)\n      (let [subidx (bit-and (bit-shift-right (- cnt 2) shift) 0x1f)]\n        (cond\n          (> shift 5)\n          (let [child (pop-tail! (- shift 5) cnt root-edit\n                                 (aget (.-arr ret) subidx))]\n            (if (and (nil? child) (zero? subidx))\n              nil\n              (let [arr (.-arr ret)]\n                (aset arr subidx child)\n                ret)))\n\n          (zero? subidx)\n          nil\n\n          :else\n          (let [arr (.-arr ret)]\n            (aset arr subidx nil)\n            ret)))\n      (let [rngs   (node-ranges ret)\n            subidx (dec (aget rngs 32))]\n        (cond\n          (> shift 5)\n          (let [child     (aget (.-arr ret) subidx)\n                child-cnt (if (zero? subidx)\n                            (aget rngs 0)\n                            (- (aget rngs subidx) (aget rngs (dec subidx))))\n                new-child (pop-tail! (- shift 5) child-cnt root-edit child)]\n            (cond\n              (and (nil? new-child) (zero? subidx))\n              nil\n\n              (regular? child)\n              (let [arr (.-arr ret)]\n                (aset rngs subidx (- (aget rngs subidx) 32))\n                (aset arr  subidx new-child)\n                (if (nil? new-child)\n                  (aset rngs 32 (dec (aget rngs 32))))\n                ret)\n\n              :else\n              (let [rng  (last-range child)\n                    diff (- rng (if new-child (last-range new-child) 0))\n                    arr  (.-arr ret)]\n                (aset rngs subidx (- (aget rngs subidx) diff))\n                (aset arr  subidx new-child)\n                (if (nil? new-child)\n                  (aset rngs 32 (dec (aget rngs 32))))\n                ret)))\n\n          (zero? subidx)\n          nil\n\n          :else\n          (let [arr   (.-arr ret)\n                child (aget arr subidx)]\n            (aset arr  subidx nil)\n            (aset rngs subidx 0)\n            (aset rngs 32     (dec (aget rngs 32)))\n            ret))))))\n\n(defn do-assoc! [shift root-edit current-node i val]\n  (let [ret (ensure-editable root-edit current-node)]\n    (if (regular? ret)\n      (loop [shift shift\n             node  ret]\n        (if (zero? shift)\n          (let [arr (.-arr node)]\n            (aset arr (bit-and i 0x1f) val))\n          (let [arr    (.-arr node)\n                subidx (bit-and (bit-shift-right i shift) 0x1f)\n                child  (ensure-editable root-edit (aget arr subidx))]\n            (aset arr subidx child)\n            (recur (- shift 5) child))))\n      (let [arr    (.-arr ret)\n            rngs   (node-ranges ret)\n            subidx (bit-and (bit-shift-right i shift) 0x1f)\n            subidx (loop [subidx subidx]\n                     (if (< i (int (aget rngs subidx)))\n                       subidx\n                       (recur (inc subidx))))\n            i      (if (zero? subidx) i (- i (aget rngs (dec subidx))))]\n        (aset arr subidx\n              (do-assoc! (- shift 5) root-edit (aget arr subidx) i val))))\n    ret))\n"]}