{"version":3,"sources":["kixi/stats/digest.cljc"],"mappings":";AAiCA,gCAAA,hCAAMA,wEACHC,GAAGC;AADN,AAEE;;;AAAA,AAAA,0FAAA,IAAA,IAAA,IAAA,IAAA,IAAA;;6BAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAgBKI;SAhBL,AAAAH,4CAAAD,WAAA,IAAA,hEAgBOK;SAhBP,AAAAJ,4CAAAD,WAAA,IAAA,hEAgBUM;UAhBV,AAAAL,4CAAAD,WAAA,IAAA,jEAgBaO;UAhBb,AAAAN,4CAAAD,WAAA,IAAA,jEAgBiBQ;WAhBjB,AAAAP,4CAAAD,WAAA,IAAA,lEAgBqBS;AAhBrB,AAAA,kDAAA,gDAAA,0DAAA,2DAAA,2DAAA,0DAAA,5OAiBOL,yDACIC,2DACAC,yDACAG,2DACAF,yDACAC;;6BAtBXN,SAEmFS;AAFnF,AAAA,IAAAR,aAAAD;QAAA,AAAAD,4CAAAE,WAAA,IAAA,/DAEaC;SAFb,AAAAH,4CAAAE,WAAA,IAAA,hEAEuBE;SAFvB,AAAAJ,4CAAAE,WAAA,IAAA,hEAEkCG;UAFlC,AAAAL,4CAAAE,WAAA,IAAA,jEAE6CI;UAF7C,AAAAN,4CAAAE,WAAA,IAAA,jEAEyDK;WAFzD,AAAAP,4CAAAE,WAAA,IAAA,lEAEqEM;UAFrEN,NAE8EO;AAF9E,AAGG,IAAME,IAAE,CAACf,mCAAAA,sCAAAA,LAAGc,kBAAAA;IACNE,IAAE,CAACf,mCAAAA,sCAAAA,LAAGa,kBAAAA;AADZ,AAEE,GAAI,EAAI,MAAA,LAAMC,gBAAG,MAAA,LAAMC;AACrBH;;AACA,IAAME,QAAYA;IACZC,QAAYA;IACZC,iBAAI,KAAA,JAAKV;IACTW,kBAAI,CAAGV,KAAG,CAAG,CAAGO,QAAEP,MAAIS;IACtBE,kBAAI,CAAGV,KAAG,CAAG,CAAGO,QAAEP,MAAIQ;AAJ5B,AAAA,0FAKGA,eAAGC,gBAAIC,gBACP,CAAGT,MAAK,CAAG,CAAGK,QAAEG,mBAAK,CAAGH,QAAEP,MAC1B,CAAGG,MAAK,CAAG,CAAGK,QAAEG,mBAAK,CAAGH,QAAEP,MAC1B,CAAGG,OAAK,CAAG,CAAGG,QAAEG,mBAAK,CAAGF,QAAEP;;;oBAfpCJ,SAEmFS;;;;;6BAFnFT;;6BAAAA,SAEmFS","names":["kixi.stats.digest/sum-squares","fx","fy","p__82140","vec__82177","cljs.core.nth","p__82139","vec__82144","c","mx","my","ssx","ssy","ssxy","acc","e","x","y","c'","mx'","my'"],"sourcesContent":["(ns kixi.stats.digest\n  (:require [kixi.stats.distribution])\n  #?(:clj (:import [com.tdunning.math.stats TDigest])))\n\n#?(:clj\n   (defn ^:no-doc nan->nil [n]\n     (when-not (or (.isNaN n) (.isInfinite n)) n)))\n\n#?(:clj\n   (defn t-digest\n     \"Return a reducing function which uses the t-digest to summarize a seq\"\n     [{:keys [compression] :or {compression 100} :as opts}]\n     (fn\n       ([] (TDigest/createAvlTreeDigest compression))\n       ([^TDigest digest x]\n        (when (number? x) (.add digest x 1))\n        digest)\n       ([^TDigest digest]\n        (reify\n          clojure.lang.Counted\n          (count [_]\n            (.size digest))\n          kixi.stats.protocols.PBounded\n          (minimum [_]\n            (nan->nil (.getMin digest)))\n          (maximum [_]\n            (nan->nil (.getMax digest)))\n          kixi.stats.protocols.PQuantile\n          (cdf [_ x]\n            (nan->nil (.cdf digest x)))\n          (quantile [_ q]\n            (nan->nil (.quantile digest q))))))))\n\n(defn sum-squares\n  [fx fy]\n  (fn\n    ([] [0.0 0.0 0.0 0.0 0.0 0.0])\n    ([[^double c ^double mx ^double my ^double ssx ^double ssy ^double ssxy :as acc] e]\n     (let [x (fx e)\n           y (fy e)]\n       (if (or (nil? x) (nil? y))\n         acc\n         (let [x   (double x)\n               y   (double y)\n               c'  (inc c)\n               mx' (+ mx (/ (- x mx) c'))\n               my' (+ my (/ (- y my) c'))]\n           [c' mx' my'\n            (+ ssx  (* (- x mx') (- x mx)))\n            (+ ssy  (* (- y my') (- y my)))\n            (+ ssxy (* (- x mx') (- y my)))]))))\n    ([[c mx my ssx ssy ssxy]]\n     {:n c\n      :x-bar mx\n      :y-bar my\n      :ss-xy ssxy\n      :ss-x  ssx\n      :ss-y  ssy})))\n"]}