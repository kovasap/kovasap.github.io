{"version":3,"sources":["kixi/stats/test.cljc"],"mappings":";AAMA,AAAKA,0BAAQC;AACb,AAAKC,qCAAaC;AAElB,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,yEAAAC,zEAAWwE;;AAAX,CAAA,AAAA,wFAAA,xFAAWA,mGAECW;;AAFZ,AAAA,gBAAA,ZAEYA;AAFZ,AAGI,QAACvF,wDAAAA,6EAAAA,vBAAQuF,yDAAAA,/CAAKzE,yDAAAA;;;AAHlB,CAAA,AAAA,wFAAA,xFAAW8D,mGAICW,MAAKC;;AAJjB,AAAA,gBAAA,ZAIYD;AAJZ,AAKI,oBAAM,iBAAAE,oBAAK7E;AAAL,AAAA,oBAAA6E;AAAA,IAAAA,wBAAe5E;AAAf,AAAA,oBAAA4E;AAA4BD;;AAA5BC;;;AAAAA;;;AAAN,AACE,IAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAA/E,oBAAA,AAAA+E,aAAA;AAAA,AAAA,QAAAA;KAAA;AACM,OAACE,sBAAM,CAAA,MAAK,iBAAAC,WAAOhF;IAAPiF,WAAoB,GAAG,AAACE,oBAAIpF;AAA5B,AAAA,8HAAAiF,SAAAC,kDAAAD,SAAAC,1LAACC,4DAAAA,+EAAAA;MAAb,IAAA;;;KADN;AAEM,QAACA,4DAAAA,kGAAAA,xCAAMlF,8EAAAA,1DAAaD,8EAAAA;;;KAF1B;AAGM,QAAA,MAAK,CAACmF,4DAAAA,kGAAAA,xCAAMlF,8EAAAA,1DAAaD,8EAAAA;;;;AAH/B,MAAA,KAAA+E,MAAA,CAAA,mEAAAD;;;;AADF;;;;AALJ,CAAA,AAAA,mGAAA,nGAAWd,8GAUMW,MAAKU;;AAVtB,AAAA,gBAAA,ZAUiBV;AAVjB,AAWI,IAAAW,WAAA,mFAAeX,UAAKU,MAAMnF;AAA1B,AAAA,4IAAAoF,yDAAAA,7LAAChG,mEAAAA,6EAAAA;;;AAXL,CAAA,AAAA,mGAAA,nGAAW0E,8GAYMW,MAAKU,MAAMT;;AAZ5B,AAAA,gBAAA,ZAYiBD;AAZjB,AAaI,oBAAM,iBAAAE,oBAAK7E;AAAL,AAAA,oBAAA6E;AAAA,IAAAA,wBAAe5E;AAAf,AAAA,oBAAA4E;AAAA,IAAAA,wBAA4BQ;AAA5B,AAAA,oBAAAR;AAAkCD;;AAAlCC;;;AAAAA;;;AAAAA;;;AAAN,AACE,IAAMU,WAAS,AAACC,qEAAiBvF,oBAAaoF,MAAMT;AAApD,AACE,IAAAa,WAAMb;IAANa,eAAA,EAAA,CAAAA,oBAAA1F,oBAAA,AAAA0F,aAAA;AAAA,AAAA,QAAAA;KAAA;AACM,QAAG,AAACL,oBAAIpF,oBAAWuF;;;KADzB;AAEM,QAAGvF,mBAAUuF;;;KAFnB;AAGM,QAAGvF,mBAAUuF;;;;AAHnB,MAAA,KAAAR,MAAA,CAAA,mEAAAU;;;;AAFJ;;;;AAbJ,CAAA,AAAA,yEAAA,WAAAhG,mBAAAC,vGAAWsE;;AAAX,AAAA,IAAAvE,yBAAA;AAAA,AAAA,OAAAA,8DAAAC,gBAAA;;;AAAA,CAAA,AAAA,yEAAA,WAAAC,mBAAAC,OAAAC,9GAAWmE;;AAAX,AAAA,IAAArE,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAE;;;KAAA;AAAAC;;;KAAA;AAAAC;;;;AAAA,OAAAC,4CAAAC,gBAAAR,OAAAC;;;;;AAAA,CAAA,AAAA,8EAAA,WAAAQ,mBAAAC,gBAAAC,5HAAWyD;;AAAX,AAAA,IAAA3D,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,0BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,qFAAA,WAAAU,mBAAAC,qBAAAC,xIAAW+C;;AAAX,AAAA,IAAAjD,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,+BAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,+DAAAtB,kBAAA,OAAA,KAAAsB,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,qEAAArB,qBAAA,OAAA,KAAAqB,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,kDAAApB,WAAA,eAAAE;;;AAAA,CAAA,AAAA,6EAAA,WAAAmB,xFAAWyC;;AAAX,AAAA,IAAAzC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,+DAAA,qEAAA,0DAAA,kBAAAnB,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,qEAAA,WAAAC,hFAAWqC;;AAAX,AAAA,IAAArC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,2EAAA,WAAAC,tFAAWmC;;AAAX,AAAA,IAAAnC,yBAAA;AAAA,AAAA,uCAAA7B,iBAAAC,oBAAAC,UAAA0B,cAAAxB,gBAAA0B,xGAAWkC;;;AAAX,CAAA,AAAA,yEAAA,WAAAjC,pFAAWiC;;AAAX,AAAA,IAAAjC,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,qEAAA,WAAA6B,hFAAW+B;;AAAX,AAAA,IAAA/B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,cAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,uEAAA,WAAAG,UAAAC,5FAAW0B;;AAAX,AAAA,IAAA3B,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAAC,6CAAA,AAAAF,wBAAA,AAAAC,2BAAA,EAAA,AAAAC,6CAAA,AAAAF,2BAAA,AAAAC,8BAAA,EAAA,AAAAC,6CAAA,AAAAF,iBAAA,AAAAC,oBAAA,AAAAC,6CAAA,AAAAF,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,sEAAA,WAAAE,mBAAAC,pGAAWuB;;AAAX,AAAA,IAAAxB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,oEAAA,0EAAA,sEAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAZ,eAAAa;;AAAA,uCAAAzC,iBAAAC,oBAAAC,UAAA0B,cAAA,AAAAkB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,7LAAWuB;;;;AAAX,CAAA,AAAA,2FAAA,WAAAjB,mBAAAnD,zHAAWoE;;AAAX,AAAA,IAAAjB,yBAAA;AAAA,AAAA,IAAAC,WAAApD;IAAAoD,eAAA,EAAA,CAAAA,oBAAAjD,oBAAA,AAAAiD,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAtC,gBAAAR;;;;;AAAA,CAAA,AAAA,6EAAA,WAAAqD,mBAAAC,gBAAA3B,3HAAWyC;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,+DAAAE,eAAAF,sBAAA,+DAAAE;AAAA,uCAAA9B,SAAAtB,oBAAAC,UAAA0B,cAAAxB,gBAAA,hGAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,qEAAAE,eAAAF,sBAAA,qEAAAE;AAAA,uCAAArD,iBAAAuB,SAAArB,UAAA0B,cAAAxB,gBAAA,7FAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,kDAAAE,eAAAF,sBAAA,kDAAAE;AAAA,uCAAArD,iBAAAC,oBAAAsB,SAAAK,cAAAxB,gBAAA,vGAAW4D;;AAAX,uCAAAhE,iBAAAC,oBAAAC,UAAA0B,cAAA,AAAA0B,8CAAAlD,gBAAA8C,gBAAA3B,UAAA,hLAAWyC;;;;;;AAAX,CAAA,AAAA,uEAAA,WAAAT,lFAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAnC,+CAAA,mFAAA,KAAAoC,mBAAA,+DAAAzD,iBAAA,OAAA,KAAAyD,mBAAA,qEAAAxD,oBAAA,OAAA,KAAAwD,mBAAA,kDAAAvD,UAAA,eAAAE;;;AAAA,CAAA,AAAA,8EAAA,WAAAsD,mBAAAnC,5GAAWyC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,uCAAA1D,iBAAAC,oBAAAC,UAAAqB,SAAAnB,gBAAA0B,nGAAWkC;;;AAAX,CAAA,AAAA,2EAAA,WAAAL,mBAAAC,zGAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,kEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,sCAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,4CAAA;;AAAA,CAAA,AAAAA,iDAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,6BAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,oDAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;kCAAA,lCAAWM,4EAAYzE,UAAUC,aAAaC;AAA9C,AAAA,YAAA8D,qDAAA,KAAA,KAAA,pCAAuBhE,UAAUC,aAAaC;;;AAA9C;;;qCAAA,6CAAAmE,lFAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA5B,sDAAA0B,SAAA,iHAAA,qEAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAxB,6CAAA,mCAAA0B;;AAAAA;;;AAAA,AAAA,YAAAP,2BAAA,AAAA,6FAAAK,UAAA,AAAA,mGAAAA,UAAA,AAAA,gFAAAA,UAAA,KAAA,AAAAvB,oBAAAwB,sBAAA;;;AAAAN,AAoBA,AAAA,8BAAA,sCAAA0B,pEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAb,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4DAAA,5DAAMa,uEACF5F,UAAUC;AADd,AAEG,wFAAA,jFAAC4F,0DAAY7F,UAAUC;;;AAF1B,CAAA,4DAAA,5DAAM2F,uEAGF5F,UAAUC,aAAa2E;AAH3B,AAIG,OAACH,gCAAazE,UAAUC,aAAa2E;;;AAJxC,CAAA,sDAAA,tDAAMgB;;AAAN,AAMA;;;;mCAAA,nCAAME,8EAGqCC;AAH3C,AAIE,IAAMC,UAAQ,AAACC,mCAAgBF;IACzBG,OAAK,AAACC,0BAAOJ;IACbK,UAAQ,AAACpE,gBAAMkE;IACfG,QAAM,AAACC,oBAAI,AAACC,iCAAcR,OAAO,WAAA,VAAKK;IACtCI,MAAI,+HAAA,/HAACC,8CAAMC,YAAE,AAACD,8CAAME,iBAAET,UAAQ,AAACU,4CAAIC,cAAIX;IACvCY,OAEU,AAACtG,+CAAO,eAAA4G,JAAKE;AAAL,AAAA,IAAAD,aAAAD;aAAA,AAAAvG,4CAAAwG,WAAA,IAAA,pEAAUE;aAAV,AAAA1G,4CAAAwG,WAAA,IAAA,pEAAiBG;AAAjB,AACE,IAAMC,OAAK,AAACC,0BAAO3B,MAAMwB;IACnBI,IAAE,CAAG,AAAClB,8CAAME,iBAAEa,UAAQnB;AAD5B,AAEE,QAAGiB,MAAI,CAAG,AAACM,mBAAG,CAAGD,IAAEF,SAAOE;mJALtC,AAAClB,8CAAMM,6CAAkBf,vOACzB,AAACY,4CAAI,AAACI,gDAAQC,gBAAMC,cAAIC,9HACxB;AAPhB,AAYE,kNAAA,3MAACtB,0DAAYiB,KAAK,oCAAA,2CAAA,/EAACe,+HAAkBrB;;AAEzC;;;;;;;;gCAAA,wCAAAsB,SAAAC,jFAAMI;AAAN,AAAA,IAAAH,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAA7H,4CAAA6H,eAAA,hEAOWI;SAPX,AAAAjI,4CAAA6H,eAAA,hEAOcK;IAPdH,aAAAH;IAAAG,iBAAA,AAAAD,4BAAAC;WAAA,AAAA/H,4CAAA+H,eAAA,lEAO2BI;QAP3B,AAAAnI,4CAAA+H,eAAA,/DAOgCK;AAPhC,AAQE,GAAM,EAAK,KAAA,JAAMA,cAAG,MAAA,LAAMF;AAA1B,AACE,IAAMG,IAAU,CAAG,CAAGF,OAAKF,MAAI,CAAGC,KAAG,AAACI,qBAAKF;AAA3C,AACE,OAAC1C,0DAAY2C,EAAE,+BAAA,2CAAA,6DAAA,IAAA,uDAAA,lMAACE;;AAFpB;;;AAIF;;;;;yBAAA,iCAAAC,SAAAC,nEAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAAZ,4BAAAY;aAAA,AAAA1I,4CAAA0I,eAAA,pEAIIG;WAJJ,AAAA7I,4CAAA0I,eAAA,lEAIiBI;UAJjB,AAAA9I,4CAAA0I,eAAA,jEAI0BK;IAJ1BJ,aAAAF;IAAAE,iBAAA,AAAAb,4BAAAa;aAAA,AAAA3I,4CAAA2I,eAAA,pEAKIK;WALJ,AAAAhJ,4CAAA2I,eAAA,lEAKiBM;UALjB,AAAAjJ,4CAAA2I,eAAA,jEAK0BO;AAL1B,AAME,IAAMC,QAAM,iBAAAzE,oBAAK,OAAA,NAAMqE;AAAX,AAAA,GAAArE;AAAA,IAAAA,wBAAgB,OAAA,NAAMwE;AAAtB,AAAA,GAAAxE;AACK,OAAC4D,qBAAK,CAAG,CAAG,AAACb,mBAAGqB,QAAMC,OACb,CAAG,AAACtB,mBAAGwB,QAAMC;;AAF3BxE;;;AAAAA;;;IAGN2D,IAAE,iBAAA3D,oBAAKyE;AAAL,AAAA,oBAAAzE;AAAA,IAAAA,wBACK,SAAA,RAAMyE;AADX,AAAA,GAAAzE;AAEa,QAAG,CAAGmE,SAAOG,UAAQG;;AAFlCzE;;;AAAAA;;;AAHR,AAME,oBAAM2D;AAAN,AACE,OAAC3C,0DAAY2C,EAAE,+BAAA,2CAAA,6DAAA,IAAA,uDAAA,lMAACE;;AADlB;;;AAGJ;;;;;yBAAA,iCAAAa,SAAAC,nEAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAAxB,4BAAAwB;aAAA,AAAAtJ,4CAAAsJ,eAAA,pEAIIG;WAJJ,AAAAzJ,4CAAAsJ,eAAA,lEAIiBI;UAJjB,AAAA1J,4CAAAsJ,eAAA,jEAI0BK;IAJ1BJ,aAAAF;IAAAE,iBAAA,AAAAzB,4BAAAyB;aAAA,AAAAvJ,4CAAAuJ,eAAA,pEAKIK;WALJ,AAAA5J,4CAAAuJ,eAAA,lEAKiBM;UALjB,AAAA7J,4CAAAuJ,eAAA,jEAK0BO;AAL1B,AAME,IAAMC,QAAM,iBAAArF,oBAAK,OAAA,NAAMiF;AAAX,AAAA,GAAAjF;AAAA,IAAAA,wBAAgB,OAAA,NAAMoF;AAAtB,AAAA,GAAApF;AACK,QAAG,CAAG,AAAC+C,mBAAGiC,QAAMC,OACb,CAAG,AAAClC,mBAAGoC,QAAMC;;AAFrBpF;;;AAAAA;;;IAGNsF,IAAE,iBAAAtF,oBAAKqF;AAAL,AAAA,oBAAArF;AACK,QAAG,CAAG+E,SAAOG,UACV,AAACtB,qBAAKyB;;AAFdrF;;;IAGF2B,MAAI,iBAAA3B,oBAAK,OAAA,NAAGiF;AAAR,AAAA,GAAAjF;AAAA,IAAAA,wBAAe,OAAA,NAAGoF;AAAlB,AAAA,GAAApF;AACK,QAAG,AAAC+C,mBAAGsC,SACJ,CAAG,CAAG,yBAAA,zBAAC5D,oBAAIuD,YAAQ,CAAA,CAAGC,MAAIA,OAAI,OAAA,NAAKA,eAChC,CAAG,yBAAA,zBAACxD,oBAAI0D,YAAQ,CAAA,CAAGC,MAAIA,OAAI,OAAA,NAAKA;;AAH3CpF;;;AAAAA;;;AANV,AAUE,oBAAM,iBAAAA,oBAAKsF;AAAL,AAAA,oBAAAtF;AAAO2B;;AAAP3B;;;AAAN,AACE,OAACgB,0DAAYsE,EAAE,0BAAA,2CAAA,rEAACC,kHAAQ5D;;AAD1B;;;AAGJ;;;;;;;;gCAAA,wCAAA6D,SAAAC,jFAAMG;AAAN,AAAA,IAAAF,aAAAF;IAAAE,iBAAA,AAAAtC,4BAAAsC;SAAA,AAAApK,4CAAAoK,eAAA,hEAOWnC;SAPX,AAAAjI,4CAAAoK,eAAA,hEAOclC;IAPdmC,aAAAF;IAAAE,iBAAA,AAAAvC,4BAAAuC;WAAA,AAAArK,4CAAAqK,eAAA,lEAO2BlC;QAP3B,AAAAnI,4CAAAqK,eAAA,/DAOgCjC;AAPhC,AAQE,IAAM/B,MAAI,KAAA,JAAK+B;IACT4B,IAAE,iBAAAtF,oBAAK,MAAA,LAAMwD;AAAX,AAAA,GAAAxD;AAAA,IAAAA,wBAAe,KAAA,JAAM0D;AAArB,AAAA,GAAA1D;AACa,QAAG,CAAGyD,OAAKF,MACR,CAAGC,KAAG,AAACI,qBAAKF;;AAF5B1D;;;AAAAA;;;AADR,AAIE,oBAAM,iBAAAA,oBAAKsF;AAAL,AAAA,oBAAAtF;AAAO,cAAA,NAAM2B;;AAAb3B;;;AAAN,AACE,OAACgB,0DAAYsE,EAAE,0BAAA,2CAAA,rEAACC,kHAAQ5D;;AAD1B","names":["kixi.stats.test/p-value","kixi.stats.protocols/p-value","kixi.stats.test/significant?","kixi.stats.protocols/significant?","cljs.core/PROTOCOL_SENTINEL","this__4502__auto__","k__4503__auto__","this__4504__auto__","k82200","else__4505__auto__","G__82235","cljs.core/Keyword","statistic","distribution","h1","cljs.core.get","__extmap","this__4522__auto__","f__4523__auto__","init__4524__auto__","cljs.core.reduce","ret__4525__auto__","p__82239","vec__82243","k__4526__auto__","cljs.core.nth","v__4527__auto__","this__4517__auto__","writer__4518__auto__","opts__4519__auto__","pr-pair__4520__auto__","keyval__4521__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__82199","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4500__auto__","__meta","this__4497__auto__","__hash","this__4506__auto__","cljs.core/count","this__4498__auto__","h__4360__auto__","coll__4499__auto__","cljs.core/hash-unordered-coll","this82201","other82202","cljs.core._EQ_","this__4512__auto__","k__4513__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4509__auto__","G__82314","this__4510__auto__","k__4511__auto__","pred__82316","cljs.core/keyword-identical?","expr__82317","cljs.core.assoc","this__4515__auto__","cljs.core/seq","cljs.core/MapEntry","this__4501__auto__","this__4507__auto__","entry__4508__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","kixi.stats.test/TestResult","this__4546__auto__","cljs.core/List","writer__4547__auto__","cljs.core/-write","G__82206","extmap__4542__auto__","G__82350","cljs.core/record?","kixi.stats.test/->TestResult","kixi.stats.test/map->TestResult","this","alternate","and__4251__auto__","G__82210","js/Error","kixi.stats.math/clamp","G__82211","G__82212","kixi.stats.distribution/cdf","kixi.stats.math/abs","alpha","G__82218","critical","kixi.stats.distribution.critical_value","G__82226","var_args","G__82363","kixi.stats.test/test-result","kixi.stats.test.test_result","kixi.stats.test/chi-squared-test","table","margins","kixi.stats.protocols/margin-totals","size","kixi.stats.protocols/size","factors","total","kixi.stats.math/pow","kixi.stats.protocols/grand-total","dof","cljs.core.apply","cljs.core/-","cljs.core/*","cljs.core.map","cljs.core/dec","stat","clojure.math.combinatorics/cartesian-product","cljs.core.partial","cljs.core/apply","cljs.core/map","cljs.core/vector","p__82373","vec__82374","acc","levels","counts","cell","kixi.stats.protocols/cell","e","kixi.stats.math/sq","kixi.stats.distribution/chi-squared","p__82402","p__82403","map__82404","cljs.core/--destructure-map","map__82405","kixi.stats.test/simple-z-test","mu","sd","mean","n","z","kixi.stats.math/sqrt","kixi.stats.distribution/normal","p__82424","p__82425","map__82427","map__82428","kixi.stats.test/z-test","mean-x","sd-x","n-x","mean-y","sd-y","n-y","sd-xy","p__82433","p__82434","map__82438","map__82439","kixi.stats.test/t-test","mean-a","sd-a","n-a","mean-b","sd-b","n-b","sd-ab","t","kixi.stats.distribution/t","p__82451","p__82452","map__82453","map__82454","kixi.stats.test/simple-t-test"],"sourcesContent":["(ns kixi.stats.test\n  (:require [kixi.stats.distribution :as d]\n            [kixi.stats.math :refer [abs clamp pow sq sqrt]]\n            [kixi.stats.protocols :as p]\n            [clojure.math.combinatorics :refer [cartesian-product]]))\n\n(def p-value p/p-value)\n(def significant? p/significant?)\n\n(defrecord TestResult [statistic distribution h1]\n  p/PTestResult\n  (p-value [this]\n    (p-value this h1))\n  (p-value [this alternate]\n    (when (and statistic distribution alternate)\n      (case alternate\n        :<> (clamp (* 2 (d/cdf distribution (- (abs statistic)))) 0.0 1.0)\n        :<  (d/cdf distribution statistic)\n        :>  (- 1 (d/cdf distribution statistic)))))\n  (significant? [this alpha]\n    (significant? [this alpha h1]))\n  (significant? [this alpha alternate]\n    (when (and statistic distribution alpha alternate)\n      (let [critical (d/critical-value distribution alpha alternate)]\n        (case alternate\n          :<> (> (abs statistic) critical)\n          :<  (< statistic critical)\n          :>  (> statistic critical))))))\n\n(defn test-result\n  ([statistic distribution]\n   (test-result statistic distribution :<>))\n  ([statistic distribution alternate]\n   (->TestResult statistic distribution alternate)))\n\n(defn chi-squared-test\n  \"Calculates the X^2 test of independence for a given contingency table.\n  See kixi.stats.core/cross-tabulate\"\n  [^kixi.stats.protocols.PContingencyTable table]\n  (let [margins (p/margin-totals table)\n        size (p/size table)\n        factors (count size)\n        total (pow (p/grand-total table) (dec factors))\n        dof (apply - (apply * size) 1 (map dec size))\n        stat (->> (apply cartesian-product margins)\n                  (map (partial apply map vector))\n                  (reduce (fn [acc [levels counts]]\n                            (let [cell (p/cell table levels)\n                                  e (/ (apply * counts) total)]\n                              (+ acc (/ (sq (- e cell)) e))))\n                          0))]\n    (test-result stat (d/chi-squared {:k dof}) :>)))\n\n(defn simple-z-test\n  \"Calculates the z-test of statistical significance for a sample mean.\n  mu: the population mean\n  sd: the population standard deviation\n  mean: the sample mean\n  n: the sample size\n  See also: kixi.stats.core/simple-z-test\"\n  [{:keys [mu sd]} {:keys [mean n]}]\n  (when (and (pos? n) (pos? sd))\n    (let [z (double (/ (- mean mu) (/ sd (sqrt n))))]\n      (test-result z (d/normal {:location 0.0 :scale 1.0})))))\n\n(defn z-test\n  \"Calculates the z-test of statistical significance between two sample means.\n  Requires the mean, sd and sample size (n) of both samples.\n  See also: kixi.stats.core/z-test\"\n  [{mean-x :mean sd-x :sd n-x :n}\n   {mean-y :mean sd-y :sd n-y :n}]\n  (let [sd-xy (and (pos? n-x) (pos? n-y)\n                   (sqrt (+ (/ (sq sd-x) n-x)\n                            (/ (sq sd-y) n-y))))\n        z (and sd-xy\n               (pos? sd-xy)\n               (double (/ (- mean-x mean-y) sd-xy)))]\n    (when z\n      (test-result z (d/normal {:location 0.0 :scale 1.0})))))\n\n(defn t-test\n  \"Calculates Welch's unequal variances t-test of statistical significance.\n  Requires the mean, sd and sample size (n) of both samples.\n  See also: kixi.stats.core/t-test\"\n  [{mean-a :mean sd-a :sd n-a :n}\n   {mean-b :mean sd-b :sd n-b :n}]\n  (let [sd-ab (and (pos? n-a) (pos? n-b)\n                   (+ (/ (sq sd-a) n-a)\n                      (/ (sq sd-b) n-b)))\n        t (and sd-ab\n               (/ (- mean-a mean-b)\n                  (sqrt sd-ab)))\n        dof (and (> n-a 1) (> n-b 1)\n                 (/ (sq sd-ab)\n                    (+ (/ (pow sd-a 4) (* n-a n-a (dec n-a)))\n                       (/ (pow sd-b 4) (* n-b n-b (dec n-b))))))]\n    (when (and t dof)\n      (test-result t (d/t {:v dof})))))\n \n(defn simple-t-test\n  \"Calculates the t-test of statistical significance for a sample mean.\n  mu: the population mean\n  sd: the population standard deviation\n  mean: the sample mean\n  n: the sample size\n  See also: kixi.stats.core/simple-t-test\"\n  [{:keys [mu sd]} {:keys [mean n]}]\n  (let [dof (dec n)\n        t (and (pos? sd) (pos? n)\n               (double (/ (- mean mu)\n                          (/ sd (sqrt n)))))]\n    (when (and t (pos? dof))\n      (test-result t (d/t {:v dof})))))\n"]}