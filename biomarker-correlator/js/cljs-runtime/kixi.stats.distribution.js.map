{"version":3,"sources":["kixi/stats/distribution.cljc"],"mappings":"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","names":["kixi.stats.distribution/next-rng","cljs.core.comp","cljs.core/first","clojure.test.check.random/split","p__81650","vec__81651","cljs.core.nth","kixi.stats.distribution/swap","coll","i1","i2","cljs.core.assoc","kixi.stats.distribution/rand-int","a","b","rng","r","clojure.test.check.random/rand-double","kixi.stats.distribution/rand-normal","vec__81654","r1","r2","kixi.stats.math/sqrt","kixi.stats.math/log","kixi.stats.math/cos","kixi.stats.math/PI","kixi.stats.distribution/btrd-f","k","G__81658","k'","k2'","kixi.stats.math/sq","kixi.stats.distribution/rand-binomial-btrd","n","p","G__81660","G__81661","G__81662","m","kixi.stats.math/floor","q","nr","npq","rnpq","c","alpha","vr","urvr","v","u","kixi.stats.math/abs","vec__81667","vec__81670","us","km","vec__81679","f","fx","x","i","cljs.core.reduce","cljs.core.range","t","nm","h","nk","kixi.stats.distribution/rand-binomial-binv","G__81684","G__81685","G__81686","cutoff","s","ix","kixi.stats.math/pow","G__81707","G__81708","G__81709","kixi.stats.distribution/rand-binomial","x__4336__auto__","y__4337__auto__","x__4339__auto__","y__4340__auto__","cljs.core._EQ_","kixi.stats.distribution/rand-gamma","vec__81726","vec__81729","G__81732","a1","a2","vec__81763","vec__81766","kixi.stats.distribution/rand-beta","beta","vec__81790","kixi.stats.distribution/rand-int-tuple","vec__81797","kixi.stats.distribution/shuffle","cljs.core/vector?","cljs.core/vec","cljs.core/count","clojure.test.check.random/split-n","p1__81803#","cljs.core.map","var_args","G__81808","kixi.stats.distribution/sampleable->seq","js/Error","distribution","kixi.stats.distribution.sampleable__GT_seq","clojure.test.check.random.make_random","cljs.core/LazySeq","vec__81813","cljs.core/cons","kixi.stats.protocols/sample-1","kixi.stats.distribution/default-sample-n","cljs.core.take","kixi.stats.distribution/categorical-sample","ks","ps","rem","cljs.core/seq","G__81828","G__81829","kixi.stats.distribution/->Binomial","cljs.core.concat","cljs.core.repeat","cljs.core/rest","kixi.stats.distribution/quantile-t","dof","kixi.stats.math/negative-infinity","kixi.stats.math/infinity","kixi.stats.math/ibetainv","kixi.stats.distribution/cdf-t","dof2","kixi.stats.math/ibeta","cljs.core/PROTOCOL_SENTINEL","this__4491__auto__","writer__4492__auto__","opt__4493__auto__","cljs.core/-write","kixi.stats.distribution/Uniform","kixi.stats.distribution/->Uniform","this","kixi.stats.distribution/Exponential","kixi.stats.distribution/->Exponential","rate","kixi.stats.distribution/Binomial","n'","cljs.core/frequencies","kixi.stats.distribution/Bernoulli","kixi.stats.distribution/->Bernoulli","kixi.stats.distribution/Normal","kixi.stats.distribution/->Normal","mu","sd","kixi.stats.math/erf","kixi.stats.math/erfcinv","kixi.stats.distribution/T","kixi.stats.distribution/->T","vec__81881","kixi.stats.distribution/Gamma","kixi.stats.distribution/->Gamma","shape","scale","kixi.stats.distribution/Beta","kixi.stats.distribution/->Beta","kixi.stats.distribution/BetaBinomial","kixi.stats.distribution/->BetaBinomial","vec__81893","kixi.stats.distribution/ChiSquared","kixi.stats.distribution/->ChiSquared","kixi.stats.math/lower-regularized-gamma","kixi.stats.math/gamma-pinv","kixi.stats.distribution/F","kixi.stats.distribution/->F","d1","d2","vec__81916","x1","x2","kixi.stats.distribution/Poisson","kixi.stats.distribution/->Poisson","lambda","l","kixi.stats.math/exp","kixi.stats.distribution/Weibull","kixi.stats.distribution/->Weibull","kixi.stats.distribution/Categorical","kixi.stats.distribution/->Categorical","cljs.core/transient","cljs.core.assoc_BANG_","cljs.core/persistent!","kixi.stats.distribution/Multinomial","kixi.stats.distribution/->Multinomial","cljs.core.conj_BANG_","kixi.stats.distribution/Dirichlet","kixi.stats.distribution/->Dirichlet","as","rs","xs","p1__81955#","p2__81956#","cljs.core.apply","cljs.core/+","p1__81957#","cljs.core.mapv","kixi.stats.distribution/DirichletMultinomial","kixi.stats.distribution/->DirichletMultinomial","vec__81958","kixi.stats.distribution/Cauchy","kixi.stats.distribution/->Cauchy","location","kixi.stats.math/tan","kixi.stats.math/atan","kixi.stats.distribution/LogNormal","kixi.stats.distribution/->LogNormal","kixi.stats.distribution/Pareto","kixi.stats.distribution/->Pareto","kixi.stats.distribution/minimum","kixi.stats.protocols/minimum","kixi.stats.distribution/maximum","kixi.stats.protocols/maximum","kixi.stats.distribution/quantile","kixi.stats.protocols/quantile","kixi.stats.distribution/cdf","kixi.stats.protocols/cdf","kixi.stats.distribution/iqr","kixi.stats.distribution/median","kixi.stats.distribution/summary","q1","q3","and__4251__auto__","p__81987","map__81992","cljs.core/--destructure-map","cljs.core.get","kixi.stats.distribution/uniform","p__81993","map__81994","kixi.stats.distribution/exponential","p__81995","map__81996","kixi.stats.distribution/bernoulli","p__81997","map__81998","kixi.stats.distribution/binomial","p__82000","map__82005","kixi.stats.distribution/normal","or__4253__auto__","p__82009","map__82010","kixi.stats.distribution/t","p__82011","map__82012","kixi.stats.distribution/gamma","p__82013","map__82014","kixi.stats.distribution/beta","p__82015","map__82016","kixi.stats.distribution/beta-binomial","p__82017","map__82019","kixi.stats.distribution/weibull","p__82022","map__82023","kixi.stats.distribution/chi-squared","p__82031","map__82032","kixi.stats.distribution/f","p__82038","map__82040","kixi.stats.distribution/poisson","kixi.stats.distribution/categorical","category-probs","vec__82042","cljs.core/map","cljs.core/vector","p__82048","map__82049","kixi.stats.distribution/multinomial","probs","p__82053","map__82054","kixi.stats.distribution/dirichlet","alphas","p__82055","map__82056","kixi.stats.distribution/dirichlet-multinomial","p__82057","map__82058","kixi.stats.distribution/cauchy","p__82059","map__82060","kixi.stats.distribution/log-normal","p__82069","map__82071","kixi.stats.distribution/pareto","G__82077","kixi.stats.distribution/draw","p__82083","map__82084","kixi.stats.distribution.draw","seed","G__82086","kixi.stats.distribution/sample","p__82087","map__82088","kixi.stats.distribution.sample","kixi.stats.protocols/sample-n","G__82095","kixi.stats.distribution/sample-summary","p__82096","map__82097","kixi.stats.distribution.sample_summary","kixi.stats.protocols/sample-frequencies","G__82099","kixi.stats.distribution/critical-value","kixi.stats.distribution.critical_value","tails","G__82103","cljs.core/Keyword","G__82104","G__82105","G__82106","G__82107"],"sourcesContent":["(ns kixi.stats.distribution\n  (:refer-clojure :exclude [shuffle rand-int])\n  (:require [kixi.stats.math :refer [abs pow log sqrt exp cos sin tan atan PI log-gamma sq floor erf erfcinv] :as m]\n            [kixi.stats.protocols :as p :refer [sample-1 sample-n sample-frequencies]]\n            [clojure.test.check.random :refer [make-random rand-double rand-long split split-n]]))\n\n;;;; Randomness helpers\n\n(def ^:no-doc next-rng\n  (comp first split))\n\n(defn ^:no-doc swap\n  [coll [i1 i2]]\n  (assoc coll i2 (coll i1) i1 (coll i2)))\n\n(defn ^:no-doc rand-int\n  [a b rng]\n  (let [r (* (rand-double rng) (- b a))]\n    (int (+ a r))))\n\n(defn ^:no-doc rand-normal\n  [rng]\n  (let [[r1 r2] (split rng)]\n    (* (sqrt (* -2 (log (rand-double r1))))\n       (cos (* 2 PI (rand-double r2))))))\n\n(defn ^:no-doc btrd-f\n  [k]\n  (case k\n    0 0.08106146679532726\n    1 0.04134069595540929\n    2 0.02767792568499834\n    3 0.02079067210376509\n    4 0.01664469118982119\n    5 0.01387612882307075\n    6 0.01189670994589177\n    7 0.01041126526197209\n    8 0.009255462182712733\n    9 0.008330563433362871\n    (let [k' (inc k) k2' (sq k')]\n      (double (/ (- 0.08333333333333333\n                    (/ (- 0.002777777777777778\n                          (/ 7.936507936507937E-4 k2')) k2')) k')))))\n\n(defn ^:no-doc rand-binomial-btrd\n  \"Algorithm BTRD from \\\"The Generation of Binomial Random Variates\\\", Wolfgang Hormann, p6\"\n  [n p rng]\n  (if (> p 0.5)\n    (- n (rand-binomial-btrd n (- 1 p) rng))\n    (let [m (int (floor (* (inc n) p)))\n          q (- 1 p)\n          r (/ p q)\n          nr (* (inc n) r)\n          npq (* n p q)\n          rnpq (sqrt npq)\n          b (+ 1.15 (* 2.53 rnpq))\n          a (+ -0.0873 (* 0.0248 b) (* 0.01 p))\n          c (+ (* n p) 0.5)\n          alpha (* (+ 2.83 (/ 5.1 b)) rnpq)\n          vr (- 0.92 (/ 4.2 b))\n          urvr (* 0.86 vr)]\n      ;; 1\n      (loop [rng rng]\n        (let [v (rand-double rng)]\n          (if (<= v urvr)\n            (let [u (- (/ v vr) 0.43)]\n              (int (floor (+ (* (+ (/ (* 2 a) (- 0.5 (abs u))) b) u) c))))\n            (let [[r1 r2] (split rng)\n                  ;; 2\n                  [u v] (if (>= v vr)\n                          [(- (rand-double r1) 0.5) v]\n                          (let [u (- (/ v vr) 0.93)]\n                            [(- (* 0.5 (if (pos? u) 1 -1)) u) (* (rand-double r1) vr)]))\n                  ;; 3\n                  us (- 0.5 (abs u))\n                  k (int (floor (+ (* (+ (* 2 (/ a us)) b) u) c)))]\n              (if (<= 0 k n)\n                (let [v (* v (/ alpha (+ (/ a (sq us)) b)))\n                      km (abs (- k m))]\n                  (if (<= km 15)\n                    ;; 3.1\n                    (let [f 1.0\n                          fx (fn [x i] (* x (- (/ nr (inc i)) r)))\n                          [f v] (if (< m k)\n                                  [(reduce fx f (range m k)) v]\n                                  [f (reduce fx v (range k m))])]\n                      (if (<= v f) k (recur r2)))\n                    ;; 3.2\n                    (let [v (log v)\n                          p (* (/ km npq) (+ (/ (+ (* (+ (/ km 3) 0.625) km) 0.1666666666666667) npq) 0.5))\n                          t (/ (* (- km) km) (* 2 npq))]\n                      (cond\n                        (< v (- t p)) k\n                        (> v (+ t p)) (recur r2)\n                        :else\n                        ;; 3.3\n                        (let [nm (inc (- n m))\n                              h (+ (* (+ m 0.5) (log (/ (inc m) (* r nm)))) (btrd-f m) (btrd-f (- n m)))\n                              ;; 3.4\n                              nk (inc (- n k))]\n                          (if (<= v (+ h\n                                       (* (inc n) (log (/ nm nk)))\n                                       (* (+ k 0.5) (log (/ (* nk r) (inc k))))\n                                       (- (btrd-f k))\n                                       (- (btrd-f (- n k)))))\n                            k\n                            (recur r2)))))))\n                (recur r2)))))))))\n\n(defn ^:no-doc rand-binomial-binv\n  [n p rng]\n  (if (> p 0.5)\n    (- n (rand-binomial-binv n (- 1 p) rng))\n    (let [cutoff 110\n          q (- 1 p)\n          s (/ p q)]\n      (loop [ix 0 f (pow q n) u (rand-double rng)]\n        (cond\n          (< u f) ix\n          (>= ix cutoff) (rand-binomial-binv n p (next-rng rng))\n          :else (recur (inc ix) (* f s (/ (- n ix) (inc ix))) (- u f)))))))\n\n(defn ^:no-doc rand-binomial\n  [n p rng]\n  (let [p (max 0.0 (min p 1.0))]\n    (cond\n      (= p 0.0) 0\n      (= p 1.0) n\n      (< (* n p) 14) (rand-binomial-binv n p rng)\n      :else (rand-binomial-btrd n p rng))))\n\n(defn ^:no-doc rand-gamma\n  [k rng]\n  (let [k' (cond-> k (< 1) inc)\n        a1 (- k' (/ 1 3))\n        a2 (/ 1 (sqrt (* 9 a1)))\n        [r1 r2] (split rng)\n        [v u] (loop [rng r1]\n                (let [[r1 r2] (split rng)\n                      [x v] (loop [rng r2]\n                              (let [x (rand-normal rng)\n                                    v (+ 1 (* a2 x))]\n                                (if (<= v 0)\n                                  (recur (next-rng rng))\n                                  [x v])))\n                      v (* v v v)\n                      u (rand-double r1)]\n                  (if (and (> u (- 1 (* 0.331 (pow x 4))))\n                           (> (log u) (+ (* 0.5 x x)\n                                         (* a1 (+ 1 (- v) (log v))))))\n                    (recur (next-rng r1))\n                    [v u])))]\n    (if (= k k')\n      (* a1 v)\n      (* (pow (loop [rng r2]\n                (let [r (rand-double rng)]\n                  (if (> r 0) r\n                      (recur (next-rng rng)))))\n              (/ 1 k))\n         a1 v))))\n\n(defn ^:no-doc rand-beta\n  [alpha beta rng]\n  (let [[r1 r2] (split rng)\n        u (rand-gamma alpha r1)]\n    (/ u (+ u (rand-gamma beta r2)))))\n\n(defn ^:no-doc rand-int-tuple\n  [a b rng]\n  (let [[r1 r2] (split rng)]\n    [(rand-int a b r1) (rand-int a b r2)]))\n\n(defn ^:no-doc shuffle\n  [coll rng]\n  (let [coll (if (vector? coll) coll (vec coll))\n        n (count coll)]\n    (->> (split-n rng (rand-int 0 (* 2 n) rng))\n         (map #(rand-int-tuple 0 n %))\n         (reduce swap coll))))\n\n\n;;;; Protocol helpers\n\n(defn ^:no-doc sampleable->seq\n  ([^kixi.stats.protocols.PRandomVariable distribution]\n   (sampleable->seq distribution (make-random)))\n  ([^kixi.stats.protocols.PRandomVariable distribution rng]\n   (lazy-seq\n    (let [[r1 r2] (split rng)]\n      (cons (sample-1 distribution r1)\n            (sampleable->seq distribution r2))))))\n\n(defn ^:no-doc default-sample-n\n  [^kixi.stats.protocols.PRandomVariable distribution n rng]\n  (take n (sampleable->seq distribution rng)))\n\n(declare ->Binomial)\n\n(defn ^:no-doc categorical-sample\n  [ks ps n rng]\n  (loop [coll '() n n\n         rem 1 rng rng\n         ks ks ps ps]\n    (if (and (seq ks) (> rem 0))\n      (let [k (first ks)\n            p (first ps)\n            x (sample-1 (->Binomial n (/ p rem)) rng)]\n        (recur (concat coll (repeat x k)) (- n x)\n               (- rem p) (next-rng rng)\n               (rest ks) (rest ps)))\n      coll)))\n\n(defn ^:no-doc quantile-t\n  [dof p]\n  (cond\n    (<= p 0.0) m/negative-infinity\n    (>= p 1.0) m/infinity\n    :else\n    (let [x (m/ibetainv (* 2 (min p (- 1 p)))\n                        (* 0.5 dof)\n                        0.5)\n          x (sqrt (* dof (/ (- 1 x) x)))]\n      (if (> p 0.5) x (- x)))))\n\n(defn ^:no-doc cdf-t\n  [dof x]\n  (cond\n    (= x m/negative-infinity) 0.0\n    (= x m/infinity) 1.0\n    :else\n    (let [dof2 (* dof 0.5)]\n      (m/ibeta (/ (+ x (sqrt (+ (sq x) dof)))\n                  (* 2 (sqrt (+ (sq x) dof))))\n               dof2 dof2))))\n\n\n;;;; Protocol implementations\n\n(deftype ^:no-doc Uniform\n    [a b]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (+ (* (rand-double rng) (- b a)) a))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Exponential\n    [rate]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (/ (- (log (rand-double rng))) rate))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Binomial\n    [n p]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (rand-binomial n p rng))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n' rng]\n      (-> (sample-n this n' rng)\n          (frequencies)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Bernoulli\n    [p]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (< (rand-double rng) p))\n    (sample-n [this n rng]\n      (let [v (sample-1 (->Binomial n p) rng)]\n        (-> (concat (repeat v true)\n                    (repeat (- n v) false))\n            (shuffle rng))))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (let [v (sample-1 (->Binomial n p) rng)]\n        {true v false (- n v)}))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Normal\n    [mu sd]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (+ (* (rand-normal rng) sd) mu))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (* 0.5 (+ 1 (erf (/ (- x mu)\n                          (sqrt (* 2 sd sd)))))))\n    (quantile [this p]\n      (+ (* -1.41421356237309505 sd (erfcinv (* 2 p))) mu))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc T\n    [dof]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)]\n        (* (rand-normal r1)\n           (sqrt (/ dof (* 2 (rand-gamma (* 0.5 dof) r2)))))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (cdf-t dof x))\n    (quantile [this p]\n      (quantile-t dof p))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Gamma\n    [shape scale]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (rand-gamma shape rng) scale))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Beta\n    [alpha beta]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (rand-beta alpha beta rng))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc BetaBinomial\n    [n alpha beta]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            p (rand-beta alpha beta r1)]\n        (rand-binomial n p r2)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc ChiSquared\n    [k]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (rand-gamma (/ k 2) rng) 2))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PQuantile\n    (cdf [this x]\n      (m/lower-regularized-gamma (* 0.5 k) (* 0.5 x)))\n    (quantile [this p]\n      (* 2.0 (m/gamma-pinv p (* 0.5 k))))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc F\n    [d1 d2]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            x1 (* (rand-gamma (/ d1 2) r1) 2)\n            x2 (* (rand-gamma (/ d2 2) r2) 2)]\n        (/ (/ x1 d1) (/ x2 d2))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Poisson\n    [lambda]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [l (exp (- lambda))]\n        (loop [p 1 k 0 rng rng]\n          (let [p (* p (rand-double rng))]\n            (if (> p l)\n              (recur p (inc k) (next-rng rng))\n              k)))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Weibull\n    [shape scale]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (* (pow (- (log (rand-double rng)))\n              (/ 1 shape))\n         scale))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Categorical\n    [ks ps]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (first (categorical-sample ks ps 1 rng)))\n    (sample-n [this n rng]\n      (shuffle (categorical-sample ks ps n rng) rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (loop [coll (transient {}) n n\n             rem 1 rng rng\n             ks ks ps ps]\n        (if (and (seq ks) (pos? rem))\n          (let [k (first ks)\n                p (first ps)\n                x (rand-binomial n (/ p rem) rng)]\n            (recur (assoc! coll k x) (- n x)\n                   (- rem p) (next-rng rng)\n                   (rest ks) (rest ps)))\n          (persistent! coll))))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Multinomial\n    [n ps]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (loop [coll (transient []) n n\n             rem 1 rng rng\n             ps ps]\n        (if (and (seq ps) (pos? rem))\n          (let [p (first ps)\n                x (rand-binomial n (/ p rem) rng)]\n            (recur (conj! coll x) (- n x)\n                   (- rem p) (next-rng rng)\n                   (rest ps)))\n          (persistent! coll))))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (frequencies (sample-n this n rng)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Dirichlet\n    [as]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [rs (split-n rng (count as))\n            xs (map #(rand-gamma %1 %2) as rs)\n            s (apply + xs)]\n        (mapv #(/ % s) xs)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc DirichletMultinomial\n    [n as]\n    p/PRandomVariable\n    (sample-1 [this rng]\n      (let [[r1 r2] (split rng)\n            ps (sample-1 (->Dirichlet as) r1)]\n        (sample-1 (->Multinomial n ps) r2)))\n    (sample-n [this n rng]\n      (default-sample-n this n rng))\n    p/PDiscreteRandomVariable\n    (sample-frequencies [this n rng]\n      (frequencies (sample-n this n rng)))\n    #?@(:clj (clojure.lang.Seqable\n              (seq [this] (sampleable->seq this)))\n        :cljs (ISeqable\n               (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Cauchy\n  [location scale]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (+ location (* scale (tan (* PI (- (rand-double rng) 0.5))))))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (+ 0.5 (/ (atan (/ (- x location) scale)) PI)))\n  (quantile [this p]\n    (+ location (* scale (tan (* PI (- p 0.5))))))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc LogNormal\n  [mu sd]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (exp (+ (* (rand-normal rng) sd) mu)))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (* 0.5 (+ 1 (erf (/ (- (log x) mu)\n                           (sqrt (* 2 sd sd)))))))\n  (quantile [this p]\n    (exp (+ (* -1.41421356237309505 sd (erfcinv (* 2 p))) mu)))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n(deftype ^:no-doc Pareto\n  [scale shape]\n  p/PRandomVariable\n  (sample-1 [this rng]\n    (/ scale (pow (rand-double rng) (/ 1 shape))))\n  (sample-n [this n rng]\n    (default-sample-n this n rng))\n  p/PQuantile\n  (cdf [this x]\n    (if (< scale x)\n      (- 1 (pow (/ scale x) shape))\n      0.0))\n  (quantile [this p]\n    (/ scale (pow (- 1 p) (/ 1 shape))))\n  #?@(:clj (clojure.lang.Seqable\n            (seq [this] (sampleable->seq this)))\n      :cljs (ISeqable\n             (-seq [this] (sampleable->seq this)))))\n\n;;;; Public API\n\n(def minimum p/minimum)\n\n(def maximum p/maximum)\n\n(def quantile p/quantile)\n\n(def cdf p/cdf)\n\n(defn iqr\n  \"Returns the interquartile range\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (- (quantile distribution 0.75)\n     (quantile distribution 0.25)))\n\n(defn median\n  \"Returns the median\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (quantile distribution 0.5))\n\n(defn summary\n  \"Returns the 5-number distribution summary\n  and the interquartile range.\"\n  [^kixi.stats.protocols.PQuantile distribution]\n  (let [q1 (quantile distribution 0.25)\n        q3 (quantile distribution 0.75)]\n    {:min (minimum distribution)\n     :q1 q1\n     :median (quantile distribution 0.5)\n     :q3 q3\n     :max (maximum distribution)\n     :iqr (when (and q1 q3) (- q3 q1))}))\n\n(defn uniform\n  \"Returns a uniform distribution.\n  Params: {:a \u2208 \u211d, :b \u2208 \u211d}\"\n  [{:keys [a b]}]\n  (->Uniform a b))\n\n(defn exponential\n  \"Returns an exponential distribution.\n  Params: {:rate \u2208 \u211d > 0}\"\n  [{:keys [rate]}]\n  (->Exponential rate))\n\n(defn bernoulli\n  \"Returns a Bernoulli distribution.\n  Params: {:p \u2208 [0 1]}\"\n  [{:keys [p]}]\n  (->Bernoulli p))\n\n(defn binomial\n  \"Return a binomial distribution.\n  Params: {:n \u2208 \u2115, :p \u2208 [0 1]}\"\n  [{:keys [n p]}]\n  (->Binomial n p))\n\n(defn normal\n  \"Returns a normal distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d}\"\n  [{:keys [location scale mu sd]}]\n  (->Normal (or location mu) (or scale sd)))\n\n(defn t\n  \"Returns a t distribution.\n  Params: {:v \u2208 \u2115 > 0}\"\n  [{:keys [v]}]\n  (->T v))\n\n(defn gamma\n  \"Returns a gamma distribution.\n  Params: {:shape \u2208 \u211d, :scale \u2208 \u211d} or {:shape \u2208 \u211d, :rate \u2208 \u211d}\"\n  [{:keys [shape scale rate] :or {shape 1.0}}]\n  (->Gamma shape (or scale (/ 1.0 rate))))\n\n(defn beta\n  \"Returns a beta distribution.\n  Params: {:alpha \u2208 \u211d, :beta \u2208 \u211d}\"\n  [{:keys [alpha beta] :or {alpha 1.0 beta 1.0}}]\n  (->Beta alpha beta))\n\n(defn beta-binomial\n  \"Returns a beta distribution.\n  Params: {:n \u2208 \u2115 > 0, :alpha \u2208 \u211d > 0, :beta \u2208 \u211d > 0}\"\n  [{:keys [n alpha beta] :or {alpha 1.0 beta 1.0}}]\n  (->BetaBinomial n alpha beta))\n\n(defn weibull\n  \"Returns a weibull distribution.\n  Params: {:shape \u2208 \u211d >= 0, :scale \u2208 \u211d >= 0}\"\n  [{:keys [shape scale] :or {shape 1.0 scale 1.0}}]\n  (->Weibull shape scale))\n\n(defn chi-squared\n  \"Returns a chi-squared distribution.\n  Params: {:k \u2208 \u2115 > 0}\"\n  [{:keys [k]}]\n  (->ChiSquared k))\n\n(defn f\n  \"Returns an F distribution.\n  Params: {:d1 \u2208 \u2115 > 0, :d2 \u2208 \u2115 > 0}\"\n  [{:keys [d1 d2]}]\n  (->F d1 d2))\n\n(defn poisson\n  \"Returns a Poisson distribution.\n  Params: {:lambda \u2208 \u211d > 0}\"\n  [{:keys [lambda]}]\n  (->Poisson lambda))\n\n(defn categorical\n  \"Returns a categorical distribution.\n  Params: {[category] [probability], ...}\n  Probabilities should be >= 0 and sum to 1\"\n  [category-probs]\n  (let [[ks ps] (apply map vector category-probs)]\n    (->Categorical ks ps)))\n\n(defn multinomial\n  \"Returns a multinomial distribution.\n  Params: {:n \u2208 \u2115 > 0, :probs [\u211d >= 0, ...]}\n  Probabilities should be >= 0 and sum to 1\"\n  [{:keys [n probs]}]\n  (->Multinomial n probs))\n\n(defn dirichlet\n  \"Returns a Dirichlet distribution.\n  Params: {:alphas [\u211d >= 0, ...]}\"\n  [{:keys [alphas]}]\n  (->Dirichlet alphas))\n\n(defn dirichlet-multinomial\n  \"Returns a Dirichlet-multinomial distribution.\n  Params: {:n \u2208 \u2115, :alphas [\u211d >= 0, ...]}\"\n  [{:keys [n alphas]}]\n  (->DirichletMultinomial n alphas))\n\n(defn cauchy\n  \"Returns a Cauchy distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d > 0}\"\n  [{:keys [location scale]}]\n  (assert (pos? scale) (str \"Scale (\" scale \") must be positive\"))\n  (->Cauchy location scale))\n\n(defn log-normal\n  \"Returns a Log-normal distribution.\n  The parameters are the log of the\n  mean and sd of this distribution.\n  Params: {:location \u2208 \u211d, :scale \u2208 \u211d}\"\n  [{:keys [location scale mu sd]}]\n  (->LogNormal (or location mu) (or scale sd)))\n\n(defn pareto\n  \"Returns a Pareto distribution.\n  Params: {:scale \u2208 \u211d > 0, :shape \u2208 \u211d > 0}\"\n  [{:keys [scale shape]}]\n  (assert (and (pos? scale) (pos? shape))\n          (str \"Scale (\" scale \") and shape (\" shape \") must be positive.\"))\n  (->Pareto scale shape))\n\n(defn draw\n  \"Returns a single variate from the distribution.\n  An optional seed long will ensure deterministic results\"\n  ([^kixi.stats.protocols.PRandomVariable distribution]\n   (draw distribution {}))\n  ([^kixi.stats.protocols.PRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-1 distribution rng))))\n\n(defn sample\n  \"Returns n variates from the distribution.\n  An optional seed long will ensure deterministic results\"\n  ([n ^kixi.stats.protocols.PRandomVariable distribution]\n   (sample n distribution {}))\n  ([n ^kixi.stats.protocols.PRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-n distribution n rng))))\n\n(defn sample-summary\n  \"Returns a summary count of each variate for a sample\n  of a given length from a discrete distribution\n  such as the Bernoulli, binomial or categorical.\n  An optional seed long will ensure deterministic results\"\n  ([n ^kixi.stats.protocols.PDiscreteRandomVariable distribution]\n   (sample-summary n distribution {}))\n  ([n ^kixi.stats.protocols.PDiscreteRandomVariable distribution {:keys [seed]}]\n   (let [rng (if seed (make-random seed) (make-random))]\n     (sample-frequencies distribution n rng))))\n\n(defn critical-value\n  ([^kixi.stats.protocols.PQuantile distribution]\n   (critical-value distribution 0.05))\n  ([^kixi.stats.protocols.PQuantile distribution alpha]\n   (critical-value distribution alpha :<>))\n  ([^kixi.stats.protocols.PQuantile distribution alpha tails]\n   (case tails\n     :<> (quantile distribution (- 1 (* 0.5 alpha)))\n     :<  (quantile distribution alpha)\n     :>  (quantile distribution (- 1 alpha)))))\n"]}