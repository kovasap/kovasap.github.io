{"version":3,"sources":["orchestra_cljs/spec/test.cljs"],"mappings":"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","names":["orchestra-cljs.spec.test/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","p__52091","vec__52092","cljs.core.nth","x","temp__5753__auto__","s","cljs.core/seq","v","cljs.core/contains?","cljs.core/rest","cljs.core/cons","cljs.core.conj","orchestra-cljs.spec.test/no-fspec","spec","cljs.core.ex_info","orchestra-cljs.spec.test/no-args-spec","orchestra-cljs.spec.test/*instrument-enabled*","orchestra-cljs.spec.test/get-host-port","cljs.core.not_EQ_","cljs.core/*target*","js/window","orchestra-cljs.spec.test/get-ua-product","cljs.core.keyword","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","orchestra-cljs.spec.test/get-env","orchestra-cljs.spec.test/find-caller","st","frame","and__4251__auto__","clojure.string/blank?","cljs.core/re-find","p1__52104#","cljs.core.drop_while","cljs.core/not","search-spec-fn","cljs.core/first","orchestra-cljs.spec.test/spec-checking-fn","raw-fn-spec","fn-spec","fexpr__52109","cljs.core/deref","cljs.spec.alpha/maybe-spec","conform!","role","data","data-key","conformed","cljs.spec.alpha/conform","cljs.core._EQ_","caller","cljs.stacktrace/parse-stacktrace","js/Error","via","temp__5755__auto__","n","fexpr__52110","cljs.spec.alpha/spec-name","ed","cljs.core.merge","cljs.core.assoc","cljs.spec.alpha/explain-data*","fexpr__52116","cljs.spec.alpha/->sym","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__52117","cljs.core/*print-newline*","*print-fn*-orig-val__52118","cljs.core/*print-fn*","*print-newline*-temp-val__52119","*print-fn*-temp-val__52120","x__4796__auto__","cljs.spec.alpha/explain-out","pure-variadic?","cljs.core/meta","apply'","args","cljs.core.apply","ret","orig__51886__auto__","cargs","*instrument-enabled*-orig-val__52122","*instrument-enabled*-temp-val__52123","cret","or__4253__auto__","arg0","arg1","arg2","arg3","arg4","arg5","arg6","arg7","arg8","arg9","arg10","arg11","arg12","arg13","arg14","arg15","arg16","arg17","arg18","arg19","temp__5757__auto__","variadic","js/orchestra-cljs","js/orchestra-cljs.spec","js/orchestra-cljs.spec.test","js/orchestra-cljs.spec.test.instrumented-vars","orchestra-cljs.spec.test/instrumented-vars","cljs.core.atom","p__52131","map__52132","cljs.core/--destructure-map","cljs.core.get","orchestra-cljs.spec.test/instrument-choose-fn","sym","over","stub","replace","cljs.core/some","cljs.spec.alpha.gen","cljs.spec.gen.alpha/generate","p__52134","map__52135","orchestra-cljs.spec.test/instrument-choose-spec","overrides","orchestra-cljs.spec.test/instrument-1*","opts","map__52137","cljs.spec.alpha/get-spec","raw","wrapped","current","to-wrap","ospec","ofn","checked","cljs.core.swap_BANG_","cljs.core/assoc","orchestra-cljs.spec.test/unstrument-1*","map__52139","cljs.core/dissoc","orchestra-cljs.spec.test/fn-spec-name?","cljs.core/Symbol","var_args","G__52143","orchestra-cljs.spec.test/instrumentable-syms","orchestra_cljs.spec.test.instrumentable_syms","cljs.core/every?","cljs.core/ident?","cljs.core/keys","cljs.core.reduce","cljs.core/into","cljs.core.filter","cljs.spec.alpha/registry"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns orchestra-cljs.spec.test\n  (:require-macros [orchestra-cljs.spec.test :as m\n                    :refer [instrument unstrument with-instrument-disabled setup-static-dispatches]])\n  (:require\n    [goog.object :as gobj]\n    [goog.userAgent.product :as product]\n    [clojure.string :as string]\n    [cljs.stacktrace :as st]\n    [cljs.pprint :as pp]\n    [cljs.spec.alpha :as s]\n    [cljs.spec.gen.alpha :as gen]))\n\n(defn distinct-by\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [v (f x)]\n                         (if (contains? seen v)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen v)))))))\n                    xs seen)))]\n     (step coll #{}))))\n\n(defn- no-fspec\n  [v spec]\n  (ex-info (str \"Fn at \" v \" is not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-fspec}))\n\n(defn- no-args-spec\n  [v spec]\n  (ex-info (str \"Args for \" v \" are not spec'ed.\")\n           {:var v :spec spec ::s/failure :no-args-spec}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; instrument ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def ^:private ^:dynamic *instrument-enabled*\n  \"if false, instrumented fns call straight through\"\n  true)\n\n(defn get-host-port []\n  (if (not= \"browser\" *target*)\n    {}\n    {:host (.. js/window -location -host)\n     :port (.. js/window -location -port)}))\n\n(defn get-ua-product []\n  (if (not= \"browser\" *target*)\n    (keyword *target*)\n    (cond\n      product/SAFARI :safari\n      product/CHROME :chrome\n      product/FIREFOX :firefox\n      product/IE :ie)))\n\n(defn get-env []\n  {:ua-product (get-ua-product)})\n\n(defn- find-caller [st]\n  (letfn [(search-spec-fn [frame]\n            (when frame\n              (let [s (:function frame)]\n                (and (string? s) (not (string/blank? s))\n                     (re-find #\"cljs\\.spec\\.test\\.spec_checking_fn\" s)))))]\n    (->> st\n      (drop-while #(not (search-spec-fn %)))\n      (drop-while search-spec-fn)\n      first)))\n\n;; TODO: check ::caller result in other browsers - David\n\n(defn- spec-checking-fn\n  [v f raw-fn-spec]\n  (let [fn-spec (@#'s/maybe-spec raw-fn-spec)\n        conform! (fn [v role spec data data-key]\n                   (let [conformed (s/conform spec data)]\n                     (if (= ::s/invalid conformed)\n                       (let [caller (find-caller\n                                      (st/parse-stacktrace\n                                        (get-host-port)\n                                        (.-stack (js/Error.))\n                                        (get-env) nil))\n                             via (if-some [n (#'s/spec-name spec)]\n                                   [n]\n                                   [])\n                             ed (merge (assoc (s/explain-data* spec [role]\n                                                               via\n                                                               []\n                                                               data)\n                                              ;::s/fn (#'s/->sym v)\n                                              data-key data\n                                              ::s/failure :instrument)\n                                       (when caller\n                                         {::caller caller}))]\n                         (throw (ex-info\n                                  (str \"Call to \"\n                                       (#'s/->sym v)\n                                       \" did not conform to spec:\\n\"\n                                       (with-out-str (s/explain-out ed)))\n                                  (assoc ed :orchestra.spec/var v))))\n                       conformed)))\n        pure-variadic? (and (-> (meta v) :top-fn :variadic?)\n                            (zero? (-> (meta v) :top-fn :max-fixed-arity)))\n        apply' (fn [f args]\n                 (if (and (nil? args)\n                          pure-variadic?)\n                   (.cljs$core$IFn$_invoke$arity$variadic f)\n                   (apply f args)))\n        ret (fn [& args]\n              (if *instrument-enabled*\n                (with-instrument-disabled\n                  (let [cargs (when (:args fn-spec)\n                                (conform! v :args (:args fn-spec) args ::s/args))\n                        ret (binding [*instrument-enabled* true]\n                              (apply' f args))\n                        cret (when (:ret fn-spec)\n                               (conform! v :ret (:ret fn-spec) ret ::s/ret))]\n                    (when-let [spec (:fn fn-spec)]\n                      (if (nil? cargs)\n                        (throw (no-args-spec v fn-spec))\n                        (conform! v :fn spec {:ret (or cret ret) :args cargs} ::s/fn)))\n                    ret))\n                (apply' f args)))]\n    (when-not pure-variadic?\n      (setup-static-dispatches f ret 20)\n      (when-some [variadic (.-cljs$core$IFn$_invoke$arity$variadic f)]\n        (set! (.-cljs$core$IFn$_invoke$arity$variadic ret)\n              (fn [& args]\n                (apply variadic args)))))\n    ret))\n\n(defonce ^:private instrumented-vars (atom {}))\n\n(defn- instrument-choose-fn\n  \"Helper for instrument.\"\n  [f spec sym {over :gen :keys [stub replace]}]\n  (if (some #{sym} stub)\n    (-> spec (s/gen over) gen/generate)\n    (get replace sym f)))\n\n(defn- instrument-choose-spec\n  \"Helper for instrument\"\n  [spec sym {overrides :spec}]\n  (get overrides sym spec))\n\n(defn instrument-1*\n  [s v opts]\n  (let [spec (s/get-spec v)\n        {:keys [raw wrapped]} (get @instrumented-vars v)\n        current @v\n        to-wrap (if (= wrapped current) raw current)\n        ospec (or (instrument-choose-spec spec s opts)\n                  (throw (no-fspec v spec)))\n        ofn (instrument-choose-fn to-wrap ospec s opts)\n        checked (spec-checking-fn v ofn ospec)]\n    (swap! instrumented-vars assoc v {:raw to-wrap :wrapped checked})\n    checked))\n\n(defn unstrument-1*\n  [s v]\n  (when v\n    (when-let [{:keys [raw wrapped]} (get @instrumented-vars v)]\n      (swap! instrumented-vars dissoc v)\n      (let [current @v]\n        (when (= wrapped current)\n          raw)))))\n\n(defn- fn-spec-name?\n  [s]\n  (symbol? s))\n\n(defn instrumentable-syms\n  \"Given an opts map as per instrument, returns the set of syms\n   that can be instrumented.\"\n  ([] (instrumentable-syms nil))\n  ([opts]\n   (assert (every? ident? (keys (:gen opts))) \"instrument :gen expects ident keys\")\n   (reduce into #{} [(filter fn-spec-name? (keys (s/registry)))\n                     (keys (:spec opts))\n                     (:stub opts)\n                     (keys (:replace opts))])))\n"]}