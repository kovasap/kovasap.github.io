{
"version":3,
"file":"module$node_modules$d3_hierarchy$dist$d3_hierarchy.js",
"lineCount":42,
"mappings":"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",
"sources":["node_modules/d3-hierarchy/dist/d3-hierarchy.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_hierarchy$dist$d3_hierarchy\"] = function(global,require,module,exports) {\n// https://d3js.org/d3-hierarchy/ v2.0.0 Copyright 2020 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(global = global || self, factory(global.d3 = global.d3 || {}));\n}(this, function (exports) { 'use strict';\n\nfunction defaultSeparation(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\nfunction meanX(children) {\n  return children.reduce(meanXReduce, 0) / children.length;\n}\n\nfunction meanXReduce(x, c) {\n  return x + c.x;\n}\n\nfunction maxY(children) {\n  return 1 + children.reduce(maxYReduce, 0);\n}\n\nfunction maxYReduce(y, c) {\n  return Math.max(y, c.y);\n}\n\nfunction leafLeft(node) {\n  var children;\n  while (children = node.children) node = children[0];\n  return node;\n}\n\nfunction leafRight(node) {\n  var children;\n  while (children = node.children) node = children[children.length - 1];\n  return node;\n}\n\nfunction cluster() {\n  var separation = defaultSeparation,\n      dx = 1,\n      dy = 1,\n      nodeSize = false;\n\n  function cluster(root) {\n    var previousNode,\n        x = 0;\n\n    // First walk, computing the initial x & y values.\n    root.eachAfter(function(node) {\n      var children = node.children;\n      if (children) {\n        node.x = meanX(children);\n        node.y = maxY(children);\n      } else {\n        node.x = previousNode ? x += separation(node, previousNode) : 0;\n        node.y = 0;\n        previousNode = node;\n      }\n    });\n\n    var left = leafLeft(root),\n        right = leafRight(root),\n        x0 = left.x - separation(left, right) / 2,\n        x1 = right.x + separation(right, left) / 2;\n\n    // Second walk, normalizing x & y to the desired size.\n    return root.eachAfter(nodeSize ? function(node) {\n      node.x = (node.x - root.x) * dx;\n      node.y = (root.y - node.y) * dy;\n    } : function(node) {\n      node.x = (node.x - x0) / (x1 - x0) * dx;\n      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;\n    });\n  }\n\n  cluster.separation = function(x) {\n    return arguments.length ? (separation = x, cluster) : separation;\n  };\n\n  cluster.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);\n  };\n\n  cluster.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return cluster;\n}\n\nfunction count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nfunction node_count() {\n  return this.eachAfter(count);\n}\n\nfunction node_each(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n\nfunction node_eachBefore(callback, that) {\n  var node = this, nodes = [node], children, i, index = -1;\n  while (node = nodes.pop()) {\n    callback.call(that, node, ++index, this);\n    if (children = node.children) {\n      for (i = children.length - 1; i >= 0; --i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  return this;\n}\n\nfunction node_eachAfter(callback, that) {\n  var node = this, nodes = [node], next = [], children, i, n, index = -1;\n  while (node = nodes.pop()) {\n    next.push(node);\n    if (children = node.children) {\n      for (i = 0, n = children.length; i < n; ++i) {\n        nodes.push(children[i]);\n      }\n    }\n  }\n  while (node = next.pop()) {\n    callback.call(that, node, ++index, this);\n  }\n  return this;\n}\n\nfunction node_find(callback, that) {\n  let index = -1;\n  for (const node of this) {\n    if (callback.call(that, node, ++index, this)) {\n      return node;\n    }\n  }\n}\n\nfunction node_sum(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n\nfunction node_sort(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n\nfunction node_path(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n\nfunction node_ancestors() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nfunction node_descendants() {\n  return Array.from(this);\n}\n\nfunction node_leaves() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n\nfunction node_links() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don\u2019t include the root\u2019s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n\nfunction* node_iterator() {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      yield node;\n      if (children = node.children) {\n        for (i = 0, n = children.length; i < n; ++i) {\n          next.push(children[i]);\n        }\n      }\n    }\n  } while (next.length);\n}\n\nfunction hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n    if (children === undefined) children = mapChildren;\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new Node(data),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : null;\n}\n\nfunction copyData(node) {\n  if (node.data.value !== undefined) node.value = node.data.value;\n  node.data = node.data.data;\n}\n\nfunction computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nfunction Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  find: node_find,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy,\n  [Symbol.iterator]: node_iterator\n};\n\nfunction array(x) {\n  return typeof x === \"object\" && \"length\" in x\n    ? x // Array, TypedArray, NodeList, array-like\n    : Array.from(x); // Map, Set, iterable, string, or anything else\n}\n\nfunction shuffle(array) {\n  var m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n}\n\nfunction enclose(circles) {\n  var i = 0, n = (circles = shuffle(Array.from(circles))).length, B = [], p, e;\n\n  while (i < n) {\n    p = circles[i];\n    if (e && enclosesWeak(e, p)) ++i;\n    else e = encloseBasis(B = extendBasis(B, p)), i = 0;\n  }\n\n  return e;\n}\n\nfunction extendBasis(B, p) {\n  var i, j;\n\n  if (enclosesWeakAll(p, B)) return [p];\n\n  // If we get here then B must have at least one element.\n  for (i = 0; i < B.length; ++i) {\n    if (enclosesNot(p, B[i])\n        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {\n      return [B[i], p];\n    }\n  }\n\n  // If we get here then B must have at least two elements.\n  for (i = 0; i < B.length - 1; ++i) {\n    for (j = i + 1; j < B.length; ++j) {\n      if (enclosesNot(encloseBasis2(B[i], B[j]), p)\n          && enclosesNot(encloseBasis2(B[i], p), B[j])\n          && enclosesNot(encloseBasis2(B[j], p), B[i])\n          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {\n        return [B[i], B[j], p];\n      }\n    }\n  }\n\n  // If we get here then something is very wrong.\n  throw new Error;\n}\n\nfunction enclosesNot(a, b) {\n  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;\n  return dr < 0 || dr * dr < dx * dx + dy * dy;\n}\n\nfunction enclosesWeak(a, b) {\n  var dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction enclosesWeakAll(a, B) {\n  for (var i = 0; i < B.length; ++i) {\n    if (!enclosesWeak(a, B[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction encloseBasis(B) {\n  switch (B.length) {\n    case 1: return encloseBasis1(B[0]);\n    case 2: return encloseBasis2(B[0], B[1]);\n    case 3: return encloseBasis3(B[0], B[1], B[2]);\n  }\n}\n\nfunction encloseBasis1(a) {\n  return {\n    x: a.x,\n    y: a.y,\n    r: a.r\n  };\n}\n\nfunction encloseBasis2(a, b) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,\n      l = Math.sqrt(x21 * x21 + y21 * y21);\n  return {\n    x: (x1 + x2 + x21 / l * r21) / 2,\n    y: (y1 + y2 + y21 / l * r21) / 2,\n    r: (l + r1 + r2) / 2\n  };\n}\n\nfunction encloseBasis3(a, b, c) {\n  var x1 = a.x, y1 = a.y, r1 = a.r,\n      x2 = b.x, y2 = b.y, r2 = b.r,\n      x3 = c.x, y3 = c.y, r3 = c.r,\n      a2 = x1 - x2,\n      a3 = x1 - x3,\n      b2 = y1 - y2,\n      b3 = y1 - y3,\n      c2 = r2 - r1,\n      c3 = r3 - r1,\n      d1 = x1 * x1 + y1 * y1 - r1 * r1,\n      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,\n      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,\n      ab = a3 * b2 - a2 * b3,\n      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,\n      xb = (b3 * c2 - b2 * c3) / ab,\n      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,\n      yb = (a2 * c3 - a3 * c2) / ab,\n      A = xb * xb + yb * yb - 1,\n      B = 2 * (r1 + xa * xb + ya * yb),\n      C = xa * xa + ya * ya - r1 * r1,\n      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);\n  return {\n    x: x1 + xa + xb * r,\n    y: y1 + ya + yb * r,\n    r: r\n  };\n}\n\nfunction place(b, a, c) {\n  var dx = b.x - a.x, x, a2,\n      dy = b.y - a.y, y, b2,\n      d2 = dx * dx + dy * dy;\n  if (d2) {\n    a2 = a.r + c.r, a2 *= a2;\n    b2 = b.r + c.r, b2 *= b2;\n    if (a2 > b2) {\n      x = (d2 + b2 - a2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));\n      c.x = b.x - x * dx - y * dy;\n      c.y = b.y - x * dy + y * dx;\n    } else {\n      x = (d2 + a2 - b2) / (2 * d2);\n      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));\n      c.x = a.x + x * dx - y * dy;\n      c.y = a.y + x * dy + y * dx;\n    }\n  } else {\n    c.x = a.x + c.r;\n    c.y = a.y;\n  }\n}\n\nfunction intersects(a, b) {\n  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;\n  return dr > 0 && dr * dr > dx * dx + dy * dy;\n}\n\nfunction score(node) {\n  var a = node._,\n      b = node.next._,\n      ab = a.r + b.r,\n      dx = (a.x * b.r + b.x * a.r) / ab,\n      dy = (a.y * b.r + b.y * a.r) / ab;\n  return dx * dx + dy * dy;\n}\n\nfunction Node$1(circle) {\n  this._ = circle;\n  this.next = null;\n  this.previous = null;\n}\n\nfunction packEnclose(circles) {\n  if (!(n = (circles = array(circles)).length)) return 0;\n\n  var a, b, c, n, aa, ca, i, j, k, sj, sk;\n\n  // Place the first circle.\n  a = circles[0], a.x = 0, a.y = 0;\n  if (!(n > 1)) return a.r;\n\n  // Place the second circle.\n  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;\n  if (!(n > 2)) return a.r + b.r;\n\n  // Place the third circle.\n  place(b, a, c = circles[2]);\n\n  // Initialize the front-chain using the first three circles a, b and c.\n  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);\n  a.next = c.previous = b;\n  b.next = a.previous = c;\n  c.next = b.previous = a;\n\n  // Attempt to place each remaining circle\u2026\n  pack: for (i = 3; i < n; ++i) {\n    place(a._, b._, c = circles[i]), c = new Node$1(c);\n\n    // Find the closest intersecting circle on the front-chain, if any.\n    // \u201cCloseness\u201d is determined by linear distance along the front-chain.\n    // \u201cAhead\u201d or \u201cbehind\u201d is likewise determined by linear distance.\n    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;\n    do {\n      if (sj <= sk) {\n        if (intersects(j._, c._)) {\n          b = j, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sj += j._.r, j = j.next;\n      } else {\n        if (intersects(k._, c._)) {\n          a = k, a.next = b, b.previous = a, --i;\n          continue pack;\n        }\n        sk += k._.r, k = k.previous;\n      }\n    } while (j !== k.next);\n\n    // Success! Insert the new circle c between a and b.\n    c.previous = a, c.next = b, a.next = b.previous = b = c;\n\n    // Compute the new closest circle pair to the centroid.\n    aa = score(a);\n    while ((c = c.next) !== b) {\n      if ((ca = score(c)) < aa) {\n        a = c, aa = ca;\n      }\n    }\n    b = a.next;\n  }\n\n  // Compute the enclosing circle of the front chain.\n  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);\n\n  // Translate the circles to put the enclosing circle around the origin.\n  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;\n\n  return c.r;\n}\n\nfunction siblings(circles) {\n  packEnclose(circles);\n  return circles;\n}\n\nfunction optional(f) {\n  return f == null ? null : required(f);\n}\n\nfunction required(f) {\n  if (typeof f !== \"function\") throw new Error;\n  return f;\n}\n\nfunction constantZero() {\n  return 0;\n}\n\nfunction constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nfunction defaultRadius(d) {\n  return Math.sqrt(d.value);\n}\n\nfunction index() {\n  var radius = null,\n      dx = 1,\n      dy = 1,\n      padding = constantZero;\n\n  function pack(root) {\n    root.x = dx / 2, root.y = dy / 2;\n    if (radius) {\n      root.eachBefore(radiusLeaf(radius))\n          .eachAfter(packChildren(padding, 0.5))\n          .eachBefore(translateChild(1));\n    } else {\n      root.eachBefore(radiusLeaf(defaultRadius))\n          .eachAfter(packChildren(constantZero, 1))\n          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))\n          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));\n    }\n    return root;\n  }\n\n  pack.radius = function(x) {\n    return arguments.length ? (radius = optional(x), pack) : radius;\n  };\n\n  pack.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];\n  };\n\n  pack.padding = function(x) {\n    return arguments.length ? (padding = typeof x === \"function\" ? x : constant(+x), pack) : padding;\n  };\n\n  return pack;\n}\n\nfunction radiusLeaf(radius) {\n  return function(node) {\n    if (!node.children) {\n      node.r = Math.max(0, +radius(node) || 0);\n    }\n  };\n}\n\nfunction packChildren(padding, k) {\n  return function(node) {\n    if (children = node.children) {\n      var children,\n          i,\n          n = children.length,\n          r = padding(node) * k || 0,\n          e;\n\n      if (r) for (i = 0; i < n; ++i) children[i].r += r;\n      e = packEnclose(children);\n      if (r) for (i = 0; i < n; ++i) children[i].r -= r;\n      node.r = e + r;\n    }\n  };\n}\n\nfunction translateChild(k) {\n  return function(node) {\n    var parent = node.parent;\n    node.r *= k;\n    if (parent) {\n      node.x = parent.x + k * node.x;\n      node.y = parent.y + k * node.y;\n    }\n  };\n}\n\nfunction roundNode(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n\nfunction treemapDice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (x1 - x0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.y0 = y0, node.y1 = y1;\n    node.x0 = x0, node.x1 = x0 += node.value * k;\n  }\n}\n\nfunction partition() {\n  var dx = 1,\n      dy = 1,\n      padding = 0,\n      round = false;\n\n  function partition(root) {\n    var n = root.height + 1;\n    root.x0 =\n    root.y0 = padding;\n    root.x1 = dx;\n    root.y1 = dy / n;\n    root.eachBefore(positionNode(dy, n));\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(dy, n) {\n    return function(node) {\n      if (node.children) {\n        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);\n      }\n      var x0 = node.x0,\n          y0 = node.y0,\n          x1 = node.x1 - padding,\n          y1 = node.y1 - padding;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      node.x0 = x0;\n      node.y0 = y0;\n      node.x1 = x1;\n      node.y1 = y1;\n    };\n  }\n\n  partition.round = function(x) {\n    return arguments.length ? (round = !!x, partition) : round;\n  };\n\n  partition.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];\n  };\n\n  partition.padding = function(x) {\n    return arguments.length ? (padding = +x, partition) : padding;\n  };\n\n  return partition;\n}\n\nvar preroot = {depth: -1},\n    ambiguous = {};\n\nfunction defaultId(d) {\n  return d.id;\n}\n\nfunction defaultParentId(d) {\n  return d.parentId;\n}\n\nfunction stratify() {\n  var id = defaultId,\n      parentId = defaultParentId;\n\n  function stratify(data) {\n    var nodes = Array.from(data),\n        n = nodes.length,\n        d,\n        i,\n        root,\n        parent,\n        node,\n        nodeId,\n        nodeKey,\n        nodeByKey = new Map;\n\n    for (i = 0; i < n; ++i) {\n      d = nodes[i], node = nodes[i] = new Node(d);\n      if ((nodeId = id(d, i, data)) != null && (nodeId += \"\")) {\n        nodeKey = node.id = nodeId;\n        nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);\n      }\n      if ((nodeId = parentId(d, i, data)) != null && (nodeId += \"\")) {\n        node.parent = nodeId;\n      }\n    }\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      if (nodeId = node.parent) {\n        parent = nodeByKey.get(nodeId);\n        if (!parent) throw new Error(\"missing: \" + nodeId);\n        if (parent === ambiguous) throw new Error(\"ambiguous: \" + nodeId);\n        if (parent.children) parent.children.push(node);\n        else parent.children = [node];\n        node.parent = parent;\n      } else {\n        if (root) throw new Error(\"multiple roots\");\n        root = node;\n      }\n    }\n\n    if (!root) throw new Error(\"no root\");\n    root.parent = preroot;\n    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);\n    root.parent = null;\n    if (n > 0) throw new Error(\"cycle\");\n\n    return root;\n  }\n\n  stratify.id = function(x) {\n    return arguments.length ? (id = required(x), stratify) : id;\n  };\n\n  stratify.parentId = function(x) {\n    return arguments.length ? (parentId = required(x), stratify) : parentId;\n  };\n\n  return stratify;\n}\n\nfunction defaultSeparation$1(a, b) {\n  return a.parent === b.parent ? 1 : 2;\n}\n\n// function radialSeparation(a, b) {\n//   return (a.parent === b.parent ? 1 : 2) / a.depth;\n// }\n\n// This function is used to traverse the left contour of a subtree (or\n// subforest). It returns the successor of v on this contour. This successor is\n// either given by the leftmost child of v or by the thread of v. The function\n// returns null if and only if v is on the highest level of its subtree.\nfunction nextLeft(v) {\n  var children = v.children;\n  return children ? children[0] : v.t;\n}\n\n// This function works analogously to nextLeft.\nfunction nextRight(v) {\n  var children = v.children;\n  return children ? children[children.length - 1] : v.t;\n}\n\n// Shifts the current subtree rooted at w+. This is done by increasing\n// prelim(w+) and mod(w+) by shift.\nfunction moveSubtree(wm, wp, shift) {\n  var change = shift / (wp.i - wm.i);\n  wp.c -= change;\n  wp.s += shift;\n  wm.c += change;\n  wp.z += shift;\n  wp.m += shift;\n}\n\n// All other shifts, applied to the smaller subtrees between w- and w+, are\n// performed by this function. To prepare the shifts, we have to adjust\n// change(w+), shift(w+), and change(w-).\nfunction executeShifts(v) {\n  var shift = 0,\n      change = 0,\n      children = v.children,\n      i = children.length,\n      w;\n  while (--i >= 0) {\n    w = children[i];\n    w.z += shift;\n    w.m += shift;\n    shift += w.s + (change += w.c);\n  }\n}\n\n// If vi-\u2019s ancestor is a sibling of v, returns vi-\u2019s ancestor. Otherwise,\n// returns the specified (default) ancestor.\nfunction nextAncestor(vim, v, ancestor) {\n  return vim.a.parent === v.parent ? vim.a : ancestor;\n}\n\nfunction TreeNode(node, i) {\n  this._ = node;\n  this.parent = null;\n  this.children = null;\n  this.A = null; // default ancestor\n  this.a = this; // ancestor\n  this.z = 0; // prelim\n  this.m = 0; // mod\n  this.c = 0; // change\n  this.s = 0; // shift\n  this.t = null; // thread\n  this.i = i; // number\n}\n\nTreeNode.prototype = Object.create(Node.prototype);\n\nfunction treeRoot(root) {\n  var tree = new TreeNode(root, 0),\n      node,\n      nodes = [tree],\n      child,\n      children,\n      i,\n      n;\n\n  while (node = nodes.pop()) {\n    if (children = node._.children) {\n      node.children = new Array(n = children.length);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new TreeNode(children[i], i));\n        child.parent = node;\n      }\n    }\n  }\n\n  (tree.parent = new TreeNode(null, 0)).children = [tree];\n  return tree;\n}\n\n// Node-link tree diagram using the Reingold-Tilford \"tidy\" algorithm\nfunction tree() {\n  var separation = defaultSeparation$1,\n      dx = 1,\n      dy = 1,\n      nodeSize = null;\n\n  function tree(root) {\n    var t = treeRoot(root);\n\n    // Compute the layout using Buchheim et al.\u2019s algorithm.\n    t.eachAfter(firstWalk), t.parent.m = -t.z;\n    t.eachBefore(secondWalk);\n\n    // If a fixed node size is specified, scale x and y.\n    if (nodeSize) root.eachBefore(sizeNode);\n\n    // If a fixed tree size is specified, scale x and y based on the extent.\n    // Compute the left-most, right-most, and depth-most nodes for extents.\n    else {\n      var left = root,\n          right = root,\n          bottom = root;\n      root.eachBefore(function(node) {\n        if (node.x < left.x) left = node;\n        if (node.x > right.x) right = node;\n        if (node.depth > bottom.depth) bottom = node;\n      });\n      var s = left === right ? 1 : separation(left, right) / 2,\n          tx = s - left.x,\n          kx = dx / (right.x + s + tx),\n          ky = dy / (bottom.depth || 1);\n      root.eachBefore(function(node) {\n        node.x = (node.x + tx) * kx;\n        node.y = node.depth * ky;\n      });\n    }\n\n    return root;\n  }\n\n  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is\n  // applied recursively to the children of v, as well as the function\n  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the\n  // node v is placed to the midpoint of its outermost children.\n  function firstWalk(v) {\n    var children = v.children,\n        siblings = v.parent.children,\n        w = v.i ? siblings[v.i - 1] : null;\n    if (children) {\n      executeShifts(v);\n      var midpoint = (children[0].z + children[children.length - 1].z) / 2;\n      if (w) {\n        v.z = w.z + separation(v._, w._);\n        v.m = v.z - midpoint;\n      } else {\n        v.z = midpoint;\n      }\n    } else if (w) {\n      v.z = w.z + separation(v._, w._);\n    }\n    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);\n  }\n\n  // Computes all real x-coordinates by summing up the modifiers recursively.\n  function secondWalk(v) {\n    v._.x = v.z + v.parent.m;\n    v.m += v.parent.m;\n  }\n\n  // The core of the algorithm. Here, a new subtree is combined with the\n  // previous subtrees. Threads are used to traverse the inside and outside\n  // contours of the left and right subtree up to the highest common level. The\n  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the\n  // superscript o means outside and i means inside, the subscript - means left\n  // subtree and + means right subtree. For summing up the modifiers along the\n  // contour, we use respective variables si+, si-, so-, and so+. Whenever two\n  // nodes of the inside contours conflict, we compute the left one of the\n  // greatest uncommon ancestors using the function ANCESTOR and call MOVE\n  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.\n  // Finally, we add a new thread (if necessary).\n  function apportion(v, w, ancestor) {\n    if (w) {\n      var vip = v,\n          vop = v,\n          vim = w,\n          vom = vip.parent.children[0],\n          sip = vip.m,\n          sop = vop.m,\n          sim = vim.m,\n          som = vom.m,\n          shift;\n      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {\n        vom = nextLeft(vom);\n        vop = nextRight(vop);\n        vop.a = v;\n        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);\n        if (shift > 0) {\n          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);\n          sip += shift;\n          sop += shift;\n        }\n        sim += vim.m;\n        sip += vip.m;\n        som += vom.m;\n        sop += vop.m;\n      }\n      if (vim && !nextRight(vop)) {\n        vop.t = vim;\n        vop.m += sim - sop;\n      }\n      if (vip && !nextLeft(vom)) {\n        vom.t = vip;\n        vom.m += sip - som;\n        ancestor = v;\n      }\n    }\n    return ancestor;\n  }\n\n  function sizeNode(node) {\n    node.x *= dx;\n    node.y = node.depth * dy;\n  }\n\n  tree.separation = function(x) {\n    return arguments.length ? (separation = x, tree) : separation;\n  };\n\n  tree.size = function(x) {\n    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);\n  };\n\n  tree.nodeSize = function(x) {\n    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);\n  };\n\n  return tree;\n}\n\nfunction treemapSlice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      node,\n      i = -1,\n      n = nodes.length,\n      k = parent.value && (y1 - y0) / parent.value;\n\n  while (++i < n) {\n    node = nodes[i], node.x0 = x0, node.x1 = x1;\n    node.y0 = y0, node.y1 = y0 += node.value * k;\n  }\n}\n\nvar phi = (1 + Math.sqrt(5)) / 2;\n\nfunction squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [],\n      nodes = parent.children,\n      row,\n      nodeValue,\n      i0 = 0,\n      i1 = 0,\n      n = nodes.length,\n      dx, dy,\n      value = parent.value,\n      sumValue,\n      minValue,\n      maxValue,\n      newRatio,\n      minRatio,\n      alpha,\n      beta;\n\n  while (i0 < n) {\n    dx = x1 - x0, dy = y1 - y0;\n\n    // Find the next non-empty node.\n    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      sumValue += nodeValue = nodes[i1].value;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) { sumValue -= nodeValue; break; }\n      minRatio = newRatio;\n    }\n\n    // Position and record the row orientation.\n    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});\n    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    value -= sumValue, i0 = i1;\n  }\n\n  return rows;\n}\n\nvar squarify = (function custom(ratio) {\n\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n})(phi);\n\nfunction index$1() {\n  var tile = squarify,\n      round = false,\n      dx = 1,\n      dy = 1,\n      paddingStack = [0],\n      paddingInner = constantZero,\n      paddingTop = constantZero,\n      paddingRight = constantZero,\n      paddingBottom = constantZero,\n      paddingLeft = constantZero;\n\n  function treemap(root) {\n    root.x0 =\n    root.y0 = 0;\n    root.x1 = dx;\n    root.y1 = dy;\n    root.eachBefore(positionNode);\n    paddingStack = [0];\n    if (round) root.eachBefore(roundNode);\n    return root;\n  }\n\n  function positionNode(node) {\n    var p = paddingStack[node.depth],\n        x0 = node.x0 + p,\n        y0 = node.y0 + p,\n        x1 = node.x1 - p,\n        y1 = node.y1 - p;\n    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;\n      x0 += paddingLeft(node) - p;\n      y0 += paddingTop(node) - p;\n      x1 -= paddingRight(node) - p;\n      y1 -= paddingBottom(node) - p;\n      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;\n      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;\n      tile(node, x0, y0, x1, y1);\n    }\n  }\n\n  treemap.round = function(x) {\n    return arguments.length ? (round = !!x, treemap) : round;\n  };\n\n  treemap.size = function(x) {\n    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];\n  };\n\n  treemap.tile = function(x) {\n    return arguments.length ? (tile = required(x), treemap) : tile;\n  };\n\n  treemap.padding = function(x) {\n    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();\n  };\n\n  treemap.paddingInner = function(x) {\n    return arguments.length ? (paddingInner = typeof x === \"function\" ? x : constant(+x), treemap) : paddingInner;\n  };\n\n  treemap.paddingOuter = function(x) {\n    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();\n  };\n\n  treemap.paddingTop = function(x) {\n    return arguments.length ? (paddingTop = typeof x === \"function\" ? x : constant(+x), treemap) : paddingTop;\n  };\n\n  treemap.paddingRight = function(x) {\n    return arguments.length ? (paddingRight = typeof x === \"function\" ? x : constant(+x), treemap) : paddingRight;\n  };\n\n  treemap.paddingBottom = function(x) {\n    return arguments.length ? (paddingBottom = typeof x === \"function\" ? x : constant(+x), treemap) : paddingBottom;\n  };\n\n  treemap.paddingLeft = function(x) {\n    return arguments.length ? (paddingLeft = typeof x === \"function\" ? x : constant(+x), treemap) : paddingLeft;\n  };\n\n  return treemap;\n}\n\nfunction binary(parent, x0, y0, x1, y1) {\n  var nodes = parent.children,\n      i, n = nodes.length,\n      sum, sums = new Array(n + 1);\n\n  for (sums[0] = sum = i = 0; i < n; ++i) {\n    sums[i + 1] = sum += nodes[i].value;\n  }\n\n  partition(0, n, parent.value, x0, y0, x1, y1);\n\n  function partition(i, j, value, x0, y0, x1, y1) {\n    if (i >= j - 1) {\n      var node = nodes[i];\n      node.x0 = x0, node.y0 = y0;\n      node.x1 = x1, node.y1 = y1;\n      return;\n    }\n\n    var valueOffset = sums[i],\n        valueTarget = (value / 2) + valueOffset,\n        k = i + 1,\n        hi = j - 1;\n\n    while (k < hi) {\n      var mid = k + hi >>> 1;\n      if (sums[mid] < valueTarget) k = mid + 1;\n      else hi = mid;\n    }\n\n    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;\n\n    var valueLeft = sums[k] - valueOffset,\n        valueRight = value - valueLeft;\n\n    if ((x1 - x0) > (y1 - y0)) {\n      var xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1;\n      partition(i, k, valueLeft, x0, y0, xk, y1);\n      partition(k, j, valueRight, xk, y0, x1, y1);\n    } else {\n      var yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1;\n      partition(i, k, valueLeft, x0, y0, x1, yk);\n      partition(k, j, valueRight, x0, yk, x1, y1);\n    }\n  }\n}\n\nfunction sliceDice(parent, x0, y0, x1, y1) {\n  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);\n}\n\nvar resquarify = (function custom(ratio) {\n\n  function resquarify(parent, x0, y0, x1, y1) {\n    if ((rows = parent._squarify) && (rows.ratio === ratio)) {\n      var rows,\n          row,\n          nodes,\n          i,\n          j = -1,\n          n,\n          m = rows.length,\n          value = parent.value;\n\n      while (++j < m) {\n        row = rows[j], nodes = row.children;\n        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;\n        if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += (y1 - y0) * row.value / value : y1);\n        else treemapSlice(row, x0, y0, value ? x0 += (x1 - x0) * row.value / value : x1, y1);\n        value -= row.value;\n      }\n    } else {\n      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);\n      rows.ratio = ratio;\n    }\n  }\n\n  resquarify.ratio = function(x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return resquarify;\n})(phi);\n\nexports.cluster = cluster;\nexports.hierarchy = hierarchy;\nexports.pack = index;\nexports.packEnclose = enclose;\nexports.packSiblings = siblings;\nexports.partition = partition;\nexports.stratify = stratify;\nexports.tree = tree;\nexports.treemap = index$1;\nexports.treemapBinary = binary;\nexports.treemapDice = treemapDice;\nexports.treemapResquarify = resquarify;\nexports.treemapSlice = treemapSlice;\nexports.treemapSliceDice = sliceDice;\nexports.treemapSquarify = squarify;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","self","d3","defaultSeparation","a","b","parent","meanXReduce","x","c","maxYReduce","y","Math","max","leafLeft","node","children","leafRight","length","count","sum","i","value","hierarchy","data","Map","undefined","mapChildren","objectChildren","root","Node","nodes","child","childs","n","pop","Array","from","push","depth","eachBefore","computeHeight","d","isArray","copyData","height","enclose","circles","m","array","t","random","B","e","p","enclosesWeak","enclosesWeakAll","enclosesNot","encloseBasis2","j","encloseBasis3","Error","r","dr","dx","dy","x1","y1","r1","x2","y2","r2","x21","y21","r21","l","sqrt","x3","y3","r3","a2","a3","b2","b3","c2","c3","d1","d2","ab","xa","xb","ya","yb","A","C","place","intersects","score","_","next","Node$1","circle","previous","packEnclose","k","sj","sk","aa","ca","required","f","constantZero","constant","defaultRadius","radiusLeaf","radius","packChildren","padding","translateChild","roundNode","x0","round","y0","treemapDice","defaultId","id","defaultParentId","parentId","defaultSeparation$1","nextLeft","v","nextRight","TreeNode","s","z","treeRoot","tree","treemapSlice","squarifyRatio","ratio","rows","row","nodeValue","i1","i0","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","dice","slice","prototype","constructor","node_count","eachAfter","each","node_each","callback","that","index","call","node_eachAfter","node_eachBefore","find","node_find","node_sum","sort","node_sort","compare","path","node_path","end","start","aNodes","ancestors","bNodes","ancestor","splice","node_ancestors","descendants","node_descendants","leaves","node_leaves","links","node_links","source","target","copy","node_copy","Symbol","iterator","node_iterator","current","reverse","preroot","ambiguous","Object","create","phi","squarify","custom","squarify.ratio","resquarify","_squarify","resquarify.ratio","cluster","previousNode","reduce","separation","left","right","nodeSize","cluster.separation","arguments","size","cluster.size","cluster.nodeSize","pack","min","pack.radius","pack.size","pack.padding","packSiblings","siblings","partition","positionNode","partition.round","partition.size","partition.padding","stratify","nodeId","nodeByKey","nodeKey","set","has","get","stratify.id","stratify.parentId","firstWalk","secondWalk","sizeNode","bottom","tx","kx","ky","w","shift","change","midpoint","vop","vip","vom","sip","sop","sim","vim","som","wp","wm","tree.separation","tree.size","tree.nodeSize","treemap","index$1","paddingStack","paddingInner","paddingLeft","paddingTop","paddingRight","paddingBottom","tile","treemap.round","treemap.size","treemap.tile","treemap.padding","paddingOuter","treemap.paddingInner","treemap.paddingOuter","treemap.paddingTop","treemap.paddingRight","treemap.paddingBottom","treemap.paddingLeft","treemapBinary","binary","valueOffset","sums","valueTarget","hi","mid","valueLeft","valueRight","xk","yk","treemapResquarify","treemapSliceDice","sliceDice","treemapSquarify","defineProperty"]
}
