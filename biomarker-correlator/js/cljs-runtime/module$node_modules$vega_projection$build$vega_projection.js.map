{
"version":3,
"file":"module$node_modules$vega_projection$build$vega_projection.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/vega-projection/build/vega-projection.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_projection$build$vega_projection\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-geo'), require('d3-geo-projection')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'd3-geo', 'd3-geo-projection'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.d3, global.d3));\n}(this, (function (exports, d3Geo, d3GeoProjection) { 'use strict';\n\n  const defaultPath = d3Geo.geoPath();\n  const projectionProperties = [// standard properties in d3-geo\n  'clipAngle', 'clipExtent', 'scale', 'translate', 'center', 'rotate', 'parallels', 'precision', 'reflectX', 'reflectY', // extended properties in d3-geo-projections\n  'coefficient', 'distance', 'fraction', 'lobes', 'parallel', 'radius', 'ratio', 'spacing', 'tilt'];\n  /**\n   * Augment projections with their type and a copy method.\n   */\n\n  function create(type, constructor) {\n    return function projection() {\n      const p = constructor();\n      p.type = type;\n      p.path = d3Geo.geoPath().projection(p);\n\n      p.copy = p.copy || function () {\n        const c = projection();\n        projectionProperties.forEach(prop => {\n          if (p[prop]) c[prop](p[prop]());\n        });\n        c.path.pointRadius(p.path.pointRadius());\n        return c;\n      };\n\n      return p;\n    };\n  }\n\n  function projection(type, proj) {\n    if (!type || typeof type !== 'string') {\n      throw new Error('Projection type must be a name string.');\n    }\n\n    type = type.toLowerCase();\n\n    if (arguments.length > 1) {\n      projections[type] = create(type, proj);\n      return this;\n    } else {\n      return projections[type] || null;\n    }\n  }\n  function getProjectionPath(proj) {\n    return proj && proj.path || defaultPath;\n  }\n  const projections = {\n    // base d3-geo projection types\n    albers: d3Geo.geoAlbers,\n    albersusa: d3Geo.geoAlbersUsa,\n    azimuthalequalarea: d3Geo.geoAzimuthalEqualArea,\n    azimuthalequidistant: d3Geo.geoAzimuthalEquidistant,\n    conicconformal: d3Geo.geoConicConformal,\n    conicequalarea: d3Geo.geoConicEqualArea,\n    conicequidistant: d3Geo.geoConicEquidistant,\n    equalEarth: d3Geo.geoEqualEarth,\n    equirectangular: d3Geo.geoEquirectangular,\n    gnomonic: d3Geo.geoGnomonic,\n    identity: d3Geo.geoIdentity,\n    mercator: d3Geo.geoMercator,\n    mollweide: d3GeoProjection.geoMollweide,\n    naturalEarth1: d3Geo.geoNaturalEarth1,\n    orthographic: d3Geo.geoOrthographic,\n    stereographic: d3Geo.geoStereographic,\n    transversemercator: d3Geo.geoTransverseMercator\n  };\n\n  for (const key in projections) {\n    projection(key, projections[key]);\n  }\n\n  exports.getProjectionPath = getProjectionPath;\n  exports.projection = projection;\n  exports.projectionProperties = projectionProperties;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","d3Geo","d3GeoProjection","create","type","constructor","projection","p","path","geoPath","copy","c","projectionProperties","forEach","prop","pointRadius","proj","Error","toLowerCase","arguments","length","projections","defaultPath","albers","geoAlbers","albersusa","geoAlbersUsa","azimuthalequalarea","geoAzimuthalEqualArea","azimuthalequidistant","geoAzimuthalEquidistant","conicconformal","geoConicConformal","conicequalarea","geoConicEqualArea","conicequidistant","geoConicEquidistant","equalEarth","geoEqualEarth","equirectangular","geoEquirectangular","gnomonic","geoGnomonic","identity","geoIdentity","mercator","geoMercator","mollweide","geoMollweide","naturalEarth1","geoNaturalEarth1","orthographic","geoOrthographic","stereographic","geoStereographic","transversemercator","geoTransverseMercator","key","getProjectionPath","Object","defineProperty","value"]
}
