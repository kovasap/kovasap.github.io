{"version":3,"sources":["app/csv_data_processing.cljs"],"mappings":"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","names":["app.csv-data-processing/DatedRow","app.time/Date","app.csv-data-processing/ProcessedRow","app.time/Timestamp","app.csv-data-processing/get-rows-by-dates","rows","cljs.core.into","cljs.core/sorted-map","cljs.core.map","row","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","app.csv-data-processing/merge-rows-using-dates","seq48330","self__4852__auto__","cljs.core/seq","sets-of-rows","cljs.core/vals","cljs.core.apply","cljs.core/merge-with","row1","row2","cljs.core.merge","app.csv-data-processing/add-timestamps","data","p1__48331#","cljs.core.assoc","app.time/date-to-timestamp","app.csv-data-processing/not-NaN","v","cljs.core._EQ_","app.csv-data-processing/floatify-data","iter__4652__auto__","s__48333","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__48335","cljs.core/chunk-buffer","i__48334","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48332","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__48337","b__48339","i__48338","vec__48340","cljs.core.nth","iter__48336","vec__48343","s__48347","b__48349","i__48348","vec__48350","iter__48346","vec__48353","k","js/parseFloat","app.csv-data-processing/process-csv-data","seq48356","app.csv_data_processing.process_csv_data","cljs.core/chunk-first"],"sourcesContent":["(ns app.csv-data-processing\n  (:require\n    [app.time :as time]\n    [clojure.string :refer [replace]]))\n\n(def DatedRow\n  [:map [:date time/Date]])\n\n; TODO add `:keyword :double` pairs when\n; https://github.com/metosin/malli/issues/682 is closed.\n(def ProcessedRow\n  [:map [:date time/Date]\n        [:timestamp time/Timestamp]])\n\n; Returns map of dates to :dated-row maps.\n;; TODO figure out how to express this in spec\n(defn get-rows-by-dates [rows]\n  ; TODO find out how to get spec to do this assert for me\n  ; (assert (:date (first rows)))\n  (into (sorted-map) (map (fn [row] [(:date row) row]) rows)))\n\n(defn merge-rows-using-dates\n  \"Merges N sequences of row maps (e.g. from different spreadsheets) using\n  the :date field as the joining attribute.\"\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential DatedRow]]}\n  [& sets-of-rows]\n  (vals (apply merge-with (fn [row1 row2] (merge row1 row2))\n               (map get-rows-by-dates sets-of-rows))))\n\n\n(defn add-timestamps\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (map #(assoc % :timestamp (time/date-to-timestamp (:date %))) data))\n\n(defn not-NaN\n  [v]\n  (not (or (nil? v) (= \"\" v))))\n\n(defn floatify-data\n  {:malli/schema [:=> [:cat [:sequential DatedRow]]\n                  [:sequential DatedRow]]}\n  [data]\n  (for [row data]\n    (into {} (for [[k v] row\n                   :when (not-NaN v)]\n               [k (if (= k :date) v (js/parseFloat v))]))))\n\n(floatify-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}])\n\n(defn process-csv-data\n  {:malli/schema [:=> [:cat [:* [:sequential DatedRow]]]\n                  [:sequential ProcessedRow]]}\n  [& sets-of-rows]\n  (-> (apply merge-rows-using-dates sets-of-rows)\n    add-timestamps\n    floatify-data))\n\n(process-csv-data [{:a \"100\" :b \"20\" :date \"4/2/00 to 5/2/00\"}\n                   {:a \"100\" :b \"20\" :date \"4/2/10\"}]\n                  [{:c \"100\" :d \"20\" :date \"4/2/10\"}\n                   {:c \"\" :d \"20\" :date \"4/2/10\"}])\n"]}