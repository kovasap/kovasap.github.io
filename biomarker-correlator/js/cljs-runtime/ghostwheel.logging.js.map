{"version":3,"sources":["ghostwheel/logging.cljc"],"mappings":"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","names":["ghostwheel.logging/*nesting","cljs.core.atom","ghostwheel.logging/*report-output*","ghostwheel.logging/ghostwheel-colors","ghostwheel.logging/ops-with-bindings","ghostwheel.logging/wrap-line","size","text","cljs.pprint.cl_format","clojure.string.split","ghostwheel.logging/wrap","line","ghostwheel.logging/truncate-string","long-string","limit","cljs.core/count","cljs.core.subs","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","ghostwheel.logging/get-styled-label","p__51682","p__51683","map__51684","cljs.core/--destructure-map","foreground","cljs.core.get","background","weight","vec__51685","cljs.core.nth","seq51666","G__51667","cljs.core/first","cljs.core/next","G__51668","G__51669","self__4851__auto__","label","style","output","length","cljs.core/not","G__51690","cljs.core._EQ_","cljs.core/vec","cljs.core.remove","cljs.core/nil?","ghostwheel.logging/plain-log","msg","cljs.core.println","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__51694","cljs.core/*print-newline*","*print-fn*-orig-val__51695","cljs.core/*print-fn*","*print-newline*-temp-val__51696","*print-fn*-temp-val__51697","x__4796__auto__","cljs.pprint.pprint","clojure.string/split-lines","p1__51693#","cljs.core.map","cljs.core/deref","clojure.string.join","G__51704","ghostwheel.logging/log","js/Error","ghostwheel.logging.log","styled-msg","G__51715","cljs.core/Keyword","cljs.core.apply","js/console.log","js/console","cljs.core/to-array","G__51719","ghostwheel.logging/DBG","args-arr__4885__auto__","argseq__4886__auto__","seq51718","self__4852__auto__","cljs.core/seq","msgs","seq__51724","chunk__51725","count__51726","i__51727","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/last","ghostwheel.logging/log-raw","seq51746","G__51747","format-strings","objs","G__51750","seq__51751","chunk__51752","count__51753","i__51754","obj","cljs.core.concat","ghostwheel.logging/error","G__51778","js/console.error","ghostwheel.logging/plain-group","p1__51782#","cljs.core.swap_BANG_","G__51789","ghostwheel.logging/group*","open?","ghostwheel.logging.group_STAR_","styled-label","G__51791","js/console.group","js/console.groupCollapsed","G__51797","ghostwheel.logging/group","ghostwheel.logging.group","G__51803","ghostwheel.logging/group-collapsed","plain-group-end","p1__51809#","x__4336__auto__","y__4337__auto__","ghostwheel.logging/group-end","G__51818","js/console.groupEnd","ghostwheel.logging/log-bold","ghostwheel.logging/clog","data","ghostwheel.logging/pr-clog","p__51835","vec__51836","seq51828","G__51829","G__51830"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ghostwheel.logging\n  \"The primary purpose of this is to provide a simple\n  cross-platform console-logging API \u2013 inspired by JavaScript's\n  console.log/group/groupCollapsed/groupEnd \u2013 which makes sure that\n  structured/styled information is displayed to the best of the output\n  destination's abilities, be it a simple REPL or a browser-based JS console.\"\n  (:require [clojure.string :as string]\n            [clojure.pprint :as pprint]))\n\n\n(def *nesting (atom \"\"))\n\n\n(def ^:dynamic *report-output* #?(:clj  :repl\n                                  :cljs :js-console))\n\n\n(def ghostwheel-colors\n  {:purple0 \"#967a93\"\n   :purple1 \"#b87a93\"\n   :purple2 \"#7d9cf8\"\n   :orange0 \"#fe8709\"\n   :orange1 \"#f17d3e\"\n   :green0  \"#82da38\"\n   :green1  \"#54a627\"\n   ;; Solarized colours\n   :base03  \"#002b36\"\n   :black   \"#002b36\"\n   :base02  \"#073642\"\n   :base01  \"#586e75\"\n   :base00  \"#657b83\"\n   :base0   \"#839496\"\n   :base1   \"#93a1a1\"\n   :base2   \"#eee8d5\"\n   :base3   \"#fdf6e3\"\n   :yellow  \"#b58900\"\n   :orange  \"#cb4b16\"\n   :red     \"#dc322f\"\n   :magenta \"#d33682\"\n   :violet  \"#6c71c4\"\n   :blue    \"#268bd2\"\n   :cyan    \"#2aa198\"\n   :green   \"#859900\"})\n\n\n(def ops-with-bindings\n  #{'fn*\n    'fn\n    'ghostwheel.tracer/fn\n    'defn\n    'ghostwheel.tracer/defn\n    'defn-\n    'ghostwheel.tracer/defn-\n    'defmethod\n    'ghostwheel.tracer/defmethod\n    'deftype\n    'ghostwheel.tracer/deftype\n    'defrecord\n    'ghostwheel.tracer/defrecord\n    'reify\n    'ghostwheel.tracer/reify\n    'let\n    'ghostwheel.tracer/let\n    'extend-type\n    'ghostwheel.tracer/extend-type\n    'extend-protocol\n    'ghostwheel.tracer/extend-protocol})\n\n\n;; Borrowed from Rosetta Code\n(defn wrap-line [size text]\n  (pprint/cl-format nil\n                    (str \"~{~<~%~1,\" size \":;~A~> ~}\")\n                    (string/split text #\" \")))\n\n\n(defn wrap [line]\n  (wrap-line 80 line))\n\n\n(defn truncate-string\n  [long-string limit]\n  (if (> (count long-string) limit)\n    (str (subs long-string 0 limit) \"...\")\n    long-string))\n\n\n(defn get-styled-label\n  [label {:keys [::foreground ::background ::weight] :as style} output & [length]]\n  (if-not style\n    [label]\n    (let [label (cond->> (if length\n                           (truncate-string label length)\n                           label)\n                         (= output :js-console) (str \"%c\"))\n          style (when (= output :js-console)\n                  (str \"color: \" (cond foreground foreground\n                                       background \"white\"\n                                       :else (:black ghostwheel-colors)) \";\"\n                       \"background: \" (if background background \"white\") \";\"\n                       \"font-weight: \" (if weight weight \"500\") \";\"\n                       (when background \"text-shadow: 0.5px 0.5px black;\")\n                       (when background \"padding: 2px 6px; border-radius: 2px;\")))]\n      (vec (remove nil? [label style])))))\n\n\n(defn- plain-log [msg]\n  (println (->> (if (string? msg)\n                  msg\n                  (with-out-str (pprint/pprint msg)))\n                string/split-lines\n                (map #(str @*nesting %))\n                (string/join \"\\n\"))))\n\n\n(defn log\n  ([]\n   (log \"\" nil))\n  ([msg]\n   (log msg nil))\n  ([msg style]\n   (let [styled-msg (get-styled-label msg style *report-output*)]\n     (case *report-output*\n       :repl (apply plain-log styled-msg)\n       :js-console #?(:cljs (.apply js/console.log js/console (to-array styled-msg))\n                      :clj  nil)))))\n\n\n(defn DBG\n  ([]\n   (log \"#> MARK\"))\n  ([& msgs]\n   (do\n     (doseq [msg msgs]\n       #?(:clj  (.println System/err (pprint/pprint msg))\n          :cljs (if (nil? msg) (log \"nil\") (log msg))))\n     (last msgs))))\n\n\n(defn log-raw\n  [format-strings & objs]\n  (case *report-output*\n    :repl (doseq [obj objs] (plain-log obj))\n    :js-console #?(:cljs (.apply js/console.log js/console (to-array (concat format-strings objs)))\n                   :clj  nil)))\n\n\n(defn error [msg]\n  (case *report-output*\n    :repl (do (plain-log \"ERROR:\") (plain-log msg))\n    :js-console #?(:cljs (js/console.error msg)\n                   :clj  nil)))\n\n\n(defn- plain-group [label]\n  (do\n    (log)\n    (log (str \"|> \" label))\n    (swap! *nesting #(str % \"| \"))))\n\n\n(defn- group*\n  ([open? label]\n   (group* open? label nil))\n  ([open? label style]\n   (let [styled-label (get-styled-label label style *report-output*)]\n     (case *report-output*\n       :repl (apply plain-group styled-label)\n       :js-console #?(:cljs (.apply (if open?\n                                      js/console.group\n                                      js/console.groupCollapsed)\n                                    js/console\n                                    (to-array styled-label))\n                      :clj  nil)))))\n\n\n(defn group\n  ([label]\n   (group label nil))\n  ([label style]\n   (group* true label style)))\n\n\n(defn group-collapsed\n  ([label]\n   (group label nil))\n  ([label style]\n   (group* false label style)))\n\n\n(let [plain-group-end\n      (fn [] (swap! *nesting #(subs % 0 (max 0 (- (count %) 2)))))]\n  (defn group-end []\n    (case *report-output*\n      :repl (plain-group-end)\n      :js-console #?(:cljs (js/console.groupEnd)\n                     :clj  nil))))\n\n\n(defn log-bold [msg]\n  (log msg {::weight \"bold\"}))\n\n\n(defn clog [data]\n  (do\n    (log data)\n    data))\n\n\n(defn pr-clog\n  \"Pretty console log\"\n  [label data & [style]]\n  (if data\n    (do\n      (group label style)\n      (log data)\n      (group-end))\n    (log label style))\n  data)\n\n\n\n"]}