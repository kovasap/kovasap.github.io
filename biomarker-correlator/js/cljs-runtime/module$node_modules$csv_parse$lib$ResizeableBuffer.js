shadow$provide.module$node_modules$csv_parse$lib$ResizeableBuffer=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;class ResizeableBuffer{constructor(size=100){this.size=size;this.length=0;this.buf=Buffer.allocUnsafe(size)}prepend(val){if(Buffer.isBuffer(val)){var length=this.length+val.length;if(length>=this.size&&(this.resize(),length>=this.size))throw Error("INVALID_BUFFER_STATE");
length=this.buf;this.buf=Buffer.allocUnsafe(this.size);val.copy(this.buf,0);length.copy(this.buf,val.length);this.length+=val.length}else{length=this.length++;length===this.size&&this.resize();const buf=this.clone();this.buf[0]=val;buf.copy(this.buf,1,0,length)}}append(val){const length=this.length++;length===this.size&&this.resize();this.buf[length]=val}clone(){return Buffer.from(this.buf.slice(0,this.length))}resize(){const length=this.length;this.size*=2;const buf=Buffer.allocUnsafe(this.size);
this.buf.copy(buf,0,0,length);this.buf=buf}toString(encoding){return encoding?this.buf.slice(0,this.length).toString(encoding):Uint8Array.prototype.slice.call(this.buf.slice(0,this.length))}toJSON(){return this.toString("utf8")}reset(){this.length=0}}exports.default=ResizeableBuffer}
//# sourceMappingURL=module$node_modules$csv_parse$lib$ResizeableBuffer.js.map
