{"version":3,"sources":["fipp/util.cljc"],"mappings":";AAIA,2BAAA,3BAAMA,8DAAUC;AAAhB,AACE,SAAI,AAAOA,gBAAG,AAAQA;;AAEf,wBAAA,xBAAMC,wDAAOD;AAAb,AAAA;;AAOA,AAAKE,0BAAQC;AAEtB;;;uBAAA,vBAAMC,sDAEHJ;AAFH,AAGE,IAAAK,mBAAI,MAAA,LAAML;AAAV,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBACI,AAACN,yBAASC;AADd,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAEI,OAASL;AAFb,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAGI,AAACJ,sBAAMD;AAHX,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAII,cAAAC,bAASN;AAJb,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAKI,cAAAE,bAAUP;AALd,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAMI,OAASL;AANb,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAOI,AAACG,qBAAKR;AAPV,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBAQI,AAACI,wBAAQT;AARb,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,uBASI,AAACK,wBAAQV;AATb,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,wBAUI,AAACM,qBAAKX;AAVV,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,wBAWI,AAACO,qBAAKZ;AAXV,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,wBAYI,AAACQ,gCAAgBb;AAZrB,AAAA,GAAAK;AAAAA;;AAAA,IAAAA,wBAaI,AAACS,qBAAKd;AAbV,AAAA,GAAAK;AAAAA;;AAcI,QAACH,wDAAAA,2DAAAA,LAAQF,uCAAAA;;;;;;;;;;;;;;;;AAEf,6BAAA,7BAAMe,kEAAYf;AAAlB,AAEW,IAAAgB,oBAAK,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,CAAA,wCAAA,eAAA,CAAAC,gCAAA,2BAAA,KAAA,EAAA,EAAA,wCAAA,AAAAC,yDAAA,QAAA,AAAAA,/BAAYC,iEAAAA,1RAAUnB,mBAAAA,wFAAAA,oCAAAA,8FAAAA,iEAAAA;AAA3B,AAAA,GAAAgB;AACK,UAAK,AAACF,qBAAKd;;AADhBgB;;;AAGX,qCAAA,rCAAKI","names":["fipp.util/boolean?","x","fipp.util/char?","fipp.util/regexp?","cljs.core/regexp?","fipp.util/edn?","or__4253__auto__","cljs.core/Symbol","cljs.core/Keyword","cljs.core/seq?","cljs.core/vector?","cljs.core/record?","cljs.core/map?","cljs.core/set?","cljs.core/tagged-literal?","cljs.core/var?","fipp.util/value-obj?","and__4251__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWithMeta","fipp.util/instant-supported?"],"sourcesContent":["(ns fipp.util\n  (:refer-clojure :exclude [boolean? char? regexp?]))\n\n;;TODO: CLJ-1719 and CLJS-1241\n(defn boolean? [x]\n  (or (true? x) (false? x)))\n\n#?(:cljs (defn char? [x]\n           false)\n   :clj (def char? clojure.core/char?))\n\n;;TODO: CLJ-1720 and CLJS-1242\n#?(:clj (defn regexp? [x]\n          (instance? java.util.regex.Pattern x))\n   :cljs (def regexp? cljs.core/regexp?))\n\n(defn edn?\n  \"Is the root of x an edn type?\"\n  [x]\n  (or (nil? x)\n      (boolean? x)\n      (string? x)\n      (char? x)\n      (symbol? x)\n      (keyword? x)\n      (number? x)\n      (seq? x)\n      (vector? x)\n      (record? x)\n      (map? x)\n      (set? x)\n      (tagged-literal? x)\n      (var? x)\n      (regexp? x)))\n\n(defn value-obj? [x]\n  #?(:clj (instance? clojure.lang.IObj x)\n     :cljs (and (satisfies? IWithMeta x)\n                (not (var? x))))) ;TODO: CLJS-2398\n\n(def instant-supported?\n  #?(:clj (and (try\n                 (Class/forName \"java.sql.Timestamp\")\n                 true\n                 (catch ClassNotFoundException _\n                   false))\n               (try\n                 ;; Strangely, this can fail even if the previous statement succeeded:\n                 (require '[clojure.instant])\n                 true\n                 (catch ExceptionInInitializerError _\n                   false)))\n     :cljs true))\n"]}