{"version":3,"sources":["fipp/ednize.cljs"],"mappings":";AAIA,AAAA;AAAA;;;;mBAAA,nBAAaO;;AAAb,IAAAP,kCAAA,WAESQ;AAFT,AAAA,IAAAP,kBAAA,EAAA,MAAA,OAAA,ZAESO,iBAAAA;IAFTN,kBAAA,CAAAC,iBAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,mDAAAA,LAESM,+BAAAA;;AAFT,IAAAH,kBAAA,CAAAF,iBAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,mDAAAA,LAESG,+BAAAA;;AAFT,MAAA,AAAAF,2BAAA,YAESE;;;;AAFT,AAAA,mBAAA,nBAEGL,8CAAMK;AAFT,AAAA,GAAA,EAAA,GAAA,MAAA,aAAA,GAAA,CAAA,mCAAA,zDAESA,sBAAAA;AAFT,OAESA,gCAAAA;;AAFT,OAAAR,gCAESQ;;;;AAFT,AAIA,AAAA;AAAA;;;;wBAAA,xBAAaC;;AAAb,AAGA,8BAAA,9BAAMC,oEAAWF;AAAjB,AACE,GAAA,GAAA,MAAA,LAAiBA;AAAjB,GAAA,EAAA,WAAA,CAAAG,gCAAA,AAAiBH;AAAjB;;AAAA,GAAA,EAAA,AAAiBA;AAAjB,OAAAI,kCAAYL,iBAAKC;;AAAjB;;;;AAAA,OAAAI,kCAAYL,iBAAKC;;;AAKnB,kBAAA,lBAAMK,4CAAKL;AAAX,AACE,GAEE,AAACE,4BAAUF;AACX,OAACL,iBAAKK;;AAHR,GAKE,AAACM,wBAAQN;AACT,gCAAA,AAAA,zBAACO,8EACC,6CAAA,7CAACC,gFAAQ,iBAAAC,qBAAA,wCAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAq6EoC,AAAAgD,sBAAArD;IAr6EpCM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFACG,AAACc,gDAAQF,GAAG,CAAM9B,EAAE8B;;AADvB,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,8BAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,eAAA,qJAAA,AAAAH,8BAAA,AAAAI,eAAAnB,/GACG,AAACsB,gDAAQF,GAAG,CAAM9B,EAAE8B;;;AADvB;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAQ,AAACsB,kBAAQ/B;;;AAP9B,GAUE,AAACiC,uBAAOjC;AACR,gCAAA,AAAA,zBAACO,8EAAmB,AAAC2B,cAAIlC;;AAX3B,GAaE,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,CAAA,wCAAA,cAAA,CAAAG,gCAAA,wBAAA,KAAA,EAAA,EAAA,wCAAA,AAAAC,sDAAA,QAAA,AAAAA,5BAAY+B,8DAAAA,nRAAOnC,mBAAAA,uFAAAA,iCAAAA,2FAAAA,8DAAAA;AACnB,IAAMoC,iBAAS,iBAAAC,oBAAK,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,CAAA,wCAAA,UAAA,CAAAlC,gCAAA,0BAAA,KAAA,EAAA,EAAA,wCAAA,AAAAC,wDAAA,QAAA,AAAAA,9BAAYkC,gEAAAA,nRAAStC,mBAAAA,mFAAAA,mCAAAA,6FAAAA,gEAAAA;AAA1B,AAAA,GAAAqC;AACK,UAAK,AAACE,0BAAUvC;;AADrBqC;;;IAGTG,MAAI,kBAAA,KAAA,AAAA,AAAAC,rBAAUL,qCACPpC;IACP0C,SAAO,kBAAA,2DAAA,3EAAIN;AALjB,AAQE,gCAAA,AAAA,8DAAA,mQAAA,2CAAA,iEAAA,tcAAC7B,0KACE,+CAAA,wGAAA,eAAIP,fAAE2C,xGAAKC,/CAAOC,qRACTH,yDAAYF;;AAxB5B,GA0BE,cAAWM,bAAQ9C;AACnB,gCAAA,AAAA,zBAACO,mFACC,iBAAMwC,YAAU,WAAKC,EAAEC;AAAP,AACE,IAAOC,KAAG,4CAAKF;;AAAf,AACE,GAAI,CAAG,EAAOE,cAAID;AAChB,eAAO,CAAA,IAASC;;;;AAChBA;;;;;AAJtB,AAKE,wEAAA,2CAAA,kCAAA,mCAAA,qCAAA,qCAAA,0CAAA,IAAA,5PAAK,AAAiBlD,wBACjB,kCAAA,lCAAC+C,UAAU,mBAAA,lBAAK,AAAc/C,gCAC9B,yBAAA,zBAAC+C,UAAU,AAAa/C,wBACxB,0BAAA,1BAAC+C,UAAU,AAAc/C,yBACzB,4BAAA,5BAAC+C,UAAU,AAAgB/C,2BAC3B,4BAAA,5BAAC+C,UAAU,AAAgB/C,2BAC3B,iCAAA,jCAAC+C,UAAU,AAAqB/C;;;AAvC3C,GA0CE,EAAA,GAAA,MAAA,SAAA,EAAA,EAAA,WAAA,CAAAG,gCAAA,wBAAA,KAAA,EAAA,EAAA,uCAAA,AAAAC,sDAAA,QAAA,AAAAA,5BAAYL,8DAAAA,tOAAKC,8DAAAA,iCAAAA,0FAAAA,8DAAAA;AACjB,OAACL,iBAAKK;;AA3CR,oBA6CE,AAACmD,qBAAKnD;AACNA;;AA9CF,AAkDE,gCAAA,AAAA,8DAAA,vFAACO,0KAAwB,+CAAA,wGAAA,eAAIP,fAAE2C,xGAAKC,/CAAOC;;;;;;;;;;AAI/C,AAAA,AAAA,CAAA,AAAA,6CAAA1C,7CAEEiD;;AAFF,CAAA,AAAA,AAEEA,yDACA,WAAOpD;AAAP,AAAA,YAAA,RAAOA;AAAP,AACE,gCAAA,AAAA,zBAACO,kFAAqB,4CAAKP;;;AAJ/B,AAAA,CAAA,AAAA,sDAAAG,tDAMEkD;;AANF,CAAA,AAAA,AAMEA,kEACA,WAAOrD;AAAP,AAAA,YAAA,RAAOA;AAAP,AACE,gCAAA,AAAA,zBAACO,mGACC,uGAAA,2CAAA,uFAAA,zOAAC+C,6MAAgB,AAACC,qBAAWvD,4DACf,AAACwD,kBAAQxD,eAChB,iBAAAY,qBAAiB,AAAC8C,mBAAS1D;AAA3B,AAAA,oBAAAY;AAAA,AAAA,YAAAA,RAAW6C;AAAX,AAAA,kDAAA,sDACUA;;AADV;;;;AAKb,gCAAA,hCAAME,wEAAgB3D;AAAtB,AACE,OAACO,yBAAe,AAACqD,8CAAMC,iBAAO,mLAAA,KAAA,xLAACC,mDAAQ,wGAAA,eAAI9D,fAAE2C,xGAAKC,2IAClC,6CAAA,7CAACpC,gFAAQR","names":["fipp$ednize$IEdn$_edn$dyn","x__4550__auto__","m__4551__auto__","fipp.ednize/-edn","goog/typeOf","m__4549__auto__","cljs.core/missing-protocol","fipp.ednize/IEdn","x","fipp.ednize/IOverride","fipp.ednize/override?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","fipp.ednize/edn","cljs.core/object?","cljs.core/tagged-literal","cljs.core.into","iter__4652__auto__","s__82998","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__83000","cljs.core/chunk-buffer","i__82999","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__82997","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","k","cljs.core/js-keys","cljs.core.keyword","cljs.core/array?","cljs.core/vec","cljs.core/IDeref","pending?","and__4251__auto__","cljs.core/IPending","cljs.core/realized?","val","cljs.core/deref","status","cljs.core/type","cljs.core.pr_str","cljs.core.symbol","js/Date","normalize","n","len","ns","fipp.util/edn?","cljs.core/UUID","cljs.core/ExceptionInfo","cljs.core.merge","cljs.core/ex-message","cljs.core/ex-data","cause","cljs.core/ex-cause","fipp.ednize/record->tagged","cljs.core.apply","cljs.core/symbol","clojure.string.split","cljs.core/chunk-first"],"sourcesContent":["(ns fipp.ednize\n  (:require [clojure.string :as s]\n            [fipp.util :refer [edn?]]))\n\n(defprotocol IEdn\n  \"Perform a shallow conversion to an Edn data structure.\"\n  (-edn [x]))\n\n(defprotocol IOverride\n  \"Mark object as preferring its custom IEdn behavior.\")\n\n(defn override? [x]\n  (satisfies? IEdn x))\n\n;;TODO Automated test cases for all of these!\n;;XXX Usages of type/pr-str seem wrong...\n\n(defn edn [x]\n  (cond\n\n    (override? x)\n    (-edn x)\n\n    (object? x)\n    (tagged-literal 'js\n      (into {} (for [k (js-keys x)]\n                 [(keyword k) (aget x k)])))\n\n    (array? x)\n    (tagged-literal 'js (vec x))\n\n    (satisfies? IDeref x)\n    (let [pending? (and (satisfies? IPending x)\n                        (not (realized? x)))\n          ;; Can this throw and yield status :failed like in JVM Clojure?\n          val (when-not pending?\n                @x)\n          status (if pending?\n                   :pending\n                   :ready)]\n      (tagged-literal 'object\n        [(-> x type pr-str symbol)\n         {:status status :val val}]))\n\n    (instance? js/Date x)\n    (tagged-literal 'inst\n      (let [normalize (fn [n len]\n                        (loop [ns (str n)]\n                          (if (< (count ns) len)\n                            (recur (str \"0\" ns))\n                            ns)))]\n        (str (.getUTCFullYear x)                   \"-\"\n             (normalize (inc (.getUTCMonth x)) 2)  \"-\"\n             (normalize (.getUTCDate x) 2)         \"T\"\n             (normalize (.getUTCHours x) 2)        \":\"\n             (normalize (.getUTCMinutes x) 2)      \":\"\n             (normalize (.getUTCSeconds x) 2)      \".\"\n             (normalize (.getUTCMilliseconds x) 3) \"-\"\n             \"00:00\")))\n\n    (satisfies? IEdn x)\n    (-edn x)\n\n    (edn? x)\n    x\n\n    :else\n    ;;TODO Something better.\n    (tagged-literal 'object [(-> x type pr-str symbol)])\n\n    ))\n\n(extend-protocol IEdn\n\n  UUID\n  (-edn [x]\n    (tagged-literal 'uuid (str x)))\n\n  ExceptionInfo\n  (-edn [x]\n    (tagged-literal 'ExceptionInfo\n      (merge {:message (ex-message x)\n              :data (ex-data x)}\n             (when-let [cause (ex-cause x)]\n               {:cause cause}))))\n\n  )\n\n(defn record->tagged [x]\n  (tagged-literal (apply symbol (s/split (-> x type pr-str) #\"/\" 2))\n                  (into {} x)))\n"]}