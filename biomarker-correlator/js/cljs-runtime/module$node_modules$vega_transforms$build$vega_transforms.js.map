{
"version":3,
"file":"module$node_modules$vega_transforms$build$vega_transforms.js",
"lineCount":108,
"mappings":"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",
"sources":["node_modules/vega-transforms/build/vega-transforms.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$vega_transforms$build$vega_transforms\"] = function(global,require,module,exports) {\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('vega-util'), require('vega-dataflow'), require('vega-statistics'), require('d3-array'), require('vega-time')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'vega-util', 'vega-dataflow', 'vega-statistics', 'd3-array', 'vega-time'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.vega = {}, global.vega, global.vega, global.vega, global.d3, global.vega));\n}(this, (function (exports, vegaUtil, vegaDataflow, vegaStatistics, d3Array, vegaTime) { 'use strict';\n\n  function multikey(f) {\n    return x => {\n      const n = f.length;\n      let i = 1,\n          k = String(f[0](x));\n\n      for (; i < n; ++i) {\n        k += '|' + f[i](x);\n      }\n\n      return k;\n    };\n  }\n  function groupkey(fields) {\n    return !fields || !fields.length ? function () {\n      return '';\n    } : fields.length === 1 ? fields[0] : multikey(fields);\n  }\n\n  function measureName(op, field, as) {\n    return as || op + (!field ? '' : '_' + field);\n  }\n\n  const noop = () => {};\n\n  const base_op = {\n    init: noop,\n    add: noop,\n    rem: noop,\n    idx: 0\n  };\n  const AggregateOps = {\n    values: {\n      init: m => m.cell.store = true,\n      value: m => m.cell.data.values(),\n      idx: -1\n    },\n    count: {\n      value: m => m.cell.num\n    },\n    __count__: {\n      value: m => m.missing + m.valid\n    },\n    missing: {\n      value: m => m.missing\n    },\n    valid: {\n      value: m => m.valid\n    },\n    sum: {\n      init: m => m.sum = 0,\n      value: m => m.sum,\n      add: (m, v) => m.sum += +v,\n      rem: (m, v) => m.sum -= v\n    },\n    product: {\n      init: m => m.product = 1,\n      value: m => m.valid ? m.product : undefined,\n      add: (m, v) => m.product *= v,\n      rem: (m, v) => m.product /= v\n    },\n    mean: {\n      init: m => m.mean = 0,\n      value: m => m.valid ? m.mean : undefined,\n      add: (m, v) => (m.mean_d = v - m.mean, m.mean += m.mean_d / m.valid),\n      rem: (m, v) => (m.mean_d = v - m.mean, m.mean -= m.valid ? m.mean_d / m.valid : m.mean)\n    },\n    average: {\n      value: m => m.valid ? m.mean : undefined,\n      req: ['mean'],\n      idx: 1\n    },\n    variance: {\n      init: m => m.dev = 0,\n      value: m => m.valid > 1 ? m.dev / (m.valid - 1) : undefined,\n      add: (m, v) => m.dev += m.mean_d * (v - m.mean),\n      rem: (m, v) => m.dev -= m.mean_d * (v - m.mean),\n      req: ['mean'],\n      idx: 1\n    },\n    variancep: {\n      value: m => m.valid > 1 ? m.dev / m.valid : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdev: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid - 1)) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stdevp: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / m.valid) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    stderr: {\n      value: m => m.valid > 1 ? Math.sqrt(m.dev / (m.valid * (m.valid - 1))) : undefined,\n      req: ['variance'],\n      idx: 2\n    },\n    distinct: {\n      value: m => m.cell.data.distinct(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci0: {\n      value: m => m.cell.data.ci0(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    ci1: {\n      value: m => m.cell.data.ci1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    median: {\n      value: m => m.cell.data.q2(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q1: {\n      value: m => m.cell.data.q1(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    q3: {\n      value: m => m.cell.data.q3(m.get),\n      req: ['values'],\n      idx: 3\n    },\n    min: {\n      init: m => m.min = undefined,\n      value: m => m.min = Number.isNaN(m.min) ? m.cell.data.min(m.get) : m.min,\n      add: (m, v) => {\n        if (v < m.min || m.min === undefined) m.min = v;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.min = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    max: {\n      init: m => m.max = undefined,\n      value: m => m.max = Number.isNaN(m.max) ? m.cell.data.max(m.get) : m.max,\n      add: (m, v) => {\n        if (v > m.max || m.max === undefined) m.max = v;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.max = NaN;\n      },\n      req: ['values'],\n      idx: 4\n    },\n    argmin: {\n      init: m => m.argmin = undefined,\n      value: m => m.argmin || m.cell.data.argmin(m.get),\n      add: (m, v, t) => {\n        if (v < m.min) m.argmin = t;\n      },\n      rem: (m, v) => {\n        if (v <= m.min) m.argmin = undefined;\n      },\n      req: ['min', 'values'],\n      idx: 3\n    },\n    argmax: {\n      init: m => m.argmax = undefined,\n      value: m => m.argmax || m.cell.data.argmax(m.get),\n      add: (m, v, t) => {\n        if (v > m.max) m.argmax = t;\n      },\n      rem: (m, v) => {\n        if (v >= m.max) m.argmax = undefined;\n      },\n      req: ['max', 'values'],\n      idx: 3\n    }\n  };\n  const ValidAggregateOps = Object.keys(AggregateOps);\n\n  function measure(key, value) {\n    return out => vegaUtil.extend({\n      name: key,\n      out: out || key\n    }, base_op, value);\n  }\n\n  ValidAggregateOps.forEach(key => {\n    AggregateOps[key] = measure(key, AggregateOps[key]);\n  });\n  function createMeasure(op, name) {\n    return AggregateOps[op](name);\n  }\n\n  function compareIndex(a, b) {\n    return a.idx - b.idx;\n  }\n\n  function resolve(agg) {\n    const map = {};\n    agg.forEach(a => map[a.name] = a);\n\n    const getreqs = a => {\n      if (!a.req) return;\n      a.req.forEach(key => {\n        if (!map[key]) getreqs(map[key] = AggregateOps[key]());\n      });\n    };\n\n    agg.forEach(getreqs);\n    return Object.values(map).sort(compareIndex);\n  }\n\n  function init() {\n    this.valid = 0;\n    this.missing = 0;\n\n    this._ops.forEach(op => op.init(this));\n  }\n\n  function add(v, t) {\n    if (v == null || v === '') {\n      ++this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    ++this.valid;\n\n    this._ops.forEach(op => op.add(this, v, t));\n  }\n\n  function rem(v, t) {\n    if (v == null || v === '') {\n      --this.missing;\n      return;\n    }\n\n    if (v !== v) return;\n    --this.valid;\n\n    this._ops.forEach(op => op.rem(this, v, t));\n  }\n\n  function set(t) {\n    this._out.forEach(op => t[op.out] = op.value(this));\n\n    return t;\n  }\n\n  function compileMeasures(agg, field) {\n    const get = field || vegaUtil.identity,\n          ops = resolve(agg),\n          out = agg.slice().sort(compareIndex);\n\n    function ctr(cell) {\n      this._ops = ops;\n      this._out = out;\n      this.cell = cell;\n      this.init();\n    }\n\n    ctr.prototype.init = init;\n    ctr.prototype.add = add;\n    ctr.prototype.rem = rem;\n    ctr.prototype.set = set;\n    ctr.prototype.get = get;\n    ctr.fields = agg.map(op => op.out);\n    return ctr;\n  }\n\n  function TupleStore(key) {\n    this._key = key ? vegaUtil.field(key) : vegaDataflow.tupleid;\n    this.reset();\n  }\n  const prototype$1 = TupleStore.prototype;\n\n  prototype$1.reset = function () {\n    this._add = [];\n    this._rem = [];\n    this._ext = null;\n    this._get = null;\n    this._q = null;\n  };\n\n  prototype$1.add = function (v) {\n    this._add.push(v);\n  };\n\n  prototype$1.rem = function (v) {\n    this._rem.push(v);\n  };\n\n  prototype$1.values = function () {\n    this._get = null;\n    if (this._rem.length === 0) return this._add;\n    const a = this._add,\n          r = this._rem,\n          k = this._key,\n          n = a.length,\n          m = r.length,\n          x = Array(n - m),\n          map = {};\n    let i, j, v; // use unique key field to clear removed values\n\n    for (i = 0; i < m; ++i) {\n      map[k(r[i])] = 1;\n    }\n\n    for (i = 0, j = 0; i < n; ++i) {\n      if (map[k(v = a[i])]) {\n        map[k(v)] = 0;\n      } else {\n        x[j++] = v;\n      }\n    }\n\n    this._rem = [];\n    return this._add = x;\n  }; // memoizing statistics methods\n\n\n  prototype$1.distinct = function (get) {\n    const v = this.values(),\n          map = {};\n    let n = v.length,\n        count = 0,\n        s;\n\n    while (--n >= 0) {\n      s = get(v[n]) + '';\n\n      if (!vegaUtil.hasOwnProperty(map, s)) {\n        map[s] = 1;\n        ++count;\n      }\n    }\n\n    return count;\n  };\n\n  prototype$1.extent = function (get) {\n    if (this._get !== get || !this._ext) {\n      const v = this.values(),\n            i = vegaUtil.extentIndex(v, get);\n      this._ext = [v[i[0]], v[i[1]]];\n      this._get = get;\n    }\n\n    return this._ext;\n  };\n\n  prototype$1.argmin = function (get) {\n    return this.extent(get)[0] || {};\n  };\n\n  prototype$1.argmax = function (get) {\n    return this.extent(get)[1] || {};\n  };\n\n  prototype$1.min = function (get) {\n    const m = this.extent(get)[0];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.max = function (get) {\n    const m = this.extent(get)[1];\n    return m != null ? get(m) : undefined;\n  };\n\n  prototype$1.quartile = function (get) {\n    if (this._get !== get || !this._q) {\n      this._q = vegaStatistics.quartiles(this.values(), get);\n      this._get = get;\n    }\n\n    return this._q;\n  };\n\n  prototype$1.q1 = function (get) {\n    return this.quartile(get)[0];\n  };\n\n  prototype$1.q2 = function (get) {\n    return this.quartile(get)[1];\n  };\n\n  prototype$1.q3 = function (get) {\n    return this.quartile(get)[2];\n  };\n\n  prototype$1.ci = function (get) {\n    if (this._get !== get || !this._ci) {\n      this._ci = vegaStatistics.bootstrapCI(this.values(), 1000, 0.05, get);\n      this._get = get;\n    }\n\n    return this._ci;\n  };\n\n  prototype$1.ci0 = function (get) {\n    return this.ci(get)[0];\n  };\n\n  prototype$1.ci1 = function (get) {\n    return this.ci(get)[1];\n  };\n\n  /**\n   * Group-by aggregation operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors to aggregate.\n   * @param {Array<string>} [params.ops] - An array of strings indicating aggregation operations.\n   * @param {Array<string>} [params.as] - An array of output field names for aggregated values.\n   * @param {boolean} [params.cross=false] - A flag indicating that the full\n   *   cross-product of groupby values should be generated, including empty cells.\n   *   If true, the drop parameter is ignored and empty cells are retained.\n   * @param {boolean} [params.drop=true] - A flag indicating if empty cells should be removed.\n   */\n\n  function Aggregate(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this._adds = []; // array of added output tuples\n\n    this._mods = []; // array of modified output tuples\n\n    this._alen = 0; // number of active added tuples\n\n    this._mlen = 0; // number of active modified tuples\n\n    this._drop = true; // should empty aggregation cells be removed\n\n    this._cross = false; // produce full cross-product of group-by values\n\n    this._dims = []; // group-by dimension accessors\n\n    this._dnames = []; // group-by dimension names\n\n    this._measures = []; // collection of aggregation monoids\n\n    this._countOnly = false; // flag indicating only count aggregation\n\n    this._counts = null; // collection of count fields\n\n    this._prev = null; // previous aggregation cells\n\n    this._inputs = null; // array of dependent input tuple field names\n\n    this._outputs = null; // array of output tuple field names\n  }\n  Aggregate.Definition = {\n    'type': 'Aggregate',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'drop',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'cross',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Aggregate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const aggr = this,\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            mod = _.modified();\n\n      aggr.stamp = out.stamp;\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        aggr._prev = aggr.value;\n        aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        aggr.value = aggr.value || aggr.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // Indicate output fields and return aggregate tuples.\n\n\n      out.modifies(aggr._outputs); // Should empty cells be dropped?\n\n      aggr._drop = _.drop !== false; // If domain cross-product requested, generate empty cells as needed\n      // and ensure that empty cells are not dropped\n\n      if (_.cross && aggr._dims.length > 1) {\n        aggr._drop = false;\n        aggr.cross();\n      }\n\n      if (pulse.clean() && aggr._drop) {\n        out.clean(true).runAfter(() => this.clean());\n      }\n\n      return aggr.changes(out);\n    },\n\n    cross() {\n      const aggr = this,\n            curr = aggr.value,\n            dims = aggr._dnames,\n            vals = dims.map(() => ({})),\n            n = dims.length; // collect all group-by domain values\n\n      function collect(cells) {\n        let key, i, t, v;\n\n        for (key in cells) {\n          t = cells[key].tuple;\n\n          for (i = 0; i < n; ++i) {\n            vals[i][v = t[dims[i]]] = v;\n          }\n        }\n      }\n\n      collect(aggr._prev);\n      collect(curr); // iterate over key cross-product, create cells as needed\n\n      function generate(base, tuple, index) {\n        const name = dims[index],\n              v = vals[index++];\n\n        for (const k in v) {\n          const key = base ? base + '|' + k : k;\n          tuple[name] = v[k];\n          if (index < n) generate(key, tuple, index);else if (!curr[key]) aggr.cell(key, tuple);\n        }\n      }\n\n      generate('', {}, 0);\n    },\n\n    init(_) {\n      // initialize input and output fields\n      const inputs = this._inputs = [],\n            outputs = this._outputs = [],\n            inputMap = {};\n\n      function inputVisit(get) {\n        const fields = vegaUtil.array(vegaUtil.accessorFields(get)),\n              n = fields.length;\n        let i = 0,\n            f;\n\n        for (; i < n; ++i) {\n          if (!inputMap[f = fields[i]]) {\n            inputMap[f] = 1;\n            inputs.push(f);\n          }\n        }\n      } // initialize group-by dimensions\n\n\n      this._dims = vegaUtil.array(_.groupby);\n      this._dnames = this._dims.map(d => {\n        const dname = vegaUtil.accessorName(d);\n        inputVisit(d);\n        outputs.push(dname);\n        return dname;\n      });\n      this.cellkey = _.key ? _.key : groupkey(this._dims); // initialize aggregate measures\n\n      this._countOnly = true;\n      this._counts = [];\n      this._measures = [];\n      const fields = _.fields || [null],\n            ops = _.ops || ['count'],\n            as = _.as || [],\n            n = fields.length,\n            map = {};\n      let field, op, m, mname, outname, i;\n\n      if (n !== ops.length) {\n        vegaUtil.error('Unmatched number of fields and aggregate ops.');\n      }\n\n      for (i = 0; i < n; ++i) {\n        field = fields[i];\n        op = ops[i];\n\n        if (field == null && op !== 'count') {\n          vegaUtil.error('Null aggregate field specified.');\n        }\n\n        mname = vegaUtil.accessorName(field);\n        outname = measureName(op, mname, as[i]);\n        outputs.push(outname);\n\n        if (op === 'count') {\n          this._counts.push(outname);\n\n          continue;\n        }\n\n        m = map[mname];\n\n        if (!m) {\n          inputVisit(field);\n          m = map[mname] = [];\n          m.field = field;\n\n          this._measures.push(m);\n        }\n\n        if (op !== 'count') this._countOnly = false;\n        m.push(createMeasure(op, outname));\n      }\n\n      this._measures = this._measures.map(m => compileMeasures(m, m.field));\n      return {}; // aggregation cells (this.value)\n    },\n\n    // -- Cell Management -----\n    cellkey: groupkey(),\n\n    cell(key, t) {\n      let cell = this.value[key];\n\n      if (!cell) {\n        cell = this.value[key] = this.newcell(key, t);\n        this._adds[this._alen++] = cell;\n      } else if (cell.num === 0 && this._drop && cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._adds[this._alen++] = cell;\n      } else if (cell.stamp < this.stamp) {\n        cell.stamp = this.stamp;\n        this._mods[this._mlen++] = cell;\n      }\n\n      return cell;\n    },\n\n    newcell(key, t) {\n      const cell = {\n        key: key,\n        num: 0,\n        agg: null,\n        tuple: this.newtuple(t, this._prev && this._prev[key]),\n        stamp: this.stamp,\n        store: false\n      };\n\n      if (!this._countOnly) {\n        const measures = this._measures,\n              n = measures.length;\n        cell.agg = Array(n);\n\n        for (let i = 0; i < n; ++i) {\n          cell.agg[i] = new measures[i](cell);\n        }\n      }\n\n      if (cell.store) {\n        cell.data = new TupleStore();\n      }\n\n      return cell;\n    },\n\n    newtuple(t, p) {\n      const names = this._dnames,\n            dims = this._dims,\n            n = dims.length,\n            x = {};\n\n      for (let i = 0; i < n; ++i) {\n        x[names[i]] = dims[i](t);\n      }\n\n      return p ? vegaDataflow.replace(p.tuple, x) : vegaDataflow.ingest(x);\n    },\n\n    clean() {\n      const cells = this.value;\n\n      for (const key in cells) {\n        if (cells[key].num === 0) {\n          delete cells[key];\n        }\n      }\n    },\n\n    // -- Process Tuples -----\n    add(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num += 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.add(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].add(agg[i].get(t), t);\n      }\n    },\n\n    rem(t) {\n      const key = this.cellkey(t),\n            cell = this.cell(key, t);\n      cell.num -= 1;\n      if (this._countOnly) return;\n      if (cell.store) cell.data.rem(t);\n      const agg = cell.agg;\n\n      for (let i = 0, n = agg.length; i < n; ++i) {\n        agg[i].rem(agg[i].get(t), t);\n      }\n    },\n\n    celltuple(cell) {\n      const tuple = cell.tuple,\n            counts = this._counts; // consolidate stored values\n\n      if (cell.store) {\n        cell.data.values();\n      } // update tuple properties\n\n\n      for (let i = 0, n = counts.length; i < n; ++i) {\n        tuple[counts[i]] = cell.num;\n      }\n\n      if (!this._countOnly) {\n        const agg = cell.agg;\n\n        for (let i = 0, n = agg.length; i < n; ++i) {\n          agg[i].set(tuple);\n        }\n      }\n\n      return tuple;\n    },\n\n    changes(out) {\n      const adds = this._adds,\n            mods = this._mods,\n            prev = this._prev,\n            drop = this._drop,\n            add = out.add,\n            rem = out.rem,\n            mod = out.mod;\n      let cell, key, i, n;\n      if (prev) for (key in prev) {\n        cell = prev[key];\n        if (!drop || cell.num) rem.push(cell.tuple);\n      }\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        add.push(this.celltuple(adds[i]));\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        cell = mods[i];\n        (cell.num === 0 && drop ? rem : mod).push(this.celltuple(cell));\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n\n      this._prev = null;\n      return out;\n    }\n\n  });\n\n  const EPSILON$1 = 1e-14;\n  /**\n   * Generates a binning function for discretizing data.\n   * @constructor\n   * @param {object} params - The parameters for this operator. The\n   *   provided values should be valid options for the {@link bin} function.\n   * @param {function(object): *} params.field - The data field to bin.\n   */\n\n  function Bin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Bin.Definition = {\n    'type': 'Bin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'anchor',\n      'type': 'number'\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 20\n    }, {\n      'name': 'base',\n      'type': 'number',\n      'default': 10\n    }, {\n      'name': 'divide',\n      'type': 'number',\n      'array': true,\n      'default': [5, 2]\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2,\n      'required': true\n    }, {\n      'name': 'span',\n      'type': 'number'\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'steps',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'minstep',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'nice',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'name',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['bin0', 'bin1']\n    }]\n  };\n  vegaUtil.inherits(Bin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const band = _.interval !== false,\n            bins = this._bins(_),\n            start = bins.start,\n            step = bins.step,\n            as = _.as || ['bin0', 'bin1'],\n            b0 = as[0],\n            b1 = as[1];\n\n      let flag;\n\n      if (_.modified()) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n      } else {\n        flag = pulse.modified(vegaUtil.accessorFields(_.field)) ? pulse.ADD_MOD : pulse.ADD;\n      }\n\n      pulse.visit(flag, band ? t => {\n        const v = bins(t); // minimum bin value (inclusive)\n\n        t[b0] = v; // maximum bin value (exclusive)\n        // use convoluted math for better floating point agreement\n        // see https://github.com/vega/vega/issues/830\n        // infinite values propagate through this formula! #2227\n\n        t[b1] = v == null ? null : start + step * (1 + (v - start) / step);\n      } : t => t[b0] = bins(t));\n      return pulse.modifies(band ? as : b0);\n    },\n\n    _bins(_) {\n      if (this.value && !_.modified()) {\n        return this.value;\n      }\n\n      const field = _.field,\n            bins = vegaStatistics.bin(_),\n            step = bins.step;\n      let start = bins.start,\n          stop = start + Math.ceil((bins.stop - start) / step) * step,\n          a,\n          d;\n\n      if ((a = _.anchor) != null) {\n        d = a - (start + step * Math.floor((a - start) / step));\n        start += d;\n        stop += d;\n      }\n\n      const f = function (t) {\n        let v = vegaUtil.toNumber(field(t));\n        return v == null ? null : v < start ? -Infinity : v > stop ? +Infinity : (v = Math.max(start, Math.min(v, stop - step)), start + step * Math.floor(EPSILON$1 + (v - start) / step));\n      };\n\n      f.start = start;\n      f.stop = bins.stop;\n      f.step = step;\n      return this.value = vegaUtil.accessor(f, vegaUtil.accessorFields(field), _.name || 'bin_' + vegaUtil.accessorName(field));\n    }\n\n  });\n\n  function SortedList (idFunc, source, input) {\n    const $ = idFunc;\n    let data = source || [],\n        add = input || [],\n        rem = {},\n        cnt = 0;\n    return {\n      add: t => add.push(t),\n      remove: t => rem[$(t)] = ++cnt,\n      size: () => data.length,\n      data: (compare, resort) => {\n        if (cnt) {\n          data = data.filter(t => !rem[$(t)]);\n          rem = {};\n          cnt = 0;\n        }\n\n        if (resort && compare) {\n          data.sort(compare);\n        }\n\n        if (add.length) {\n          data = compare ? vegaUtil.merge(compare, data, add.sort(compare)) : data.concat(add);\n          add = [];\n        }\n\n        return data;\n      }\n    };\n  }\n\n  /**\n   * Collects all data tuples that pass through this operator.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for additionally sorting the collected tuples.\n   */\n\n  function Collect(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Collect.Definition = {\n    'type': 'Collect',\n    'metadata': {\n      'source': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }]\n  };\n  vegaUtil.inherits(Collect, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            list = SortedList(vegaDataflow.tupleid, this.value, out.materialize(out.ADD).add),\n            sort = _.sort,\n            mod = pulse.changed() || sort && (_.modified('sort') || pulse.modified(sort.fields));\n      out.visit(out.REM, list.remove);\n      this.modified(mod);\n      this.value = out.source = list.data(vegaDataflow.stableCompare(sort), mod); // propagate tree root if defined\n\n      if (pulse.source && pulse.source.root) {\n        this.value.root = pulse.source.root;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a comparator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string|function>} params.fields - The fields to compare.\n   * @param {Array<string>} [params.orders] - The sort orders.\n   *   Each entry should be one of \"ascending\" (default) or \"descending\".\n   */\n\n  function Compare(params) {\n    vegaDataflow.Operator.call(this, null, update$5, params);\n  }\n  vegaUtil.inherits(Compare, vegaDataflow.Operator);\n\n  function update$5(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.compare(_.fields, _.orders);\n  }\n\n  /**\n   * Count regexp-defined pattern occurrences in a text field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the text field.\n   * @param {string} [params.pattern] - RegExp string defining the text pattern.\n   * @param {string} [params.case] - One of 'lower', 'upper' or null (mixed) case.\n   * @param {string} [params.stopwords] - RegExp string of words to ignore.\n   */\n\n  function CountPattern(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  CountPattern.Definition = {\n    'type': 'CountPattern',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'case',\n      'type': 'enum',\n      'values': ['upper', 'lower', 'mixed'],\n      'default': 'mixed'\n    }, {\n      'name': 'pattern',\n      'type': 'string',\n      'default': '[\\\\w\"]+'\n    }, {\n      'name': 'stopwords',\n      'type': 'string',\n      'default': ''\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['text', 'count']\n    }]\n  };\n\n  function tokenize(text, tcase, match) {\n    switch (tcase) {\n      case 'upper':\n        text = text.toUpperCase();\n        break;\n\n      case 'lower':\n        text = text.toLowerCase();\n        break;\n    }\n\n    return text.match(match);\n  }\n\n  vegaUtil.inherits(CountPattern, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const process = update => tuple => {\n        var tokens = tokenize(get(tuple), _.case, match) || [],\n            t;\n\n        for (var i = 0, n = tokens.length; i < n; ++i) {\n          if (!stop.test(t = tokens[i])) update(t);\n        }\n      };\n\n      const init = this._parameterCheck(_, pulse),\n            counts = this._counts,\n            match = this._match,\n            stop = this._stop,\n            get = _.field,\n            as = _.as || ['text', 'count'],\n            add = process(t => counts[t] = 1 + (counts[t] || 0)),\n            rem = process(t => counts[t] -= 1);\n\n      if (init) {\n        pulse.visit(pulse.SOURCE, add);\n      } else {\n        pulse.visit(pulse.ADD, add);\n        pulse.visit(pulse.REM, rem);\n      }\n\n      return this._finish(pulse, as); // generate output tuples\n    },\n\n    _parameterCheck(_, pulse) {\n      let init = false;\n\n      if (_.modified('stopwords') || !this._stop) {\n        this._stop = new RegExp('^' + (_.stopwords || '') + '$', 'i');\n        init = true;\n      }\n\n      if (_.modified('pattern') || !this._match) {\n        this._match = new RegExp(_.pattern || '[\\\\w\\']+', 'g');\n        init = true;\n      }\n\n      if (_.modified('field') || pulse.modified(_.field.fields)) {\n        init = true;\n      }\n\n      if (init) this._counts = {};\n      return init;\n    },\n\n    _finish(pulse, as) {\n      const counts = this._counts,\n            tuples = this._tuples || (this._tuples = {}),\n            text = as[0],\n            count = as[1],\n            out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n      let w, t, c;\n\n      for (w in counts) {\n        t = tuples[w];\n        c = counts[w] || 0;\n\n        if (!t && c) {\n          tuples[w] = t = vegaDataflow.ingest({});\n          t[text] = w;\n          t[count] = c;\n          out.add.push(t);\n        } else if (c === 0) {\n          if (t) out.rem.push(t);\n          counts[w] = null;\n          tuples[w] = null;\n        } else if (t[count] !== c) {\n          t[count] = c;\n          out.mod.push(t);\n        }\n      }\n\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Perform a cross-product of a tuple stream with itself.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object):boolean} [params.filter] - An optional filter\n   *   function for selectively including tuples in the cross product.\n   * @param {Array<string>} [params.as] - The names of the output fields.\n   */\n\n  function Cross(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Cross.Definition = {\n    'type': 'Cross',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'filter',\n      'type': 'expr'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['a', 'b']\n    }]\n  };\n  vegaUtil.inherits(Cross, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            as = _.as || ['a', 'b'],\n            a = as[0],\n            b = as[1],\n            reset = !this.value || pulse.changed(pulse.ADD_REM) || _.modified('as') || _.modified('filter');\n\n      let data = this.value;\n\n      if (reset) {\n        if (data) out.rem = data;\n        data = pulse.materialize(pulse.SOURCE).source;\n        out.add = this.value = cross(data, a, b, _.filter || vegaUtil.truthy);\n      } else {\n        out.mod = data;\n      }\n\n      out.source = this.value;\n      return out.modifies(as);\n    }\n\n  });\n\n  function cross(input, a, b, filter) {\n    var data = [],\n        t = {},\n        n = input.length,\n        i = 0,\n        j,\n        left;\n\n    for (; i < n; ++i) {\n      t[a] = left = input[i];\n\n      for (j = 0; j < n; ++j) {\n        t[b] = input[j];\n\n        if (filter(t)) {\n          data.push(vegaDataflow.ingest(t));\n          t = {};\n          t[a] = left;\n        }\n      }\n    }\n\n    return data;\n  }\n\n  const Distributions = {\n    kde: vegaStatistics.randomKDE,\n    mixture: vegaStatistics.randomMixture,\n    normal: vegaStatistics.randomNormal,\n    lognormal: vegaStatistics.randomLogNormal,\n    uniform: vegaStatistics.randomUniform\n  };\n  const DISTRIBUTIONS = 'distributions',\n        FUNCTION = 'function',\n        FIELD = 'field';\n  /**\n   * Parse a parameter object for a probability distribution.\n   * @param {object} def - The distribution parameter object.\n   * @param {function():Array<object>} - A method for requesting\n   *   source data. Used for distributions (such as KDE) that\n   *   require sample data points. This method will only be\n   *   invoked if the 'from' parameter for a target data source\n   *   is not provided. Typically this method returns backing\n   *   source data for a Pulse object.\n   * @return {object} - The output distribution object.\n   */\n\n  function parse(def, data) {\n    const func = def[FUNCTION];\n\n    if (!vegaUtil.hasOwnProperty(Distributions, func)) {\n      vegaUtil.error('Unknown distribution function: ' + func);\n    }\n\n    const d = Distributions[func]();\n\n    for (const name in def) {\n      // if data field, extract values\n      if (name === FIELD) {\n        d.data((def.from || data()).map(def[name]));\n      } // if distribution mixture, recurse to parse each definition\n      else if (name === DISTRIBUTIONS) {\n          d[name](def[name].map(_ => parse(_, data)));\n        } // otherwise, simply set the parameter\n        else if (typeof d[name] === FUNCTION) {\n            d[name](def[name]);\n          }\n    }\n\n    return d;\n  }\n\n  /**\n   * Grid sample points for a probability density. Given a distribution and\n   * a sampling extent, will generate points suitable for plotting either\n   * PDF (probability density function) or CDF (cumulative distribution\n   * function) curves.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {object} params.distribution - The probability distribution. This\n   *   is an object parameter dependent on the distribution type.\n   * @param {string} [params.method='pdf'] - The distribution method to sample.\n   *   One of 'pdf' or 'cdf'.\n   * @param {Array<number>} [params.extent] - The [min, max] extent over which\n   *   to sample the distribution. This argument is required in most cases, but\n   *   can be omitted if the distribution (e.g., 'kde') supports a 'data' method\n   *   that returns numerical sample points from which the extent can be deduced.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function Density(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const distributions = [{\n    'key': {\n      'function': 'normal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'lognormal'\n    },\n    'params': [{\n      'name': 'mean',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'stdev',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'uniform'\n    },\n    'params': [{\n      'name': 'min',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'max',\n      'type': 'number',\n      'default': 1\n    }]\n  }, {\n    'key': {\n      'function': 'kde'\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'from',\n      'type': 'data'\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }]\n  }];\n  const mixture = {\n    'key': {\n      'function': 'mixture'\n    },\n    'params': [{\n      'name': 'distributions',\n      'type': 'param',\n      'array': true,\n      'params': distributions\n    }, {\n      'name': 'weights',\n      'type': 'number',\n      'array': true\n    }]\n  };\n  Density.Definition = {\n    'type': 'Density',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'method',\n      'type': 'string',\n      'default': 'pdf',\n      'values': ['pdf', 'cdf']\n    }, {\n      'name': 'distribution',\n      'type': 'param',\n      'params': distributions.concat(mixture)\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(Density, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const dist = parse(_.distribution, source(pulse)),\n              minsteps = _.steps || _.minsteps || 25,\n              maxsteps = _.steps || _.maxsteps || 200;\n        let method = _.method || 'pdf';\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (!_.extent && !dist.data) {\n          vegaUtil.error('Missing density extent parameter.');\n        }\n\n        method = dist[method];\n        const as = _.as || ['value', 'density'],\n              domain = _.extent || vegaUtil.extent(dist.data()),\n              values = vegaStatistics.sampleCurve(method, domain, minsteps, maxsteps).map(v => {\n          const tuple = {};\n          tuple[as[0]] = v[0];\n          tuple[as[1]] = v[1];\n          return vegaDataflow.ingest(tuple);\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  function source(pulse) {\n    return () => pulse.materialize(pulse.SOURCE).source;\n  }\n\n  function fieldNames(fields, as) {\n    if (!fields) return null;\n    return fields.map((f, i) => as[i] || vegaUtil.accessorName(f));\n  }\n  function partition$1(data, groupby, field) {\n    const groups = [],\n          get = f => f(t);\n\n    let map, i, n, t, k, g; // partition data points into groups\n\n    if (groupby == null) {\n      groups.push(data.map(field));\n    } else {\n      for (map = {}, i = 0, n = data.length; i < n; ++i) {\n        t = data[i];\n        k = groupby.map(get);\n        g = map[k];\n\n        if (!g) {\n          map[k] = g = [];\n          g.dims = k;\n          groups.push(g);\n        }\n\n        g.push(field(t));\n      }\n    }\n\n    return groups;\n  }\n\n  const Output = 'bin';\n  /**\n   * Dot density binning for dot plot construction.\n   * Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n   * https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to bin.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors to groupby.\n   * @param {number} [params.step] - The step size (bin width) within which dots should be\n   *   stacked. Defaults to 1/30 of the extent of the data *field*.\n   * @param {boolean} [params.smooth=false] - A boolean flag indicating if dot density\n   *   stacks should be smoothed to reduce variance.\n   */\n\n  function DotBin(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  DotBin.Definition = {\n    'type': 'DotBin',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number'\n    }, {\n      'name': 'smooth',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': Output\n    }]\n  };\n\n  const autostep = (data, field) => vegaUtil.span(vegaUtil.extent(data, field)) / 30;\n\n  vegaUtil.inherits(DotBin, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !(_.modified() || pulse.changed())) {\n        return pulse; // early exit\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(pulse.source, _.groupby, vegaUtil.identity),\n            smooth = _.smooth || false,\n            field = _.field,\n            step = _.step || autostep(source, field),\n            sort = vegaDataflow.stableCompare((a, b) => field(a) - field(b)),\n            as = _.as || Output,\n            n = groups.length; // compute dotplot bins per group\n\n      let min = Infinity,\n          max = -Infinity,\n          i = 0,\n          j;\n\n      for (; i < n; ++i) {\n        const g = groups[i].sort(sort);\n        j = -1;\n\n        for (const v of vegaStatistics.dotbin(g, step, smooth, field)) {\n          if (v < min) min = v;\n          if (v > max) max = v;\n          g[++j][as] = v;\n        }\n      }\n\n      this.value = {\n        start: min,\n        stop: max,\n        step: step\n      };\n      return pulse.reflow(true).modifies(as);\n    }\n\n  });\n\n  /**\n   * Wraps an expression function with access to external parameters.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function} params.expr - The expression function. The\n   *  function should accept both a datum and a parameter object.\n   *  This operator's value will be a new function that wraps the\n   *  expression function with access to this operator's parameters.\n   */\n\n  function Expression(params) {\n    vegaDataflow.Operator.call(this, null, update$4, params);\n    this.modified(true);\n  }\n  vegaUtil.inherits(Expression, vegaDataflow.Operator);\n\n  function update$4(_) {\n    const expr = _.expr;\n    return this.value && !_.modified('expr') ? this.value : vegaUtil.accessor(datum => expr(datum, _), vegaUtil.accessorFields(expr), vegaUtil.accessorName(expr));\n  }\n\n  /**\n   * Computes extents (min/max) for a data field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field over which to compute extends.\n   */\n\n  function Extent(params) {\n    vegaDataflow.Transform.call(this, [undefined, undefined], params);\n  }\n  Extent.Definition = {\n    'type': 'Extent',\n    'metadata': {},\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Extent, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const extent = this.value,\n            field = _.field,\n            mod = pulse.changed() || pulse.modified(field.fields) || _.modified('field');\n\n      let min = extent[0],\n          max = extent[1];\n\n      if (mod || min == null) {\n        min = +Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(mod ? pulse.SOURCE : pulse.ADD, t => {\n        const v = vegaUtil.toNumber(field(t));\n\n        if (v != null) {\n          // NaNs will fail all comparisons!\n          if (v < min) min = v;\n          if (v > max) max = v;\n        }\n      });\n\n      if (!Number.isFinite(min) || !Number.isFinite(max)) {\n        let name = vegaUtil.accessorName(field);\n        if (name) name = ` for field \"${name}\"`;\n        pulse.dataflow.warn(`Infinite extent${name}: [${min}, ${max}]`);\n        min = max = undefined;\n      }\n\n      this.value = [min, max];\n    }\n\n  });\n\n  /**\n   * Provides a bridge between a parent transform and a target subflow that\n   * consumes only a subset of the tuples that pass through the parent.\n   * @constructor\n   * @param {Pulse} pulse - A pulse to use as the value of this operator.\n   * @param {Transform} parent - The parent transform (typically a Facet instance).\n   */\n\n  function Subflow(pulse, parent) {\n    vegaDataflow.Operator.call(this, pulse);\n    this.parent = parent;\n    this.count = 0;\n  }\n  vegaUtil.inherits(Subflow, vegaDataflow.Operator, {\n    /**\n     * Routes pulses from this subflow to a target transform.\n     * @param {Transform} target - A transform that receives the subflow of tuples.\n     */\n    connect(target) {\n      this.detachSubflow = target.detachSubflow;\n      this.targets().add(target);\n      return target.source = this;\n    },\n\n    /**\n     * Add an 'add' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being added.\n     */\n    add(t) {\n      this.count += 1;\n      this.value.add.push(t);\n    },\n\n    /**\n     * Add a 'rem' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being removed.\n     */\n    rem(t) {\n      this.count -= 1;\n      this.value.rem.push(t);\n    },\n\n    /**\n     * Add a 'mod' tuple to the subflow pulse.\n     * @param {Tuple} t - The tuple being modified.\n     */\n    mod(t) {\n      this.value.mod.push(t);\n    },\n\n    /**\n     * Re-initialize this operator's pulse value.\n     * @param {Pulse} pulse - The pulse to copy from.\n     * @see Pulse.init\n     */\n    init(pulse) {\n      this.value.init(pulse, pulse.NO_SOURCE);\n    },\n\n    /**\n     * Evaluate this operator. This method overrides the\n     * default behavior to simply return the contained pulse value.\n     * @return {Pulse}\n     */\n    evaluate() {\n      // assert: this.value.stamp === pulse.stamp\n      return this.value;\n    }\n\n  });\n\n  /**\n   * Facets a dataflow into a set of subflows based on a key.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): *} params.key - The key field to facet by.\n   */\n\n  function Facet(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._keys = vegaUtil.fastmap(); // cache previously calculated key values\n    // keep track of active subflows, use as targets array for listeners\n    // this allows us to limit propagation to only updated subflows\n\n    const a = this._targets = [];\n    a.active = 0;\n\n    a.forEach = f => {\n      for (let i = 0, n = a.active; i < n; ++i) {\n        f(a[i], i, a);\n      }\n    };\n  }\n  vegaUtil.inherits(Facet, vegaDataflow.Transform, {\n    activate(flow) {\n      this._targets[this._targets.active++] = flow;\n    },\n\n    // parent argument provided by PreFacet subclass\n    subflow(key, flow, pulse, parent) {\n      const flows = this.value;\n      let sf = vegaUtil.hasOwnProperty(flows, key) && flows[key],\n          df,\n          p;\n\n      if (!sf) {\n        p = parent || (p = this._group[key]) && p.tuple;\n        df = pulse.dataflow;\n        sf = new Subflow(pulse.fork(pulse.NO_SOURCE), this);\n        df.add(sf).connect(flow(df, key, p));\n        flows[key] = sf;\n        this.activate(sf);\n      } else if (sf.value.stamp < pulse.stamp) {\n        sf.init(pulse);\n        this.activate(sf);\n      }\n\n      return sf;\n    },\n\n    clean() {\n      const flows = this.value;\n      let detached = 0;\n\n      for (const key in flows) {\n        if (flows[key].count === 0) {\n          const detach = flows[key].detachSubflow;\n          if (detach) detach();\n          delete flows[key];\n          ++detached;\n        }\n      } // remove inactive targets from the active targets array\n\n\n      if (detached) {\n        const active = this._targets.filter(sf => sf && sf.count > 0);\n\n        this.initTargets(active);\n      }\n    },\n\n    initTargets(act) {\n      const a = this._targets,\n            n = a.length,\n            m = act ? act.length : 0;\n      let i = 0;\n\n      for (; i < m; ++i) {\n        a[i] = act[i];\n      }\n\n      for (; i < n && a[i] != null; ++i) {\n        a[i] = null; // ensure old flows can be garbage collected\n      }\n\n      a.active = m;\n    },\n\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            key = _.key,\n            flow = _.subflow,\n            cache = this._keys,\n            rekey = _.modified('key'),\n            subflow = key => this.subflow(key, flow, pulse);\n\n      this._group = _.group || {};\n      this.initTargets(); // reset list of active subflows\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t),\n              k = cache.get(id);\n\n        if (k !== undefined) {\n          cache.delete(id);\n          subflow(k).rem(t);\n        }\n      });\n      pulse.visit(pulse.ADD, t => {\n        const k = key(t);\n        cache.set(vegaDataflow.tupleid(t), k);\n        subflow(k).add(t);\n      });\n\n      if (rekey || pulse.modified(key.fields)) {\n        pulse.visit(pulse.MOD, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 === k1) {\n            subflow(k1).mod(t);\n          } else {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      } else if (pulse.changed(pulse.MOD)) {\n        pulse.visit(pulse.MOD, t => {\n          subflow(cache.get(vegaDataflow.tupleid(t))).mod(t);\n        });\n      }\n\n      if (rekey) {\n        pulse.visit(pulse.REFLOW, t => {\n          const id = vegaDataflow.tupleid(t),\n                k0 = cache.get(id),\n                k1 = key(t);\n\n          if (k0 !== k1) {\n            cache.set(id, k1);\n            subflow(k0).rem(t);\n            subflow(k1).add(t);\n          }\n        });\n      }\n\n      if (pulse.clean()) {\n        df.runAfter(() => {\n          this.clean();\n          cache.clean();\n        });\n      } else if (cache.empty > df.cleanThreshold) {\n        df.runAfter(cache.clean);\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Generates one or more field accessor functions.\n   * If the 'name' parameter is an array, an array of field accessors\n   * will be created and the 'as' parameter will be ignored.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.name - The field name(s) to access.\n   * @param {string} params.as - The accessor function name.\n   */\n\n  function Field(params) {\n    vegaDataflow.Operator.call(this, null, update$3, params);\n  }\n  vegaUtil.inherits(Field, vegaDataflow.Operator);\n\n  function update$3(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.isArray(_.name) ? vegaUtil.array(_.name).map(f => vegaUtil.field(f)) : vegaUtil.field(_.name, _.as);\n  }\n\n  /**\n   * Filters data tuples according to a predicate function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The predicate expression function\n   *   that determines a tuple's filter status. Truthy values pass the filter.\n   */\n\n  function Filter(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  Filter.Definition = {\n    'type': 'Filter',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }]\n  };\n  vegaUtil.inherits(Filter, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            cache = this.value,\n            // cache ids of filtered tuples\n      output = pulse.fork(),\n            add = output.add,\n            rem = output.rem,\n            mod = output.mod,\n            test = _.expr;\n      let isMod = true;\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        if (!cache.has(id)) rem.push(t);else cache.delete(id);\n      });\n      pulse.visit(pulse.ADD, t => {\n        if (test(t, _)) add.push(t);else cache.set(vegaDataflow.tupleid(t), 1);\n      });\n\n      function revisit(t) {\n        const id = vegaDataflow.tupleid(t),\n              b = test(t, _),\n              s = cache.get(id);\n\n        if (b && s) {\n          cache.delete(id);\n          add.push(t);\n        } else if (!b && !s) {\n          cache.set(id, 1);\n          rem.push(t);\n        } else if (isMod && b && !s) {\n          mod.push(t);\n        }\n      }\n\n      pulse.visit(pulse.MOD, revisit);\n\n      if (_.modified()) {\n        isMod = false;\n        pulse.visit(pulse.REFLOW, revisit);\n      }\n\n      if (cache.empty > df.cleanThreshold) df.runAfter(cache.clean);\n      return output;\n    }\n\n  });\n\n  /**\n   * Flattens array-typed field values into new data objects.\n   * If multiple fields are specified, they are treated as parallel arrays,\n   * with output values included for each matching index (or null if missing).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} params.fields - An array of field\n   *   accessors for the tuple fields that should be flattened.\n   * @param {string} [params.index] - Optional output field name for index\n   *   value. If unspecified, no index field is included in the output.\n   * @param {Array<string>} [params.as] - Output field names for flattened\n   *   array fields. Any unspecified fields will use the field name provided\n   *   by the fields accessors.\n   */\n\n  function Flatten(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Flatten.Definition = {\n    'type': 'Flatten',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'index',\n      'type': 'string'\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Flatten, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(fields, _.as || []),\n            index = _.index || null,\n            m = as.length; // remove any previous results\n\n      out.rem = this.value; // generate flattened tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        const arrays = fields.map(f => f(t)),\n              maxlen = arrays.reduce((l, a) => Math.max(l, a.length), 0);\n        let i = 0,\n            j,\n            d,\n            v;\n\n        for (; i < maxlen; ++i) {\n          d = vegaDataflow.derive(t);\n\n          for (j = 0; j < m; ++j) {\n            d[as[j]] = (v = arrays[j][i]) == null ? null : v;\n          }\n\n          if (index) {\n            d[index] = i;\n          }\n\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      if (index) out.modifies(index);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Folds one more tuple fields into multiple tuples in which the field\n   * name and values are available under new 'key' and 'value' fields.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.fields - An array of field accessors\n   *   for the tuple fields that should be folded.\n   * @param {Array<string>} [params.as] - Output field names for folded key\n   *   and value fields, defaults to ['key', 'value'].\n   */\n\n  function Fold(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Fold.Definition = {\n    'type': 'Fold',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': ['key', 'value']\n    }]\n  };\n  vegaUtil.inherits(Fold, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            fnames = fields.map(vegaUtil.accessorName),\n            as = _.as || ['key', 'value'],\n            k = as[0],\n            v = as[1],\n            n = fields.length;\n      out.rem = this.value;\n      pulse.visit(pulse.SOURCE, t => {\n        for (let i = 0, d; i < n; ++i) {\n          d = vegaDataflow.derive(t);\n          d[k] = fnames[i];\n          d[v] = fields[i](t);\n          out.add.push(d);\n        }\n      });\n      this.value = out.source = out.add;\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Invokes a function for each data tuple and saves the results as a new field.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.expr - The formula function to invoke for each tuple.\n   * @param {string} params.as - The field name under which to save the result.\n   * @param {boolean} [params.initonly=false] - If true, the formula is applied to\n   *   added tuples only, and does not update in response to modifications.\n   */\n\n  function Formula(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Formula.Definition = {\n    'type': 'Formula',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'expr',\n      'type': 'expr',\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'required': true\n    }, {\n      'name': 'initonly',\n      'type': 'boolean'\n    }]\n  };\n  vegaUtil.inherits(Formula, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const func = _.expr,\n            as = _.as,\n            mod = _.modified(),\n            flag = _.initonly ? pulse.ADD : mod ? pulse.SOURCE : pulse.modified(func.fields) || pulse.modified(as) ? pulse.ADD_MOD : pulse.ADD;\n\n      if (mod) {\n        // parameters updated, need to reflow\n        pulse = pulse.materialize().reflow(true);\n      }\n\n      if (!_.initonly) {\n        pulse.modifies(as);\n      }\n\n      return pulse.visit(flag, t => t[as] = func(t, _));\n    }\n\n  });\n\n  /**\n   * Generates data tuples using a provided generator function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Parameters): object} params.generator - A tuple generator\n   *   function. This function is given the operator parameters as input.\n   *   Changes to any additional parameters will not trigger re-calculation\n   *   of previously generated tuples. Only future tuples are affected.\n   * @param {number} params.size - The number of tuples to produce.\n   */\n\n  function Generate(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  vegaUtil.inherits(Generate, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.ALL),\n            gen = _.generator;\n      let data = this.value,\n          num = _.size - data.length,\n          add,\n          rem,\n          t;\n\n      if (num > 0) {\n        // need more tuples, generate and add\n        for (add = []; --num >= 0;) {\n          add.push(t = vegaDataflow.ingest(gen(_)));\n          data.push(t);\n        }\n\n        out.add = out.add.length ? out.materialize(out.ADD).add.concat(add) : add;\n      } else {\n        // need fewer tuples, remove\n        rem = data.slice(0, -num);\n        out.rem = out.rem.length ? out.materialize(out.REM).rem.concat(rem) : rem;\n        data = data.slice(-num);\n      }\n\n      out.source = this.value = data;\n      return out;\n    }\n\n  });\n\n  const Methods = {\n    value: 'value',\n    median: d3Array.median,\n    mean: d3Array.mean,\n    min: d3Array.min,\n    max: d3Array.max\n  };\n  const Empty = [];\n  /**\n   * Impute missing values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The value field to impute.\n   * @param {Array<function(object): *>} [params.groupby] - An array of\n   *   accessors to determine series within which to perform imputation.\n   * @param {function(object): *} params.key - An accessor for a key value.\n   *   Each key value should be unique within a group. New tuples will be\n   *   imputed for any key values that are not found within a group.\n   * @param {Array<*>} [params.keyvals] - Optional array of required key\n   *   values. New tuples will be imputed for any key values that are not\n   *   found within a group. In addition, these values will be automatically\n   *   augmented with the key values observed in the input data.\n   * @param {string} [method='value'] - The imputation method to use. One of\n   *   'value', 'mean', 'median', 'max', 'min'.\n   * @param {*} [value=0] - The constant value to use for imputation\n   *   when using method 'value'.\n   */\n\n  function Impute(params) {\n    vegaDataflow.Transform.call(this, [], params);\n  }\n  Impute.Definition = {\n    'type': 'Impute',\n    'metadata': {\n      'changes': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'key',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'keyvals',\n      'array': true\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'method',\n      'type': 'enum',\n      'default': 'value',\n      'values': ['value', 'mean', 'median', 'max', 'min']\n    }, {\n      'name': 'value',\n      'default': 0\n    }]\n  };\n\n  function getValue(_) {\n    var m = _.method || Methods.value,\n        v;\n\n    if (Methods[m] == null) {\n      vegaUtil.error('Unrecognized imputation method: ' + m);\n    } else if (m === Methods.value) {\n      v = _.value !== undefined ? _.value : 0;\n      return () => v;\n    } else {\n      return Methods[m];\n    }\n  }\n\n  function getField(_) {\n    const f = _.field;\n    return t => t ? f(t) : NaN;\n  }\n\n  vegaUtil.inherits(Impute, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      var out = pulse.fork(pulse.ALL),\n          impute = getValue(_),\n          field = getField(_),\n          fName = vegaUtil.accessorName(_.field),\n          kName = vegaUtil.accessorName(_.key),\n          gNames = (_.groupby || []).map(vegaUtil.accessorName),\n          groups = partition(pulse.source, _.groupby, _.key, _.keyvals),\n          curr = [],\n          prev = this.value,\n          m = groups.domain.length,\n          group,\n          value,\n          gVals,\n          kVal,\n          g,\n          i,\n          j,\n          l,\n          n,\n          t;\n\n      for (g = 0, l = groups.length; g < l; ++g) {\n        group = groups[g];\n        gVals = group.values;\n        value = NaN; // add tuples for missing values\n\n        for (j = 0; j < m; ++j) {\n          if (group[j] != null) continue;\n          kVal = groups.domain[j];\n          t = {\n            _impute: true\n          };\n\n          for (i = 0, n = gVals.length; i < n; ++i) t[gNames[i]] = gVals[i];\n\n          t[kName] = kVal;\n          t[fName] = Number.isNaN(value) ? value = impute(group, field) : value;\n          curr.push(vegaDataflow.ingest(t));\n        }\n      } // update pulse with imputed tuples\n\n\n      if (curr.length) out.add = out.materialize(out.ADD).add.concat(curr);\n      if (prev.length) out.rem = out.materialize(out.REM).rem.concat(prev);\n      this.value = curr;\n      return out;\n    }\n\n  });\n\n  function partition(data, groupby, key, keyvals) {\n    var get = f => f(t),\n        groups = [],\n        domain = keyvals ? keyvals.slice() : [],\n        kMap = {},\n        gMap = {},\n        gVals,\n        gKey,\n        group,\n        i,\n        j,\n        k,\n        n,\n        t;\n\n    domain.forEach((k, i) => kMap[k] = i + 1);\n\n    for (i = 0, n = data.length; i < n; ++i) {\n      t = data[i];\n      k = key(t);\n      j = kMap[k] || (kMap[k] = domain.push(k));\n      gKey = (gVals = groupby ? groupby.map(get) : Empty) + '';\n\n      if (!(group = gMap[gKey])) {\n        group = gMap[gKey] = [];\n        groups.push(group);\n        group.values = gVals;\n      }\n\n      group[j - 1] = t;\n    }\n\n    groups.domain = domain;\n    return groups;\n  }\n\n  /**\n   * Extend input tuples with aggregate values.\n   * Calcuates aggregate values and joins them with the input stream.\n   * @constructor\n   */\n\n  function JoinAggregate(params) {\n    Aggregate.call(this, params);\n  }\n  JoinAggregate.Definition = {\n    'type': 'JoinAggregate',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidAggregateOps\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(JoinAggregate, Aggregate, {\n    transform(_, pulse) {\n      const aggr = this,\n            mod = _.modified();\n\n      let cells; // process all input tuples to calculate aggregates\n\n      if (aggr.value && (mod || pulse.modified(aggr._inputs, true))) {\n        cells = aggr.value = mod ? aggr.init(_) : {};\n        pulse.visit(pulse.SOURCE, t => aggr.add(t));\n      } else {\n        cells = aggr.value = aggr.value || this.init(_);\n        pulse.visit(pulse.REM, t => aggr.rem(t));\n        pulse.visit(pulse.ADD, t => aggr.add(t));\n      } // update aggregation cells\n\n\n      aggr.changes(); // write aggregate values to input tuples\n\n      pulse.visit(pulse.SOURCE, t => {\n        vegaUtil.extend(t, cells[aggr.cellkey(t)].tuple);\n      });\n      return pulse.reflow(mod).modifies(this._outputs);\n    },\n\n    changes() {\n      const adds = this._adds,\n            mods = this._mods;\n      let i, n;\n\n      for (i = 0, n = this._alen; i < n; ++i) {\n        this.celltuple(adds[i]);\n        adds[i] = null; // for garbage collection\n      }\n\n      for (i = 0, n = this._mlen; i < n; ++i) {\n        this.celltuple(mods[i]);\n        mods[i] = null; // for garbage collection\n      }\n\n      this._alen = this._mlen = 0; // reset list of active cells\n    }\n\n  });\n\n  /**\n   * Compute kernel density estimates (KDE) for one or more data groups.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   to estimate.\n   * @param {number} [params.bandwidth=0] - The KDE kernel bandwidth.\n   *   If zero or unspecified, the bandwidth is automatically determined.\n   * @param {boolean} [params.counts=false] - A boolean flag indicating if the\n   *   output values should be probability estimates (false, default) or\n   *   smoothed counts (true).\n   * @param {string} [params.cumulative=false] - A boolean flag indicating if a\n   *   density (false) or cumulative distribution (true) should be generated.\n   * @param {Array<number>} [params.extent] - The domain extent over which to\n   *   plot the density. If unspecified, the [min, max] data extent is used.\n   * @param {string} [params.resolve='independent'] - Indicates how parameters for\n   *   multiple densities should be resolved. If \"independent\" (the default), each\n   *   density may have its own domain extent and dynamic number of curve sample\n   *   steps. If \"shared\", the KDE transform will ensure that all densities are\n   *   defined over a shared domain and curve steps, enabling stacking.\n   * @param {number} [params.minsteps=25] - The minimum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.maxsteps=200] - The maximum number of curve samples\n   *   for plotting the density.\n   * @param {number} [params.steps] - The exact number of curve samples for\n   *   plotting the density. If specified, overrides both minsteps and maxsteps\n   *   to set an exact number of uniform samples. Useful in conjunction with\n   *   a fixed extent to ensure consistent sample points for stacked densities.\n   */\n\n  function KDE(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  KDE.Definition = {\n    'type': 'KDE',\n    'metadata': {\n      'generates': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'cumulative',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'counts',\n      'type': 'boolean',\n      'default': false\n    }, {\n      'name': 'bandwidth',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'extent',\n      'type': 'number',\n      'array': true,\n      'length': 2\n    }, {\n      'name': 'resolve',\n      'type': 'enum',\n      'values': ['shared', 'independent'],\n      'default': 'independent'\n    }, {\n      'name': 'steps',\n      'type': 'number'\n    }, {\n      'name': 'minsteps',\n      'type': 'number',\n      'default': 25\n    }, {\n      'name': 'maxsteps',\n      'type': 'number',\n      'default': 200\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['value', 'density']\n    }]\n  };\n  vegaUtil.inherits(KDE, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS);\n\n      if (!this.value || pulse.changed() || _.modified()) {\n        const source = pulse.materialize(pulse.SOURCE).source,\n              groups = partition$1(source, _.groupby, _.field),\n              names = (_.groupby || []).map(vegaUtil.accessorName),\n              bandwidth = _.bandwidth,\n              method = _.cumulative ? 'cdf' : 'pdf',\n              as = _.as || ['value', 'density'],\n              values = [];\n        let domain = _.extent,\n            minsteps = _.steps || _.minsteps || 25,\n            maxsteps = _.steps || _.maxsteps || 200;\n\n        if (method !== 'pdf' && method !== 'cdf') {\n          vegaUtil.error('Invalid density method: ' + method);\n        }\n\n        if (_.resolve === 'shared') {\n          if (!domain) domain = vegaUtil.extent(source, _.field);\n          minsteps = maxsteps = _.steps || maxsteps;\n        }\n\n        groups.forEach(g => {\n          const density = vegaStatistics.randomKDE(g, bandwidth)[method],\n                scale = _.counts ? g.length : 1,\n                local = domain || vegaUtil.extent(g);\n          vegaStatistics.sampleCurve(density, local, minsteps, maxsteps).forEach(v => {\n            const t = {};\n\n            for (let i = 0; i < names.length; ++i) {\n              t[names[i]] = g.dims[i];\n            }\n\n            t[as[0]] = v[0];\n            t[as[1]] = v[1] * scale;\n            values.push(vegaDataflow.ingest(t));\n          });\n        });\n        if (this.value) out.rem = this.value;\n        this.value = out.add = out.source = values;\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates a key function.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<string>} params.fields - The field name(s) for the key function.\n   * @param {boolean} params.flat - A boolean flag indicating if the field names\n   *  should be treated as flat property names, side-stepping nested field\n   *  lookups normally indicated by dot or bracket notation.\n   */\n\n  function Key(params) {\n    vegaDataflow.Operator.call(this, null, update$2, params);\n  }\n  vegaUtil.inherits(Key, vegaDataflow.Operator);\n\n  function update$2(_) {\n    return this.value && !_.modified() ? this.value : vegaUtil.key(_.fields, _.flat);\n  }\n\n  /**\n   * Load and parse data from an external source. Marshalls parameter\n   * values and then invokes the Dataflow request method.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {string} params.url - The URL to load from.\n   * @param {object} params.format - The data format options.\n   */\n\n  function Load(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this._pending = null;\n  }\n  vegaUtil.inherits(Load, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow;\n\n      if (this._pending) {\n        // update state and return pulse\n        return output(this, pulse, this._pending);\n      }\n\n      if (stop(_)) return pulse.StopPropagation;\n\n      if (_.values) {\n        // parse and ingest values, return output pulse\n        return output(this, pulse, df.parse(_.values, _.format));\n      } else if (_.async) {\n        // return promise for non-blocking async loading\n        const p = df.request(_.url, _.format).then(res => {\n          this._pending = vegaUtil.array(res.data);\n          return df => df.touch(this);\n        });\n        return {\n          async: p\n        };\n      } else {\n        // return promise for synchronous loading\n        return df.request(_.url, _.format).then(res => output(this, pulse, vegaUtil.array(res.data)));\n      }\n    }\n\n  });\n\n  function stop(_) {\n    return _.modified('async') && !(_.modified('values') || _.modified('url') || _.modified('format'));\n  }\n\n  function output(op, pulse, data) {\n    data.forEach(vegaDataflow.ingest);\n    const out = pulse.fork(pulse.NO_FIELDS & pulse.NO_SOURCE);\n    out.rem = op.value;\n    op.value = out.source = out.add = data;\n    op._pending = null;\n    if (out.rem.length) out.clean(true);\n    return out;\n  }\n\n  /**\n   * Extend tuples by joining them with values from a lookup table.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Map} params.index - The lookup table map.\n   * @param {Array<function(object): *} params.fields - The fields to lookup.\n   * @param {Array<string>} params.as - Output field names for each lookup value.\n   * @param {*} [params.default] - A default value to use if lookup fails.\n   */\n\n  function Lookup(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n  }\n  Lookup.Definition = {\n    'type': 'Lookup',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'index',\n      'type': 'index',\n      'params': [{\n        'name': 'from',\n        'type': 'data',\n        'required': true\n      }, {\n        'name': 'key',\n        'type': 'field',\n        'required': true\n      }]\n    }, {\n      'name': 'values',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'array': true,\n      'required': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true\n    }, {\n      'name': 'default',\n      'default': null\n    }]\n  };\n  vegaUtil.inherits(Lookup, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const keys = _.fields,\n            index = _.index,\n            values = _.values,\n            defaultValue = _.default == null ? null : _.default,\n            reset = _.modified(),\n            n = keys.length;\n\n      let flag = reset ? pulse.SOURCE : pulse.ADD,\n          out = pulse,\n          as = _.as,\n          set,\n          m,\n          mods;\n\n      if (values) {\n        m = values.length;\n\n        if (n > 1 && !as) {\n          vegaUtil.error('Multi-field lookup requires explicit \"as\" parameter.');\n        }\n\n        if (as && as.length !== n * m) {\n          vegaUtil.error('The \"as\" parameter has too few output field names.');\n        }\n\n        as = as || values.map(vegaUtil.accessorName);\n\n        set = function (t) {\n          for (var i = 0, k = 0, j, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            if (v == null) for (j = 0; j < m; ++j, ++k) t[as[k]] = defaultValue;else for (j = 0; j < m; ++j, ++k) t[as[k]] = values[j](v);\n          }\n        };\n      } else {\n        if (!as) {\n          vegaUtil.error('Missing output field names.');\n        }\n\n        set = function (t) {\n          for (var i = 0, v; i < n; ++i) {\n            v = index.get(keys[i](t));\n            t[as[i]] = v == null ? defaultValue : v;\n          }\n        };\n      }\n\n      if (reset) {\n        out = pulse.reflow(true);\n      } else {\n        mods = keys.some(k => pulse.modified(k.fields));\n        flag |= mods ? pulse.MOD : 0;\n      }\n\n      pulse.visit(flag, set);\n      return out.modifies(as);\n    }\n\n  });\n\n  /**\n   * Computes global min/max extents over a collection of extents.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<number>>} params.extents - The input extents.\n   */\n\n  function MultiExtent(params) {\n    vegaDataflow.Operator.call(this, null, update$1, params);\n  }\n  vegaUtil.inherits(MultiExtent, vegaDataflow.Operator);\n\n  function update$1(_) {\n    if (this.value && !_.modified()) {\n      return this.value;\n    }\n\n    const ext = _.extents,\n          n = ext.length;\n    let min = +Infinity,\n        max = -Infinity,\n        i,\n        e;\n\n    for (i = 0; i < n; ++i) {\n      e = ext[i];\n      if (e[0] < min) min = e[0];\n      if (e[1] > max) max = e[1];\n    }\n\n    return [min, max];\n  }\n\n  /**\n   * Merge a collection of value arrays.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<Array<*>>} params.values - The input value arrrays.\n   */\n\n  function MultiValues(params) {\n    vegaDataflow.Operator.call(this, null, update, params);\n  }\n  vegaUtil.inherits(MultiValues, vegaDataflow.Operator);\n\n  function update(_) {\n    return this.value && !_.modified() ? this.value : _.values.reduce((data, _) => data.concat(_), []);\n  }\n\n  /**\n   * Operator whose value is simply its parameter hash. This operator is\n   * useful for enabling reactive updates to values of nested objects.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   */\n\n  function Params(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Params, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.modified(_.modified());\n      this.value = _;\n      return pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS); // do not pass tuples\n    }\n\n  });\n\n  /**\n   * Aggregate and pivot selected field values to become new fields.\n   * This operator is useful to construction cross-tabulations.\n   * @constructor\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *  to groupby. These fields act just like groupby fields of an Aggregate transform.\n   * @param {function(object): *} params.field - The field to pivot on. The unique\n   *  values of this field become new field names in the output stream.\n   * @param {function(object): *} params.value - The field to populate pivoted fields.\n   *  The aggregate values of this field become the values of the new pivoted fields.\n   * @param {string} [params.op] - The aggregation operation for the value field,\n   *  applied per cell in the output stream. The default is \"sum\".\n   * @param {number} [params.limit] - An optional parameter indicating the maximum\n   *  number of pivoted fields to generate. The pivoted field names are sorted in\n   *  ascending order prior to enforcing the limit.\n   */\n\n  function Pivot(params) {\n    Aggregate.call(this, params);\n  }\n  Pivot.Definition = {\n    'type': 'Pivot',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'value',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'op',\n      'type': 'enum',\n      'values': ValidAggregateOps,\n      'default': 'sum'\n    }, {\n      'name': 'limit',\n      'type': 'number',\n      'default': 0\n    }, {\n      'name': 'key',\n      'type': 'field'\n    }]\n  };\n  vegaUtil.inherits(Pivot, Aggregate, {\n    _transform: Aggregate.prototype.transform,\n\n    transform(_, pulse) {\n      return this._transform(aggregateParams(_, pulse), pulse);\n    }\n\n  }); // Shoehorn a pivot transform into an aggregate transform!\n  // First collect all unique pivot field values.\n  // Then generate aggregate fields for each output pivot field.\n\n  function aggregateParams(_, pulse) {\n    const key = _.field,\n          value = _.value,\n          op = (_.op === 'count' ? '__count__' : _.op) || 'sum',\n          fields = vegaUtil.accessorFields(key).concat(vegaUtil.accessorFields(value)),\n          keys = pivotKeys(key, _.limit || 0, pulse); // if data stream content changes, pivot fields may change\n    // flag parameter modification to ensure re-initialization\n\n    if (pulse.changed()) _.set('__pivot__', null, null, true);\n    return {\n      key: _.key,\n      groupby: _.groupby,\n      ops: keys.map(() => op),\n      fields: keys.map(k => get(k, key, value, fields)),\n      as: keys.map(k => k + ''),\n      modified: _.modified.bind(_)\n    };\n  } // Generate aggregate field accessor.\n  // Output NaN for non-existent values; aggregator will ignore!\n\n\n  function get(k, key, value, fields) {\n    return vegaUtil.accessor(d => key(d) === k ? value(d) : NaN, fields, k + '');\n  } // Collect (and optionally limit) all unique pivot values.\n\n\n  function pivotKeys(key, limit, pulse) {\n    const map = {},\n          list = [];\n    pulse.visit(pulse.SOURCE, t => {\n      const k = key(t);\n\n      if (!map[k]) {\n        map[k] = 1;\n        list.push(k);\n      }\n    });\n    list.sort(vegaUtil.ascending);\n    return limit ? list.slice(0, limit) : list;\n  }\n\n  /**\n   * Partitions pre-faceted data into tuple subflows.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(Dataflow, string): Operator} params.subflow - A function\n   *   that generates a subflow of operators and returns its root operator.\n   * @param {function(object): Array<object>} params.field - The field\n   *   accessor for an array of subflow tuple objects.\n   */\n\n  function PreFacet(params) {\n    Facet.call(this, params);\n  }\n  vegaUtil.inherits(PreFacet, Facet, {\n    transform(_, pulse) {\n      const flow = _.subflow,\n            field = _.field,\n            subflow = t => this.subflow(vegaDataflow.tupleid(t), flow, pulse, t);\n\n      if (_.modified('field') || field && pulse.modified(vegaUtil.accessorFields(field))) {\n        vegaUtil.error('PreFacet does not support field modification.');\n      }\n\n      this.initTargets(); // reset list of active subflows\n\n      if (field) {\n        pulse.visit(pulse.MOD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.mod(_));\n        });\n        pulse.visit(pulse.ADD, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.add(vegaDataflow.ingest(_)));\n        });\n        pulse.visit(pulse.REM, t => {\n          const sf = subflow(t);\n          field(t).forEach(_ => sf.rem(_));\n        });\n      } else {\n        pulse.visit(pulse.MOD, t => subflow(t).mod(t));\n        pulse.visit(pulse.ADD, t => subflow(t).add(t));\n        pulse.visit(pulse.REM, t => subflow(t).rem(t));\n      }\n\n      if (pulse.clean()) {\n        pulse.runAfter(() => this.clean());\n      }\n\n      return pulse;\n    }\n\n  });\n\n  /**\n   * Performs a relational projection, copying selected fields from source\n   * tuples to a new set of derived tuples.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {Array<function(object): *} params.fields - The fields to project,\n   *   as an array of field accessors. If unspecified, all fields will be\n   *   copied with names unchanged.\n   * @param {Array<string>} [params.as] - Output field names for each projected\n   *   field. Any unspecified fields will use the field name provided by\n   *   the field accessor.\n   */\n\n  function Project(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Project.Definition = {\n    'type': 'Project',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'fields',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }]\n  };\n  vegaUtil.inherits(Project, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            fields = _.fields,\n            as = fieldNames(_.fields, _.as || []),\n            derive = fields ? (s, t) => project(s, t, fields, as) : vegaDataflow.rederive;\n      let lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      pulse.visit(pulse.REM, t => {\n        const id = vegaDataflow.tupleid(t);\n        out.rem.push(lut[id]);\n        lut[id] = null;\n      });\n      pulse.visit(pulse.ADD, t => {\n        const dt = derive(t, vegaDataflow.ingest({}));\n        lut[vegaDataflow.tupleid(t)] = dt;\n        out.add.push(dt);\n      });\n      pulse.visit(pulse.MOD, t => {\n        out.mod.push(derive(t, lut[vegaDataflow.tupleid(t)]));\n      });\n      return out;\n    }\n\n  });\n\n  function project(s, t, fields, as) {\n    for (let i = 0, n = fields.length; i < n; ++i) {\n      t[as[i]] = fields[i](s);\n    }\n\n    return t;\n  }\n\n  /**\n   * Proxy the value of another operator as a pure signal value.\n   * Ensures no tuples are propagated.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {*} params.value - The value to proxy, becomes the value of this operator.\n   */\n\n  function Proxy(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Proxy, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = _.value;\n      return _.modified('value') ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Generates sample quantile values from an input data stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - An accessor for the data field\n   *   over which to calculate quantile values.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors\n   *   to groupby.\n   * @param {Array<number>} [params.probs] - An array of probabilities in\n   *   the range (0, 1) for which to compute quantile values. If not specified,\n   *   the *step* parameter will be used.\n   * @param {Array<number>} [params.step=0.01] - A probability step size for\n   *   sampling quantile values. All values from one-half the step size up to\n   *   1 (exclusive) will be sampled. This parameter is only used if the\n   *   *quantiles* parameter is not provided.\n   */\n\n  function Quantile(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Quantile.Definition = {\n    'type': 'Quantile',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'probs',\n      'type': 'number',\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 0.01\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'default': ['prob', 'value']\n    }]\n  };\n  const EPSILON = 1e-14;\n  vegaUtil.inherits(Quantile, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS),\n            as = _.as || ['prob', 'value'];\n\n      if (this.value && !_.modified() && !pulse.changed()) {\n        out.source = this.value;\n        return out;\n      }\n\n      const source = pulse.materialize(pulse.SOURCE).source,\n            groups = partition$1(source, _.groupby, _.field),\n            names = (_.groupby || []).map(vegaUtil.accessorName),\n            values = [],\n            step = _.step || 0.01,\n            p = _.probs || d3Array.range(step / 2, 1 - EPSILON, step),\n            n = p.length;\n      groups.forEach(g => {\n        const q = vegaStatistics.quantiles(g, p);\n\n        for (let i = 0; i < n; ++i) {\n          const t = {};\n\n          for (let i = 0; i < names.length; ++i) {\n            t[names[i]] = g.dims[i];\n          }\n\n          t[as[0]] = p[i];\n          t[as[1]] = q[i];\n          values.push(vegaDataflow.ingest(t));\n        }\n      });\n      if (this.value) out.rem = this.value;\n      this.value = out.add = out.source = values;\n      return out;\n    }\n\n  });\n\n  /**\n   * Relays a data stream between data processing pipelines.\n   * If the derive parameter is set, this transform will create derived\n   * copies of observed tuples. This provides derived data streams in which\n   * modifications to the tuples do not pollute an upstream data source.\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.derive=false] - Boolean flag indicating if\n   *   the transform should make derived copies of incoming tuples.\n   * @constructor\n   */\n\n  function Relay(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Relay, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      let out, lut;\n\n      if (this.value) {\n        lut = this.value;\n      } else {\n        out = pulse = pulse.addAll();\n        lut = this.value = {};\n      }\n\n      if (_.derive) {\n        out = pulse.fork(pulse.NO_SOURCE);\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n          out.rem.push(lut[id]);\n          lut[id] = null;\n        });\n        pulse.visit(pulse.ADD, t => {\n          const dt = vegaDataflow.derive(t);\n          lut[vegaDataflow.tupleid(t)] = dt;\n          out.add.push(dt);\n        });\n        pulse.visit(pulse.MOD, t => {\n          const dt = lut[vegaDataflow.tupleid(t)];\n\n          for (const k in t) {\n            dt[k] = t[k]; // down stream writes may overwrite re-derived tuples\n            // conservatively mark all source fields as modified\n\n            out.modifies(k);\n          }\n\n          out.mod.push(dt);\n        });\n      }\n\n      return out;\n    }\n\n  });\n\n  /**\n   * Samples tuples passing through this operator.\n   * Uses reservoir sampling to maintain a representative sample.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} [params.size=1000] - The maximum number of samples.\n   */\n\n  function Sample(params) {\n    vegaDataflow.Transform.call(this, [], params);\n    this.count = 0;\n  }\n  Sample.Definition = {\n    'type': 'Sample',\n    'metadata': {},\n    'params': [{\n      'name': 'size',\n      'type': 'number',\n      'default': 1000\n    }]\n  };\n  vegaUtil.inherits(Sample, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const out = pulse.fork(pulse.NO_SOURCE),\n            mod = _.modified('size'),\n            num = _.size,\n            map = this.value.reduce((m, t) => (m[vegaDataflow.tupleid(t)] = 1, m), {});\n\n      let res = this.value,\n          cnt = this.count,\n          cap = 0; // sample reservoir update function\n\n      function update(t) {\n        let p, idx;\n\n        if (res.length < num) {\n          res.push(t);\n        } else {\n          idx = ~~((cnt + 1) * vegaStatistics.random());\n\n          if (idx < res.length && idx >= cap) {\n            p = res[idx];\n            if (map[vegaDataflow.tupleid(p)]) out.rem.push(p); // eviction\n\n            res[idx] = t;\n          }\n        }\n\n        ++cnt;\n      }\n\n      if (pulse.rem.length) {\n        // find all tuples that should be removed, add to output\n        pulse.visit(pulse.REM, t => {\n          const id = vegaDataflow.tupleid(t);\n\n          if (map[id]) {\n            map[id] = -1;\n            out.rem.push(t);\n          }\n\n          --cnt;\n        }); // filter removed tuples out of the sample reservoir\n\n        res = res.filter(t => map[vegaDataflow.tupleid(t)] !== -1);\n      }\n\n      if ((pulse.rem.length || mod) && res.length < num && pulse.source) {\n        // replenish sample if backing data source is available\n        cap = cnt = res.length;\n        pulse.visit(pulse.SOURCE, t => {\n          // update, but skip previously sampled tuples\n          if (!map[vegaDataflow.tupleid(t)]) update(t);\n        });\n        cap = -1;\n      }\n\n      if (mod && res.length > num) {\n        const n = res.length - num;\n\n        for (let i = 0; i < n; ++i) {\n          map[vegaDataflow.tupleid(res[i])] = -1;\n          out.rem.push(res[i]);\n        }\n\n        res = res.slice(n);\n      }\n\n      if (pulse.mod.length) {\n        // propagate modified tuples in the sample reservoir\n        pulse.visit(pulse.MOD, t => {\n          if (map[vegaDataflow.tupleid(t)]) out.mod.push(t);\n        });\n      }\n\n      if (pulse.add.length) {\n        // update sample reservoir\n        pulse.visit(pulse.ADD, update);\n      }\n\n      if (pulse.add.length || cap < 0) {\n        // output newly added tuples\n        out.add = res.filter(t => !map[vegaDataflow.tupleid(t)]);\n      }\n\n      this.count = cnt;\n      this.value = out.source = res;\n      return out;\n    }\n\n  });\n\n  /**\n   * Generates data tuples for a specified sequence range of numbers.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {number} params.start - The first number in the sequence.\n   * @param {number} params.stop - The last number (exclusive) in the sequence.\n   * @param {number} [params.step=1] - The step size between numbers in the sequence.\n   */\n\n  function Sequence(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  Sequence.Definition = {\n    'type': 'Sequence',\n    'metadata': {\n      'generates': true,\n      'changes': true\n    },\n    'params': [{\n      'name': 'start',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'stop',\n      'type': 'number',\n      'required': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'default': 'data'\n    }]\n  };\n  vegaUtil.inherits(Sequence, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      if (this.value && !_.modified()) return;\n      const out = pulse.materialize().fork(pulse.MOD),\n            as = _.as || 'data';\n      out.rem = this.value ? pulse.rem.concat(this.value) : pulse.rem;\n      this.value = d3Array.range(_.start, _.stop, _.step || 1).map(v => {\n        const t = {};\n        t[as] = v;\n        return vegaDataflow.ingest(t);\n      });\n      out.add = pulse.add.concat(this.value);\n      return out;\n    }\n\n  });\n\n  /**\n   * Propagates a new pulse without any tuples so long as the input\n   * pulse contains some added, removed or modified tuples.\n   * @param {object} params - The parameters for this operator.\n   * @constructor\n   */\n\n  function Sieve(params) {\n    vegaDataflow.Transform.call(this, null, params);\n    this.modified(true); // always treat as modified\n  }\n  vegaUtil.inherits(Sieve, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.value = pulse.source;\n      return pulse.changed() ? pulse.fork(pulse.NO_SOURCE | pulse.NO_FIELDS) : pulse.StopPropagation;\n    }\n\n  });\n\n  /**\n   * Discretize dates to specific time units.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The data field containing date/time values.\n   */\n\n  function TimeUnit(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  const OUTPUT = ['unit0', 'unit1'];\n  TimeUnit.Definition = {\n    'type': 'TimeUnit',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'field',\n      'type': 'field',\n      'required': true\n    }, {\n      'name': 'interval',\n      'type': 'boolean',\n      'default': true\n    }, {\n      'name': 'units',\n      'type': 'enum',\n      'values': vegaTime.TIME_UNITS,\n      'array': true\n    }, {\n      'name': 'step',\n      'type': 'number',\n      'default': 1\n    }, {\n      'name': 'maxbins',\n      'type': 'number',\n      'default': 40\n    }, {\n      'name': 'extent',\n      'type': 'date',\n      'array': true\n    }, {\n      'name': 'timezone',\n      'type': 'enum',\n      'default': 'local',\n      'values': ['local', 'utc']\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'array': true,\n      'length': 2,\n      'default': OUTPUT\n    }]\n  };\n  vegaUtil.inherits(TimeUnit, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const field = _.field,\n            band = _.interval !== false,\n            utc = _.timezone === 'utc',\n            floor = this._floor(_, pulse),\n            offset = (utc ? vegaTime.utcInterval : vegaTime.timeInterval)(floor.unit).offset,\n            as = _.as || OUTPUT,\n            u0 = as[0],\n            u1 = as[1],\n            step = floor.step;\n\n      let min = floor.start || Infinity,\n          max = floor.stop || -Infinity,\n          flag = pulse.ADD;\n\n      if (_.modified() || pulse.modified(vegaUtil.accessorFields(field))) {\n        pulse = pulse.reflow(true);\n        flag = pulse.SOURCE;\n        min = Infinity;\n        max = -Infinity;\n      }\n\n      pulse.visit(flag, t => {\n        const v = field(t);\n        let a, b;\n\n        if (v == null) {\n          t[u0] = null;\n          if (band) t[u1] = null;\n        } else {\n          t[u0] = a = b = floor(v);\n          if (band) t[u1] = b = offset(a, step);\n          if (a < min) min = a;\n          if (b > max) max = b;\n        }\n      });\n      floor.start = min;\n      floor.stop = max;\n      return pulse.modifies(band ? as : u0);\n    },\n\n    _floor(_, pulse) {\n      const utc = _.timezone === 'utc'; // get parameters\n\n      const {\n        units,\n        step\n      } = _.units ? {\n        units: _.units,\n        step: _.step || 1\n      } : vegaTime.timeBin({\n        extent: _.extent || vegaUtil.extent(pulse.materialize(pulse.SOURCE).source, _.field),\n        maxbins: _.maxbins\n      }); // check / standardize time units\n\n      const tunits = vegaTime.timeUnits(units),\n            prev = this.value || {},\n            floor = (utc ? vegaTime.utcFloor : vegaTime.timeFloor)(tunits, step);\n      floor.unit = vegaUtil.peek(tunits);\n      floor.units = tunits;\n      floor.step = step;\n      floor.start = prev.start;\n      floor.stop = prev.stop;\n      return this.value = floor;\n    }\n\n  });\n\n  /**\n   * An index that maps from unique, string-coerced, field values to tuples.\n   * Assumes that the field serves as a unique key with no duplicate values.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The field accessor to index.\n   */\n\n  function TupleIndex(params) {\n    vegaDataflow.Transform.call(this, vegaUtil.fastmap(), params);\n  }\n  vegaUtil.inherits(TupleIndex, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const df = pulse.dataflow,\n            field = _.field,\n            index = this.value,\n            set = t => index.set(field(t), t);\n\n      let mod = true;\n\n      if (_.modified('field') || pulse.modified(field.fields)) {\n        index.clear();\n        pulse.visit(pulse.SOURCE, set);\n      } else if (pulse.changed()) {\n        pulse.visit(pulse.REM, t => index.delete(field(t)));\n        pulse.visit(pulse.ADD, set);\n      } else {\n        mod = false;\n      }\n\n      this.modified(mod);\n      if (index.empty > df.cleanThreshold) df.runAfter(index.clean);\n      return pulse.fork();\n    }\n\n  });\n\n  /**\n   * Extracts an array of values. Assumes the source data has already been\n   * reduced as needed (e.g., by an upstream Aggregate transform).\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(object): *} params.field - The domain field to extract.\n   * @param {function(*,*): number} [params.sort] - An optional\n   *   comparator function for sorting the values. The comparator will be\n   *   applied to backing tuples prior to value extraction.\n   */\n\n  function Values(params) {\n    vegaDataflow.Transform.call(this, null, params);\n  }\n  vegaUtil.inherits(Values, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      const run = !this.value || _.modified('field') || _.modified('sort') || pulse.changed() || _.sort && pulse.modified(_.sort.fields);\n\n      if (run) {\n        this.value = (_.sort ? pulse.source.slice().sort(vegaDataflow.stableCompare(_.sort)) : pulse.source).map(_.field);\n      }\n    }\n\n  });\n\n  function WindowOp(op, field, param, as) {\n    const fn = WindowOps[op](field, param);\n    return {\n      init: fn.init || vegaUtil.zero,\n      update: function (w, t) {\n        t[as] = fn.next(w);\n      }\n    };\n  }\n  const WindowOps = {\n    row_number: function () {\n      return {\n        next: w => w.index + 1\n      };\n    },\n    rank: function () {\n      let rank;\n      return {\n        init: () => rank = 1,\n        next: w => {\n          const i = w.index,\n                data = w.data;\n          return i && w.compare(data[i - 1], data[i]) ? rank = i + 1 : rank;\n        }\n      };\n    },\n    dense_rank: function () {\n      let drank;\n      return {\n        init: () => drank = 1,\n        next: w => {\n          const i = w.index,\n                d = w.data;\n          return i && w.compare(d[i - 1], d[i]) ? ++drank : drank;\n        }\n      };\n    },\n    percent_rank: function () {\n      const rank = WindowOps.rank(),\n            next = rank.next;\n      return {\n        init: rank.init,\n        next: w => (next(w) - 1) / (w.data.length - 1)\n      };\n    },\n    cume_dist: function () {\n      let cume;\n      return {\n        init: () => cume = 0,\n        next: w => {\n          const d = w.data,\n                c = w.compare;\n          let i = w.index;\n\n          if (cume < i) {\n            while (i + 1 < d.length && !c(d[i], d[i + 1])) ++i;\n\n            cume = i;\n          }\n\n          return (1 + cume) / d.length;\n        }\n      };\n    },\n    ntile: function (field, num) {\n      num = +num;\n      if (!(num > 0)) vegaUtil.error('ntile num must be greater than zero.');\n      const cume = WindowOps.cume_dist(),\n            next = cume.next;\n      return {\n        init: cume.init,\n        next: w => Math.ceil(num * next(w))\n      };\n    },\n    lag: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index - offset;\n          return i >= 0 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    lead: function (field, offset) {\n      offset = +offset || 1;\n      return {\n        next: w => {\n          const i = w.index + offset,\n                d = w.data;\n          return i < d.length ? field(d[i]) : null;\n        }\n      };\n    },\n    first_value: function (field) {\n      return {\n        next: w => field(w.data[w.i0])\n      };\n    },\n    last_value: function (field) {\n      return {\n        next: w => field(w.data[w.i1 - 1])\n      };\n    },\n    nth_value: function (field, nth) {\n      nth = +nth;\n      if (!(nth > 0)) vegaUtil.error('nth_value nth must be greater than zero.');\n      return {\n        next: w => {\n          const i = w.i0 + (nth - 1);\n          return i < w.i1 ? field(w.data[i]) : null;\n        }\n      };\n    },\n    prev_value: function (field) {\n      let prev;\n      return {\n        init: () => prev = null,\n        next: w => {\n          const v = field(w.data[w.index]);\n          return v != null ? prev = v : prev;\n        }\n      };\n    },\n    next_value: function (field) {\n      let v, i;\n      return {\n        init: () => (v = null, i = -1),\n        next: w => {\n          const d = w.data;\n          return w.index <= i ? v : (i = find(field, d, w.index)) < 0 ? (i = d.length, v = null) : v = field(d[i]);\n        }\n      };\n    }\n  };\n\n  function find(field, data, index) {\n    for (let n = data.length; index < n; ++index) {\n      const v = field(data[index]);\n      if (v != null) return index;\n    }\n\n    return -1;\n  }\n\n  const ValidWindowOps = Object.keys(WindowOps);\n\n  function WindowState(_) {\n    const ops = vegaUtil.array(_.ops),\n          fields = vegaUtil.array(_.fields),\n          params = vegaUtil.array(_.params),\n          as = vegaUtil.array(_.as),\n          outputs = this.outputs = [],\n          windows = this.windows = [],\n          inputs = {},\n          map = {},\n          counts = [],\n          measures = [];\n    let countOnly = true;\n\n    function visitInputs(f) {\n      vegaUtil.array(vegaUtil.accessorFields(f)).forEach(_ => inputs[_] = 1);\n    }\n\n    visitInputs(_.sort);\n    ops.forEach((op, i) => {\n      const field = fields[i],\n            mname = vegaUtil.accessorName(field),\n            name = measureName(op, mname, as[i]);\n      visitInputs(field);\n      outputs.push(name); // Window operation\n\n      if (vegaUtil.hasOwnProperty(WindowOps, op)) {\n        windows.push(WindowOp(op, fields[i], params[i], name));\n      } // Aggregate operation\n      else {\n          if (field == null && op !== 'count') {\n            vegaUtil.error('Null aggregate field specified.');\n          }\n\n          if (op === 'count') {\n            counts.push(name);\n            return;\n          }\n\n          countOnly = false;\n          let m = map[mname];\n\n          if (!m) {\n            m = map[mname] = [];\n            m.field = field;\n            measures.push(m);\n          }\n\n          m.push(createMeasure(op, name));\n        }\n    });\n\n    if (counts.length || measures.length) {\n      this.cell = cell(measures, counts, countOnly);\n    }\n\n    this.inputs = Object.keys(inputs);\n  }\n  const prototype = WindowState.prototype;\n\n  prototype.init = function () {\n    this.windows.forEach(_ => _.init());\n    if (this.cell) this.cell.init();\n  };\n\n  prototype.update = function (w, t) {\n    const cell = this.cell,\n          wind = this.windows,\n          data = w.data,\n          m = wind && wind.length;\n    let j;\n\n    if (cell) {\n      for (j = w.p0; j < w.i0; ++j) cell.rem(data[j]);\n\n      for (j = w.p1; j < w.i1; ++j) cell.add(data[j]);\n\n      cell.set(t);\n    }\n\n    for (j = 0; j < m; ++j) wind[j].update(w, t);\n  };\n\n  function cell(measures, counts, countOnly) {\n    measures = measures.map(m => compileMeasures(m, m.field));\n    const cell = {\n      num: 0,\n      agg: null,\n      store: false,\n      count: counts\n    };\n\n    if (!countOnly) {\n      var n = measures.length,\n          a = cell.agg = Array(n),\n          i = 0;\n\n      for (; i < n; ++i) a[i] = new measures[i](cell);\n    }\n\n    if (cell.store) {\n      var store = cell.data = new TupleStore();\n    }\n\n    cell.add = function (t) {\n      cell.num += 1;\n      if (countOnly) return;\n      if (store) store.add(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].add(a[i].get(t), t);\n      }\n    };\n\n    cell.rem = function (t) {\n      cell.num -= 1;\n      if (countOnly) return;\n      if (store) store.rem(t);\n\n      for (let i = 0; i < n; ++i) {\n        a[i].rem(a[i].get(t), t);\n      }\n    };\n\n    cell.set = function (t) {\n      let i, n; // consolidate stored values\n\n      if (store) store.values(); // update tuple properties\n\n      for (i = 0, n = counts.length; i < n; ++i) t[counts[i]] = cell.num;\n\n      if (!countOnly) for (i = 0, n = a.length; i < n; ++i) a[i].set(t);\n    };\n\n    cell.init = function () {\n      cell.num = 0;\n      if (store) store.reset();\n\n      for (let i = 0; i < n; ++i) a[i].init();\n    };\n\n    return cell;\n  }\n\n  /**\n   * Perform window calculations and write results to the input stream.\n   * @constructor\n   * @param {object} params - The parameters for this operator.\n   * @param {function(*,*): number} [params.sort] - A comparator function for sorting tuples within a window.\n   * @param {Array<function(object): *>} [params.groupby] - An array of accessors by which to partition tuples into separate windows.\n   * @param {Array<string>} params.ops - An array of strings indicating window operations to perform.\n   * @param {Array<function(object): *>} [params.fields] - An array of accessors\n   *   for data fields to use as inputs to window operations.\n   * @param {Array<*>} [params.params] - An array of parameter values for window operations.\n   * @param {Array<string>} [params.as] - An array of output field names for window operations.\n   * @param {Array<number>} [params.frame] - Window frame definition as two-element array.\n   * @param {boolean} [params.ignorePeers=false] - If true, base window frame boundaries on row\n   *   number alone, ignoring peers with identical sort values. If false (default),\n   *   the window boundaries will be adjusted to include peer values.\n   */\n\n  function Window(params) {\n    vegaDataflow.Transform.call(this, {}, params);\n    this._mlen = 0;\n    this._mods = [];\n  }\n  Window.Definition = {\n    'type': 'Window',\n    'metadata': {\n      'modifies': true\n    },\n    'params': [{\n      'name': 'sort',\n      'type': 'compare'\n    }, {\n      'name': 'groupby',\n      'type': 'field',\n      'array': true\n    }, {\n      'name': 'ops',\n      'type': 'enum',\n      'array': true,\n      'values': ValidWindowOps.concat(ValidAggregateOps)\n    }, {\n      'name': 'params',\n      'type': 'number',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'fields',\n      'type': 'field',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'as',\n      'type': 'string',\n      'null': true,\n      'array': true\n    }, {\n      'name': 'frame',\n      'type': 'number',\n      'null': true,\n      'array': true,\n      'length': 2,\n      'default': [null, 0]\n    }, {\n      'name': 'ignorePeers',\n      'type': 'boolean',\n      'default': false\n    }]\n  };\n  vegaUtil.inherits(Window, vegaDataflow.Transform, {\n    transform(_, pulse) {\n      this.stamp = pulse.stamp;\n\n      const mod = _.modified(),\n            cmp = vegaDataflow.stableCompare(_.sort),\n            key = groupkey(_.groupby),\n            group = t => this.group(key(t)); // initialize window state\n\n\n      let state = this.state;\n\n      if (!state || mod) {\n        state = this.state = new WindowState(_);\n      } // partition input tuples\n\n\n      if (mod || pulse.modified(state.inputs)) {\n        this.value = {};\n        pulse.visit(pulse.SOURCE, t => group(t).add(t));\n      } else {\n        pulse.visit(pulse.REM, t => group(t).remove(t));\n        pulse.visit(pulse.ADD, t => group(t).add(t));\n      } // perform window calculations for each modified partition\n\n\n      for (let i = 0, n = this._mlen; i < n; ++i) {\n        processPartition(this._mods[i], state, cmp, _);\n      }\n\n      this._mlen = 0;\n      this._mods = []; // TODO don't reflow everything?\n\n      return pulse.reflow(mod).modifies(state.outputs);\n    },\n\n    group(key) {\n      let group = this.value[key];\n\n      if (!group) {\n        group = this.value[key] = SortedList(vegaDataflow.tupleid);\n        group.stamp = -1;\n      }\n\n      if (group.stamp < this.stamp) {\n        group.stamp = this.stamp;\n        this._mods[this._mlen++] = group;\n      }\n\n      return group;\n    }\n\n  });\n\n  function processPartition(list, state, cmp, _) {\n    const sort = _.sort,\n          range = sort && !_.ignorePeers,\n          frame = _.frame || [null, 0],\n          data = list.data(cmp),\n          // use cmp for stable sort\n    n = data.length,\n          b = range ? d3Array.bisector(sort) : null,\n          w = {\n      i0: 0,\n      i1: 0,\n      p0: 0,\n      p1: 0,\n      index: 0,\n      data: data,\n      compare: sort || vegaUtil.constant(-1)\n    };\n    state.init();\n\n    for (let i = 0; i < n; ++i) {\n      setWindow(w, frame, i, n);\n      if (range) adjustRange(w, b);\n      state.update(w, data[i]);\n    }\n  }\n\n  function setWindow(w, f, i, n) {\n    w.p0 = w.i0;\n    w.p1 = w.i1;\n    w.i0 = f[0] == null ? 0 : Math.max(0, i - Math.abs(f[0]));\n    w.i1 = f[1] == null ? n : Math.min(n, i + Math.abs(f[1]) + 1);\n    w.index = i;\n  } // if frame type is 'range', adjust window for peer values\n\n\n  function adjustRange(w, bisect) {\n    const r0 = w.i0,\n          r1 = w.i1 - 1,\n          c = w.compare,\n          d = w.data,\n          n = d.length - 1;\n    if (r0 > 0 && !c(d[r0], d[r0 - 1])) w.i0 = bisect.left(d, d[r0]);\n    if (r1 < n && !c(d[r1], d[r1 + 1])) w.i1 = bisect.right(d, d[r1]);\n  }\n\n  exports.aggregate = Aggregate;\n  exports.bin = Bin;\n  exports.collect = Collect;\n  exports.compare = Compare;\n  exports.countpattern = CountPattern;\n  exports.cross = Cross;\n  exports.density = Density;\n  exports.dotbin = DotBin;\n  exports.expression = Expression;\n  exports.extent = Extent;\n  exports.facet = Facet;\n  exports.field = Field;\n  exports.filter = Filter;\n  exports.flatten = Flatten;\n  exports.fold = Fold;\n  exports.formula = Formula;\n  exports.generate = Generate;\n  exports.impute = Impute;\n  exports.joinaggregate = JoinAggregate;\n  exports.kde = KDE;\n  exports.key = Key;\n  exports.load = Load;\n  exports.lookup = Lookup;\n  exports.multiextent = MultiExtent;\n  exports.multivalues = MultiValues;\n  exports.params = Params;\n  exports.pivot = Pivot;\n  exports.prefacet = PreFacet;\n  exports.project = Project;\n  exports.proxy = Proxy;\n  exports.quantile = Quantile;\n  exports.relay = Relay;\n  exports.sample = Sample;\n  exports.sequence = Sequence;\n  exports.sieve = Sieve;\n  exports.subflow = Subflow;\n  exports.timeunit = TimeUnit;\n  exports.tupleindex = TupleIndex;\n  exports.values = Values;\n  exports.window = Window;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","require","module","exports","factory","define","amd","globalThis","self","vega","d3","vegaUtil","vegaDataflow","vegaStatistics","d3Array","vegaTime","multikey","f","x","n","length","i","k","String","groupkey","fields","measure","key","value","out","extend","name","base_op","compareIndex","a","b","idx","resolve","agg","map","forEach","getreqs","req","AggregateOps","Object","values","sort","init","missing","valid","_ops","op","add","v","t","rem","set","_out","compileMeasures","field","ctr","cell","ops","get","identity","slice","prototype","TupleStore","_key","tupleid","reset","Aggregate","params","Transform","call","_adds","_mods","_mlen","_alen","_drop","_cross","_dims","_dnames","_measures","_countOnly","_outputs","_inputs","_prev","_counts","Bin","SortedList","idFunc","source","input","data","cnt","push","remove","size","compare","resort","filter","merge","concat","Collect","Compare","Operator","update$5","_","modified","orders","CountPattern","Cross","parse","def","func","FUNCTION","hasOwnProperty","Distributions","error","d","FIELD","from","DISTRIBUTIONS","Density","pulse","materialize","SOURCE","fieldNames","as","accessorName","partition$1","groupby","groups","g","dims","DotBin","Expression","update$4","expr","accessor","datum","accessorFields","Extent","undefined","Subflow","parent","count","Facet","_keys","fastmap","_targets","active","a.forEach","Field","update$3","isArray","array","Filter","Flatten","Fold","Formula","Generate","Impute","getValue","m","method","Methods","getField","NaN","partition","keyvals","domain","kMap","gMap","group","j","gKey","gVals","Empty","JoinAggregate","KDE","Key","update$2","flat","Load","_pending","stop","output","ingest","fork","NO_FIELDS","NO_SOURCE","clean","Lookup","MultiExtent","update$1","ext","extents","min","Infinity","max","e","MultiValues","update","reduce","Params","Pivot","aggregateParams","keys","pivotKeys","limit","changed","bind","list","visit","ascending","PreFacet","Project","Proxy","Quantile","Relay","Sample","Sequence","Sieve","TimeUnit","TupleIndex","Values","WindowOp","param","fn","WindowOps","zero","w","next","WindowState","visitInputs","inputs","outputs","windows","counts","measures","countOnly","mname","num","store","Array","cell.add","cell.rem","cell.set","cell.init","Window","processPartition","state","cmp","range","ignorePeers","frame","bisector","i0","i1","p0","p1","index","constant","Math","abs","r0","r1","c","bisect","left","right","noop","__count__","sum","product","mean","mean_d","average","variance","dev","variancep","stdev","sqrt","stdevp","stderr","distinct","ci0","ci1","median","q2","q1","q3","Number","isNaN","argmin","argmax","ValidAggregateOps","prototype$1","prototype$1.reset","_add","_rem","_q","_get","_ext","prototype$1.add","prototype$1.rem","prototype$1.values","r","prototype$1.distinct","s","extent","prototype$1.extent","extentIndex","prototype$1.argmin","prototype$1.argmax","prototype$1.min","prototype$1.max","quartile","prototype$1.quartile","quartiles","prototype$1.q1","prototype$1.q2","prototype$1.q3","ci","prototype$1.ci","_ci","bootstrapCI","prototype$1.ci0","prototype$1.ci1","Definition","inherits","transform","aggr","mod","stamp","REM","ADD","modifies","drop","cross","runAfter","changes","collect","cells","tuple","vals","generate","base","curr","inputVisit","inputMap","dname","cellkey","outname","newcell","newtuple","p","names","replace","celltuple","adds","mods","prev","band","interval","bins","_bins","start","step","b0","b1","reflow","flag","ADD_MOD","bin","ceil","anchor","floor","toNumber","EPSILON$1","ALL","stableCompare","root","process","match","case","text","toUpperCase","toLowerCase","tokens","test","_parameterCheck","_match","_stop","_finish","RegExp","stopwords","pattern","tuples","_tuples","ADD_REM","truthy","kde","randomKDE","mixture","randomMixture","normal","randomNormal","lognormal","randomLogNormal","uniform","randomUniform","distributions","dist","distribution","minsteps","steps","maxsteps","sampleCurve","Output","smooth","span","dotbin","isFinite","dataflow","warn","connect","target","detachSubflow","targets","evaluate","activate","flow","subflow","flows","sf","_group","df","detached","detach","initTargets","act","cache","rekey","id","delete","MOD","k0","k1","REFLOW","empty","cleanThreshold","revisit","isMod","has","arrays","maxlen","l","derive","fnames","initonly","gen","generator","impute","fName","kName","gNames","kVal","_impute","bandwidth","cumulative","density","scale","local","StopPropagation","format","async","request","url","then","res","touch","defaultValue","default","some","_transform","rederive","lut","addAll","dt","probs","EPSILON","q","quantiles","random","cap","OUTPUT","TIME_UNITS","utc","timezone","_floor","offset","utcInterval","timeInterval","unit","u0","u1","units","timeBin","maxbins","tunits","timeUnits","utcFloor","timeFloor","peek","clear","row_number","rank","dense_rank","drank","percent_rank","cume_dist","cume","ntile","lag","lead","first_value","last_value","nth_value","nth","prev_value","next_value","ValidWindowOps","prototype.init","prototype.update","wind","aggregate","countpattern","expression","facet","flatten","fold","formula","joinaggregate","load","lookup","multiextent","multivalues","pivot","prefacet","project","proxy","quantile","relay","sample","sequence","sieve","timeunit","tupleindex","window","defineProperty"]
}
