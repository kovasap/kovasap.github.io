{"version":3,"sources":["ghostwheel/utils.cljc"],"mappings":"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","names":["ghostwheel.utils/ghostwheel-default-config","ghostwheel.utils/cljs-env?","env","cljs.core/boolean","*config-cache","cljs.core.atom","read-config-file","reload-config","plain-config","cljs-compiler-config","cljs.env/*compiler*","or__4253__auto__","cljs.core/deref","cljs.core.get_in","cljs.core.merge","cljs.core.into","cljs.core.map","p__52422","vec__52423","cljs.core.nth","k","v","cljs.core.keyword","cljs.core/name","var_args","G__52428","ghostwheel.utils/get-env-config","js/Error","ghostwheel.utils.get_env_config","cache?","cljs.core/not","now","cljs.core/identity","js/Date.now","cljs.core/reset!","G__52440","ghostwheel.utils/get-base-config","ghostwheel.utils.get_base_config","G__52452","ghostwheel.utils/clj->cljs","form","ghostwheel.utils.clj__GT_cljs","strip-core-ns","p1__52447#","ns-replacements","G__52455","replace-namespace","cljs.core/qualified-symbol?","nspace","cljs.core/namespace","cljs.core/contains?","cljs.core.symbol","cljs.core.get","clojure.walk/postwalk","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","ghostwheel.utils/gen-exception","msg"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc ghostwheel.utils\n  #?(:cljs (:require-macros ghostwheel.utils))\n  (:require [clojure.walk :as walk]\n            #?@(:clj  [[orchestra.spec.test :as ost]\n                       [clojure.edn :as edn]]\n                :cljs [[cljs.env :as cljs-env]\n                       [orchestra-cljs.spec.test :as ost]])))\n\n\n;; This isn't particularly pretty, but it's how we avoid\n;; having ClojureScript as a required dependency on Clojure\n#?(:clj (try\n          (do\n            (ns-unalias (find-ns 'ghostwheel.utils) 'cljs-env)\n            (require '[cljs.env :as cljs-env]))\n          (catch Exception _ (require '[ghostwheel.stubs.cljs-env :as cljs-env]))))\n\n\n(def ghostwheel-default-config\n  #:ghostwheel.core{;; Evaluation trace verbosity level. 0 disables all tracing code generation.\n                    :trace           0\n\n                    ;; #RRGGBB, #RGB, or keyword from the `ghostwheel-colors` map.\n                    :trace-color     :violet\n\n                    ;; When disabled no checks of any kind are\n                    ;; performed and no test code is generated.\n                    :check           false\n\n                    ;; Determines whether Ghostwheel should warn on missing fspecs\n                    ;; and plain (non-Ghostwheel) `defn` usage. When enabled on a\n                    ;; namespace or higher level, you can exclude individual `defn`s or\n                    ;; `declare`s by setting it to false in their respective metadata\n                    :check-coverage  false\n\n                    ;; Disable side effect detection\n                    :ignore-fx       false\n\n                    ;; Number of generative tests performed when quick-checking (on hot-reload)\n                    :num-tests       0\n\n                    ;; Number of generative tests performed when checking extensively (test suite)\n                    :num-tests-ext   100\n\n                    ;; Determines which of the above two options should take\n                    ;; precedence. Set to true in your test build configuration.\n                    :extensive-tests false\n\n                    ;; Ghostwheel generates standard `defn` function definitions\n                    ;; by default. If you require composability with other\n                    ;; `defn`-like macros, you can have Ghostwheel desugar to\n                    ;; them instead by setting the macro name as a string here.\n                    :defn-macro      nil\n\n                    ;; Spec-instrument functions on namespace reload.\n                    :instrument      false\n\n                    ;; Spec-instrument functions on namespace reload using\n                    ;; orchestra, which spec-checks the output in addition to\n                    ;; the input. Use either this or `::instrument`, not both.\n                    :outstrument     false\n\n                    ;; The following options can only be set in\n                    ;; the global Ghostwheel configuration layer\n\n                    ;; Nilable vector of qualified external namespaces\n                    ;; or functions (unquoted) to spec-instrument before\n                    ;; and unstrument after testing to catch incorrect\n                    ;; function calls at test time without the runtime\n                    ;; performance impact. Fspecs must be defined for\n                    ;; the relevant functions in a `require`d namespace\n                    ;; using either `s/fdef` or Ghostwheel's `>fdef`.\n                    :extrument       nil\n\n                    ;; Nilable map of Expound configuration options.\n                    ;; If not nil, the spec printer will be set to\n                    ;; expound's with the given configuration options.\n                    :expound         {:show-valid-values? true\n                                      :print-specs?       true}\n\n                    ;; Output channel for tracing and check\n                    ;; reports. Only `:repl` and `:js-console`\n                    ;; are supported at the moment. The option is\n                    ;; ignored on Clojure where only `:repl` is used.\n                    :report-output   :js-console})\n\n\n(defn cljs-env? [env] (boolean (:ns env)))\n\n\n(let [*config-cache\n      (atom {::timestamp 0\n             ::value     nil})\n\n      read-config-file\n      (fn []\n        #?(:clj  (try\n                   (edn/read-string (slurp \"ghostwheel.edn\"))\n                   (catch Exception _ nil))\n           :cljs nil))\n\n      reload-config\n      (fn []\n        ;#?(:clj (.println System/err \"Reloaded ghostwheel config.\")) ; DEBUG\n        (let [plain-config                            ;; TODO validation\n              (let [cljs-compiler-config\n                    (when cljs-env/*compiler*\n                      (or (get-in @cljs-env/*compiler* [:options :external-config :ghostwheel])\n                          ;; Deprecated.\n                          (get-in @cljs-env/*compiler* [:options :ghostwheel])))]\n                (when (or #?(:clj (= (System/getProperty \"ghostwheel.enabled\") \"true\"))\n                          cljs-compiler-config)\n                  (merge {}\n                         (read-config-file)\n                         cljs-compiler-config)))]\n          (when plain-config\n            (into {} (map (fn [[k v]]\n                            [(keyword \"ghostwheel.core\" (name k))\n                             v])\n                          plain-config)))))]\n\n  (defn get-env-config\n    ([]\n     (get-env-config true))\n    ([cache?]\n     (if (or (not cache?)\n             #?(:clj (= (System/getProperty \"ghostwheel.cache\") \"false\")))\n       (reload-config)\n       (let [now (identity #?(:clj (System/currentTimeMillis) :cljs (js/Date.now)))]\n         (if (< (- now (::timestamp @*config-cache))\n                2000)\n           (::value @*config-cache)\n           (::value (reset! *config-cache {::timestamp now\n                                           ::value     (reload-config)}))))))))\n\n\n(defn get-base-config\n  ([]\n   (get-base-config true))\n  ([cache?]\n   (merge ghostwheel-default-config (get-env-config cache?))))\n\n\n(defn clj->cljs\n  ([form]\n   (clj->cljs form true))\n  ([form strip-core-ns]\n   (let [ns-replacements   (cond-> {\"clojure.core\"            \"cljs.core\"\n                                    \"clojure.test\"            \"cljs.test\"\n                                    \"clojure.spec.alpha\"      \"cljs.spec.alpha\"\n                                    \"clojure.spec.test.alpha\" \"cljs.spec.test.alpha\"\n                                    \"orchestra.spec.test\"     \"orchestra-cljs.spec.test\"\n                                    \"clojure.spec.gen.alpha\"  \"cljs.spec.gen.alpha\"}\n                                   strip-core-ns (merge {\"clojure.core\" nil\n                                                         \"cljs.core\"    nil}))\n         replace-namespace #(if-not (qualified-symbol? %)\n                              %\n                              (let [nspace (namespace %)]\n                                (if (contains? ns-replacements nspace)\n                                  (symbol (get ns-replacements nspace) (name %))\n                                  %)))]\n     (walk/postwalk replace-namespace form))))\n\n\n(defn gen-exception [env msg]\n  `(throw (~(if (cljs-env? env) 'js/Error. 'Exception.) ~msg)))\n"]}