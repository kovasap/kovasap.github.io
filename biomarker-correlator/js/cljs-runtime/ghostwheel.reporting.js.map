{"version":3,"sources":["ghostwheel/reporting.cljc"],"mappings":"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","names":["ghostwheel.reporting/*all-tests-successful","cljs.core.atom","ghostwheel.reporting/wrap","cljs.core.partial","ghostwheel.logging/wrap-line","ghostwheel.reporting/inc-report-counter!","cljs.test/inc-report-counter!","ghostwheel.reporting/warning-style","ghostwheel.logging/ghostwheel-colors","ghostwheel.reporting/snippets","js/ghostwheel","js/ghostwheel.reporting","js/ghostwheel.reporting.report","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__52751","cljs.core/MultiFn","cljs.core.symbol","ghostwheel.reporting/report","m","ghostwheel.logging.group","ghostwheel.logging/group-end","map__52754","cljs.core/--destructure-map","fail","error","pass","test","warn","passed?","cljs.core._EQ_","warnings?","G__52756","color","label","or__4253__auto__","ghostwheel.logging.log","cljs.core.dorun","cljs.core.repeatedly","map__52762","fn-name","fspec","spec-checks","check-coverage","marked-unsafe","report-output","cljs.core/not","ghostwheel.reporting/explain-problem-str","failure-type","problem","map__52766","pred","val","in","path","via","G__52767","cljs.core/Keyword","js/Error","cljs.core.into","cljs.core.not_EQ_","cljs.core/seq","ghostwheel.reporting/issue-msg","ghostwheel.reporting/report-unexpected-side-effects","message","map__52771","found-fx","ghostwheel.logging/log-bold","cljs.core.map","p__52772","vec__52773","cljs.core.nth","type","form","details","cljs.core/vec","cljs.core.concat","ghostwheel.logging/log","cljs.core.doall","cljs.core/name","ghostwheel.reporting/report-unexpected-safety","safe-name","clojure.string/replace","p__52782","map__52783","ghostwheel.reporting/report-spec-check","seq__52784","chunk__52788","count__52789","i__52790","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","check","test-ret","spec-error","data","msg","e52850","e52869","js/Object","_","args","cljs.core/cons","cljs.core/with-meta","clojure.string/split-lines","sb__4795__auto__","goog.string/StringBuffer","*print-newline*-orig-val__52861","cljs.core/*print-newline*","*print-fn*-orig-val__52862","cljs.core/*print-fn*","*print-newline*-temp-val__52863","*print-fn*-temp-val__52864","x__4796__auto__","*print-newline*-orig-val__52880","*print-fn*-orig-val__52882","*print-newline*-temp-val__52883","*print-fn*-temp-val__52884","expound.alpha/custom-printer","ghostwheel.logging/*report-output*","ghostwheel.logging.group_collapsed","map__52889","failure","summary","G__52890","start-group","ghostwheel.logging/group","G__52891","G__52892","G__52895","ghostwheel.logging.DBG","p1__52901#","p2__52902#","cljs.core.swap_BANG_","and__4251__auto__","cljs.test/successful?"],"sourcesContent":[";; Copyright (c) George Lipov. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns ^:no-doc ghostwheel.reporting\n  (:require [clojure.spec.alpha :as s]\n            [clojure.spec.test.alpha :as st]\n            [clojure.test :as t]\n            [expound.alpha :as expound]\n            [clojure.string :as string]\n            [ghostwheel.logging :as l\n             :refer [log log-bold group group-collapsed group-end DBG]]))\n\n\n(def *all-tests-successful (atom true))\n\n\n(def wrap (partial l/wrap-line 80))\n\n\n(def inc-report-counter! #?(:clj  t/inc-report-counter\n                            :cljs t/inc-report-counter!))\n\n(def warning-style {::l/background (:orange0 l/ghostwheel-colors)})\n\n\n(def snippets\n  {::incomplete-coverage \" => Test coverage incomplete:\"\n   ::no-gen-testing      \" => No generative testing performed\"})\n\n\n(defmulti ^:dynamic report :type)\n\n\n(defmethod report :begin-test-ns [m]\n  (group (str \"Checking \" (:ns m) \" ...\")\n         {::l/background (:base01 l/ghostwheel-colors)}))\n\n\n(defmethod report :end-test-ns [m]\n  (group-end))\n\n\n(defmethod report :summary [m]\n  (let [{:keys [fail error pass test warn]} m\n        passed?   (= pass test)\n        warnings? (some-> warn (> 0))\n        color     (cond\n                    (= test 0) (:black l/ghostwheel-colors)\n                    passed? (:green l/ghostwheel-colors)\n                    :else (:red l/ghostwheel-colors))\n        label     (cond\n                    (= test 0) \"No active tests found\"\n                    passed? (str \"Passed all \" test \" checks\")\n                    :else (str \"Failed \" fail \" of \" test \" checks\"\n                               (when (> error 0)\n                                 (str \"; \" error \" test error(s)\"))))]\n    (do\n      (group-end)\n      (when (or (not passed?) warnings?)\n        (log))\n      (log label {::l/background color})\n      (when warnings?\n        (log (str warn \" warning(s)\")\n             {::l/background (:orange0 l/ghostwheel-colors)}))\n      ;; Might be overkill, but we want to make sure we reset the group nesting\n      ;; in DevTools if anything should blow up above\n      (dorun (repeatedly 5 l/group-end)))))\n\n\n(defmethod report :pass [m]\n  (let [{:keys [::fn-name ::fspec ::spec-checks ::check-coverage\n                ::marked-unsafe ::report-output]} (:message m)]\n    (inc-report-counter! :pass)\n    ;; REVIEW : We don't expect\n    (when check-coverage\n      (cond marked-unsafe\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Function marked as unsafe.\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            (not fspec)\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Missing fspec(s)\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            (not spec-checks)\n            (do\n              (inc-report-counter! :warn)\n              (group (str \"WARNING: \"\n                          fn-name\n                          \" \u2013 Number of tests set to 0\"\n                          (::no-gen-testing snippets)\n                          (::incomplete-coverage snippets))\n                     warning-style)\n              (group-end))\n\n            :else nil))))\n\n\n;; REVIEW: We don't seem to be needing this anymore.\n(defn- explain-problem-str [failure-type problem]\n  (let [{:keys [pred val in path via]} problem]\n    (case failure-type\n      :check-failed (into {:val val :in in :not pred}\n                          [(when (not= path [:ret]) [:at path])\n                           (when (seq via) [:via via])])\n      :instrument (into {:val val :in in :not pred :at path}\n                        [(when (seq via) [:via via])])\n      :else problem)))\n\n\n(def ^:private issue-msg\n  \"\\nPlease file an issue at https://github.com/gnl/ghostwheel/issues if you encounter false positives or negatives in side effect detection.\")\n\n(defn- report-unexpected-side-effects [message]\n  (let [{:keys [::fn-name ::found-fx]} message]\n    (log-bold \"Possible side effects detected in function marked as safe:\\n\")\n    (->> found-fx\n         ;(map (fn [[type form details]] {:found type :at form :kind details}))\n         (map (fn [[type form details]]\n                (vec (concat [type]\n                             (when form ['at form])\n                             (when details ['kind details])))))\n         (map log)\n         (doall))\n    (->> (str \"=> Either remove the side effects, rename the function to '\"\n              (str (name fn-name) \"!'\")\n              \" to mark it as unsafe, or add ^::g/ignore-fx to its metadata to disable this warning and consider the function safe for automated generative testing.\")\n         wrap\n         log)\n    (log (wrap issue-msg))))\n\n\n(defn- report-unexpected-safety [message]\n  (let [safe-name (string/replace (name (::fn-name message)) #\"!$\" \"\")]\n    (log-bold \"No side effects detected in function marked as unsafe.\")\n    (->> (str \"=> If safe, rename to '\"\n              safe-name\n              \"'. If unsafe, rename the called unsafe functions to suffix them with a '!', or add the ^::g/ignore-fx metadata to disable this check.\")\n         wrap\n         log)\n    (log (wrap issue-msg))\n    log))\n\n\n(defn- report-spec-check [{:keys [::spec-checks ::fn-name]}]\n  (doseq [check spec-checks\n          :let [test-ret (get check #?(:clj  :clojure.spec.test.check/ret\n                                       :cljs :clojure.test.check/ret))]\n          :when (not (:pass? test-ret))\n          :let [spec-error (:result test-ret)\n                data       (.-data spec-error)\n                msg        (try (.-message spec-error)\n                                (catch #?(:cljs js/Object :clj Exception) _ nil))]]\n    (if-not data\n      (log-bold msg)\n      (do\n        (when-let [args (::st/args data)]\n          (log \"\\nCall:\")\n          (log (cons (with-meta fn-name nil) args)))\n        (log)\n        (when (= (::s/failure data) :instrument)\n          (log (-> msg string/split-lines first (str \"\\n\"))))\n        (-> (with-out-str ((expound/custom-printer nil) data))\n            (str \"\\n\")\n            log)\n        ;; REVIEW: Too noisy in the REPL, but\n        ;; maybe add an option to enable it later\n        (when (= l/*report-output* :js-console)\n          (group-collapsed \"Raw error data:\" {::l/background (:base0 l/ghostwheel-colors)})\n          (log msg)\n          (log data)\n          (group-end))))))\n\n\n(defmethod report :fail [m]\n  (let [message     (:message m)\n        {:keys [::fn-name ::failure]} message\n        summary     (case failure\n                      ::unexpected-fx \"Possible side effects detected\"\n                      ::unexpected-safety \"Expected side effects not detected\"\n                      ::spec-failure \"Spec check\"\n                      nil)\n        start-group l/group]\n    (inc-report-counter! :fail)\n    (start-group (str \"FAILED: \" fn-name \" \u2013 \" summary)\n                 {::l/background (:red l/ghostwheel-colors)})\n    (case failure\n      ::unexpected-fx (report-unexpected-side-effects message)\n      ::unexpected-safety (report-unexpected-safety message)\n      ::spec-failure (report-spec-check message)\n      (do\n        (log-bold (str \"Undefined failure reason: \" failure))\n        (log message)))\n    (group-end)))\n\n\n;; REVIEW - test this and clean it up\n(defmethod report :error [m]\n  (DBG m)\n  #_(let [[fn-name spec-check] (:message m)]\n      (do\n        (inc-report-counter! :error)\n        (group (str \"ERROR when testing \" fn-name\n                    {::l/background (:red l/ghostwheel-colors)}))\n        (inc-report-counter! :error)\n        (println \"\\nERROR in\" (t/testing-vars-str m))\n        #?(:cljs (when (seq (:testing-contexts (t/get-current-env)))\n                   (println (t/testing-contexts-str))))\n        (when-let [message (:message m)] (println message))\n        #?(:cljs (t/print-comparison m))\n        (group-end))))\n\n\n(defmethod report :end-run-tests [m]\n  (swap! *all-tests-successful #(and %1 %2) (t/successful? m)))\n\n\n(defmethod report :default [_])\n\n"]}