{"version":3,"sources":["app/google_drive.cljs"],"mappings":"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","names":["app.google-drive/get-gapi","js/gapi","app.google-drive/found-files","reagent.core.atom","app.google-drive/get-biomarker-correlator-folder-request","app.google-drive/list-files-requests","cljs.core.async.chan","app.google-drive/listed-files","c__35952__auto__","cljs.core.async.impl.dispatch/run","f__35953__auto__","switch__35882__auto__","state_49182","state_val_49183","statearr-49184","cljs.core.async.impl.ioc-helpers/take!","inst_49180","cljs.core.async.impl.ioc-helpers/return-chan","inst_49155","inst_49157","statearr-49187","statearr-49188","statearr-49190","inst_49161","inst_49162","inst_49163","inst_49164","inst_49165","inst_49166","inst_49167","cljs.core/PersistentHashMap","inst_49168","inst_49169","inst_49170","inst_49172","inst_49173","statearr-49192","statearr-49195","inst_49177","statearr-49196","statearr-49197","statearr-49199","state-machine__35883__auto__","ret-value__35884__auto__","result__35885__auto__","cljs.core/keyword-identical?","ex__35886__auto__","e49204","statearr-49205","cljs.core/seq","statearr-49206","cljs.core/first","state__35954__auto__","statearr-49207","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","request","cljs.core/clj->js","cljs.core.merge","response","cljs.core.async.put_BANG_","cljs.core.js__GT_clj","app.google-drive/get-single-file-id","list-files-response","files","js/Error","cljs.core._EQ_","cljs.core/count","app.google-drive/get-file-ids","app.google-drive/file-datas","state_49244","state_val_49245","statearr-49251","inst_49242","inst_49221","inst_49222","statearr-49255","statearr-49257","statearr-49258","inst_49224","inst_49226","inst_49227","inst_49228","inst_49229","inst_49230","inst_49231","inst_49232","inst_49233","inst_49235","inst_49236","statearr-49261","statearr-49262","inst_49239","statearr-49265","statearr-49266","statearr-49269","e49271","statearr-49272","statearr-49274","statearr-49280","file-id","app.google-drive/get-file-data","data-key","cljs.core.async.take_BANG_","cljs.core.swap_BANG_","app.csv/csv-data","cljs.core/assoc","app.csv/my-parse-csv","app.google-drive/get-data-key","file-name","clojure.string/ends-with?","clojure.string/includes?","app.google-drive/get-folder-file-data","folder-id","seq__49286","chunk__49287","count__49288","i__49289","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","file","cljs.core/conj","app.google-drive/populate-data!","p1__49290#"],"sourcesContent":["; Depends on code in public/js/gdrive.js to setup the js/gapi.\n(ns app.google-drive\n  (:require\n    [app.csv :as csv]\n    [reagent.core :as r]\n    [cljs.core.async :refer [chan put! take! >! <! buffer dropping-buffer sliding-buffer timeout close! alts!]]\n    [cljs.core.async :refer-macros [go go-loop alt!]]\n    [clojure.string :as st]))\n\n(defn ^js/gapi get-gapi\n  \"Returns nil if getting the gapi failed for some reason and js/gapi is\n  undefined as a result.\"\n  []\n  (if (nil? (.. js/gapi -client))\n    nil\n    js/gapi))\n\n(def found-files\n  (r/atom []))\n\n(def get-biomarker-correlator-folder-request\n  {:pageSize 100\n   :q \"mimeType='application/vnd.google-apps.folder'\n       and name='biomarker-correlator'\"\n   :fields \"nextPageToken, files(id, name)\"})\n\n; Check out\n; https://www.learn-clojurescript.com/section-4/lesson-25-intro-to-core-async/\n; for a good explanation of how these channels work.\n(def list-files-requests (chan))\n(def listed-files (chan))\n\n; Calls the files.list Google Drive API and puts the results into listed-files.\n(go-loop []\n  ; https://lwhorton.github.io/2018/10/20/clojurescript-interop-with-javascript.html\n  ; Explains this syntax.\n  ; This let parks the process before it can enter an infinite loop if\n  ; (get-gapi) returns nil.\n  (let [request (<! list-files-requests)]\n    (if (get-gapi)\n      (. (.. (get-gapi) -client -drive -files\n           (list\n             ; Update request with default parameters if they are not provided.\n             (clj->js (merge {:pageSize 100\n                              :fields \"nextPageToken, files(id, name)\"}\n                             request))))\n         (then (fn [response]\n                 (put! listed-files (js->clj response :keywordize-keys true)))))\n      nil))\n  (recur))\n\n(defn get-single-file-id\n  \"Gets the single file id in a list-files response.\"\n  [list-files-response]\n  (let [files (:files (:result list-files-response))]\n    (assert (= 1 (count files)))\n    (:id (first files))))\n\n(def get-file-ids (chan))\n(def file-datas (chan))\n\n; Calls the files.get Google Drive API and puts the results into file-datas.\n(go-loop []\n  ; This let parks the process before it can enter an infinite loop if\n  ; (get-gapi) returns nil.\n  (let [file-id (<! get-file-ids)]\n    (if (get-gapi)\n      (. (.. (get-gapi) -client -drive -files\n           (get (clj->js {:fileId file-id\n                          :alt \"media\"})))\n         (then (fn [response]\n                 (put! file-datas (js->clj response :keywordize-keys true)))))\n      nil))\n  (recur))\n\n(defn get-file-data\n  [file-id data-key]\n  (put! get-file-ids file-id)\n  (take! file-datas\n         (fn [response]\n           (swap! csv/csv-data assoc\n                  data-key (csv/my-parse-csv (:body response))))))\n\n(defn get-data-key\n  \"Returns the key under which to add the data to the csv-data atom. Returns\n  nil if the file in question should not be parsed (it is not a csv file, or\n  otherwise isn't parsable)\"\n  [file-name]\n  (cond\n    (not (st/ends-with? file-name \".csv\")) nil\n    (st/includes? file-name \"biomarker\") :biomarker-data\n    (st/includes? file-name \"input\") :input-data\n    :else nil))\n\n(defn get-folder-file-data\n  \"Gets data for all files in the folder with the given id.\"\n  [folder-id]\n  (put! list-files-requests {:q (str \"'\" folder-id \"' in parents\")})\n  (take! listed-files\n         (fn [response] \n           (let [files (:files (:result response))]\n             ; doseq is the right choice here, but i have absolutely no idea why\n             ; `map` and `for` don't seem to work.\n             (doseq [file files]\n               (let [data-key (get-data-key (:name file))]\n                 (if data-key\n                   (do\n                     (get-file-data (:id file) data-key)\n                     (swap! found-files conj (:name file)))\n                   ())))))))\n\n(defn populate-data!\n  \"Populates the data atom with a map from filenames to csv data for all\n   datafiles in the 'biomarker-correlator' Google Drive folder.\"\n  []\n  (put! list-files-requests {:q \"mimeType='application/vnd.google-apps.folder'\n                               and name='biomarker-correlator'\"})\n  (take! listed-files #(get-folder-file-data (get-single-file-id %))))\n"]}