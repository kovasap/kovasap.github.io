shadow$provide.module$node_modules$d3_geo$src$bounds=function(global,require,module,exports){function boundsPoint(lambda,phi){ranges.push(range$jscomp$0=[lambda0$jscomp$0=lambda,lambda1=lambda]);phi<phi0&&(phi0=phi);phi>phi1&&(phi1=phi)}function linePoint(lambda,phi){var p=(0,_cartesian.cartesian)([lambda*_math.radians,phi*_math.radians]);if(p0){var normal=(0,_cartesian.cartesianCross)(p0,p),equatorial=[normal[1],-normal[0],0];normal=(0,_cartesian.cartesianCross)(equatorial,normal);(0,_cartesian.cartesianNormalizeInPlace)(normal);
normal=(0,_cartesian.spherical)(normal);var delta=lambda-lambda2;equatorial=0<delta?1:-1;var lambdai=normal[0]*_math.degrees*equatorial;delta=180<(0,_math.abs)(delta);delta^(equatorial*lambda2<lambdai&&lambdai<equatorial*lambda)?(normal=normal[1]*_math.degrees,normal>phi1&&(phi1=normal)):(lambdai=(lambdai+360)%360-180,delta^(equatorial*lambda2<lambdai&&lambdai<equatorial*lambda))?(normal=-normal[1]*_math.degrees,normal<phi0&&(phi0=normal)):(phi<phi0&&(phi0=phi),phi>phi1&&(phi1=phi));delta?lambda<
lambda2?angle(lambda0$jscomp$0,lambda)>angle(lambda0$jscomp$0,lambda1)&&(lambda1=lambda):angle(lambda,lambda1)>angle(lambda0$jscomp$0,lambda1)&&(lambda0$jscomp$0=lambda):lambda1>=lambda0$jscomp$0?(lambda<lambda0$jscomp$0&&(lambda0$jscomp$0=lambda),lambda>lambda1&&(lambda1=lambda)):lambda>lambda2?angle(lambda0$jscomp$0,lambda)>angle(lambda0$jscomp$0,lambda1)&&(lambda1=lambda):angle(lambda,lambda1)>angle(lambda0$jscomp$0,lambda1)&&(lambda0$jscomp$0=lambda)}else ranges.push(range$jscomp$0=[lambda0$jscomp$0=
lambda,lambda1=lambda]);phi<phi0&&(phi0=phi);phi>phi1&&(phi1=phi);p0=p;lambda2=lambda}function boundsLineStart(){boundsStream.point=linePoint}function boundsLineEnd(){range$jscomp$0[0]=lambda0$jscomp$0;range$jscomp$0[1]=lambda1;boundsStream.point=boundsPoint;p0=null}function boundsRingPoint(lambda,phi){if(p0){var delta=lambda-lambda2;deltaSum.add(180<(0,_math.abs)(delta)?delta+(0<delta?360:-360):delta)}else lambda00=lambda,phi00=phi;_area.areaStream.point(lambda,phi);linePoint(lambda,phi)}function boundsRingStart(){_area.areaStream.lineStart()}
function boundsRingEnd(){boundsRingPoint(lambda00,phi00);_area.areaStream.lineEnd();(0,_math.abs)(deltaSum)>_math.epsilon&&(lambda0$jscomp$0=-(lambda1=180));range$jscomp$0[0]=lambda0$jscomp$0;range$jscomp$0[1]=lambda1;p0=null}function angle(lambda0,lambda1){return 0>(lambda1-=lambda0)?lambda1+360:lambda1}function rangeCompare(a,b){return a[0]-b[0]}function rangeContains(range,x){return range[0]<=range[1]?range[0]<=x&&x<=range[1]:x<range[0]||range[1]<x}Object.defineProperty(exports,"__esModule",{value:!0});
exports.default=function(feature){var n,merged,delta;phi1=lambda1=-(lambda0$jscomp$0=phi0=Infinity);ranges=[];(0,_stream.default)(feature,boundsStream);if(n=ranges.length){ranges.sort(rangeCompare);feature=1;var a=ranges[0];for(merged=[a];feature<n;++feature){var b=ranges[feature];rangeContains(a,b[0])||rangeContains(a,b[1])?(angle(a[0],b[1])>angle(a[0],a[1])&&(a[1]=b[1]),angle(b[0],a[1])>angle(a[0],a[1])&&(a[0]=b[0])):merged.push(a=b)}var deltaMax=-Infinity;n=merged.length-1;feature=0;for(a=merged[n];feature<=
n;a=b,++feature)b=merged[feature],(delta=angle(a[1],b[0]))>deltaMax&&(deltaMax=delta,lambda0$jscomp$0=b[0],lambda1=a[1])}ranges=range$jscomp$0=null;return Infinity===lambda0$jscomp$0||Infinity===phi0?[[NaN,NaN],[NaN,NaN]]:[[lambda0$jscomp$0,phi0],[lambda1,phi1]]};var _d3Array=require("module$node_modules$d3_array$src$index"),_area=require("module$node_modules$d3_geo$src$area"),_cartesian=require("module$node_modules$d3_geo$src$cartesian"),_math=require("module$node_modules$d3_geo$src$math"),_stream=
function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$d3_geo$src$stream")),lambda0$jscomp$0,phi0,lambda1,phi1,lambda2,lambda00,phi00,p0,deltaSum,ranges,range$jscomp$0,boundsStream={point:boundsPoint,lineStart:boundsLineStart,lineEnd:boundsLineEnd,polygonStart:function(){boundsStream.point=boundsRingPoint;boundsStream.lineStart=boundsRingStart;boundsStream.lineEnd=boundsRingEnd;deltaSum=new _d3Array.Adder;_area.areaStream.polygonStart()},polygonEnd:function(){_area.areaStream.polygonEnd();
boundsStream.point=boundsPoint;boundsStream.lineStart=boundsLineStart;boundsStream.lineEnd=boundsLineEnd;0>_area.areaRingSum?(lambda0$jscomp$0=-(lambda1=180),phi0=-(phi1=90)):deltaSum>_math.epsilon?phi1=90:deltaSum<-_math.epsilon&&(phi0=-90);range$jscomp$0[0]=lambda0$jscomp$0;range$jscomp$0[1]=lambda1},sphere:function(){lambda0$jscomp$0=-(lambda1=180);phi0=-(phi1=90)}}}
//# sourceMappingURL=module$node_modules$d3_geo$src$bounds.js.map
