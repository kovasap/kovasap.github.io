{
"version":3,
"file":"module$node_modules$d3_chord$src$chord.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/d3-chord/src/chord.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_chord$src$chord\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.chordTranspose = chordTranspose;\nexports.chordDirected = chordDirected;\n\nvar _math = require(\"./math.js\");\n\nfunction range(i, j) {\n  return Array.from({\n    length: j - i\n  }, (_, k) => i + k);\n}\n\nfunction compareValue(compare) {\n  return function (a, b) {\n    return compare(a.source.value + a.target.value, b.source.value + b.target.value);\n  };\n}\n\nfunction _default() {\n  return chord(false, false);\n}\n\nfunction chordTranspose() {\n  return chord(false, true);\n}\n\nfunction chordDirected() {\n  return chord(true, false);\n}\n\nfunction chord(directed, transpose) {\n  var padAngle = 0,\n      sortGroups = null,\n      sortSubgroups = null,\n      sortChords = null;\n\n  function chord(matrix) {\n    var n = matrix.length,\n        groupSums = new Array(n),\n        groupIndex = range(0, n),\n        chords = new Array(n * n),\n        groups = new Array(n),\n        k = 0,\n        dx;\n    matrix = Float64Array.from({\n      length: n * n\n    }, transpose ? (_, i) => matrix[i % n][i / n | 0] : (_, i) => matrix[i / n | 0][i % n]); // Compute the scaling factor from value to angle in [0, 2pi].\n\n    for (let i = 0; i < n; ++i) {\n      let x = 0;\n\n      for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i];\n\n      k += groupSums[i] = x;\n    }\n\n    k = (0, _math.max)(0, _math.tau - padAngle * n) / k;\n    dx = k ? padAngle : _math.tau / n; // Compute the angles for each group and constituent chord.\n\n    {\n      let x = 0;\n      if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]));\n\n      for (const i of groupIndex) {\n        const x0 = x;\n\n        if (directed) {\n          const subgroupIndex = range(~n + 1, n).filter(j => j < 0 ? matrix[~j * n + i] : matrix[i * n + j]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(a < 0 ? -matrix[~a * n + i] : matrix[i * n + a], b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]));\n\n          for (const j of subgroupIndex) {\n            if (j < 0) {\n              const chord = chords[~j * n + i] || (chords[~j * n + i] = {\n                source: null,\n                target: null\n              });\n              chord.target = {\n                index: i,\n                startAngle: x,\n                endAngle: x += matrix[~j * n + i] * k,\n                value: matrix[~j * n + i]\n              };\n            } else {\n              const chord = chords[i * n + j] || (chords[i * n + j] = {\n                source: null,\n                target: null\n              });\n              chord.source = {\n                index: i,\n                startAngle: x,\n                endAngle: x += matrix[i * n + j] * k,\n                value: matrix[i * n + j]\n              };\n            }\n          }\n\n          groups[i] = {\n            index: i,\n            startAngle: x0,\n            endAngle: x,\n            value: groupSums[i]\n          };\n        } else {\n          const subgroupIndex = range(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i]);\n          if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]));\n\n          for (const j of subgroupIndex) {\n            let chord;\n\n            if (i < j) {\n              chord = chords[i * n + j] || (chords[i * n + j] = {\n                source: null,\n                target: null\n              });\n              chord.source = {\n                index: i,\n                startAngle: x,\n                endAngle: x += matrix[i * n + j] * k,\n                value: matrix[i * n + j]\n              };\n            } else {\n              chord = chords[j * n + i] || (chords[j * n + i] = {\n                source: null,\n                target: null\n              });\n              chord.target = {\n                index: i,\n                startAngle: x,\n                endAngle: x += matrix[i * n + j] * k,\n                value: matrix[i * n + j]\n              };\n              if (i === j) chord.source = chord.target;\n            }\n\n            if (chord.source && chord.target && chord.source.value < chord.target.value) {\n              const source = chord.source;\n              chord.source = chord.target;\n              chord.target = source;\n            }\n          }\n\n          groups[i] = {\n            index: i,\n            startAngle: x0,\n            endAngle: x,\n            value: groupSums[i]\n          };\n        }\n\n        x += dx;\n      }\n    } // Remove empty chords.\n\n    chords = Object.values(chords);\n    chords.groups = groups;\n    return sortChords ? chords.sort(sortChords) : chords;\n  }\n\n  chord.padAngle = function (_) {\n    return arguments.length ? (padAngle = (0, _math.max)(0, _), chord) : padAngle;\n  };\n\n  chord.sortGroups = function (_) {\n    return arguments.length ? (sortGroups = _, chord) : sortGroups;\n  };\n\n  chord.sortSubgroups = function (_) {\n    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;\n  };\n\n  chord.sortChords = function (_) {\n    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;\n  };\n\n  return chord;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","range","i","j","Array","from","length","_","k","compareValue","compare","a","b","source","value","target","chord","directed","transpose","matrix","n","groupSums","groupIndex","chords","groups","dx","Float64Array","x","_math","max","tau","padAngle","sortGroups","sort","x0","subgroupIndex","filter","sortSubgroups","index","startAngle","endAngle","Object","values","sortChords","chord.padAngle","arguments","chord.sortGroups","chord.sortSubgroups","chord.sortChords","defineProperty","default","_default","chordTranspose","chordDirected"]
}
