{
"version":3,
"file":"module$node_modules$d3_transition$src$transition$merge.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAIAC,QAAiB,CAACC,UAAD,CAAa,CAC5B,GAAIA,UAAWC,CAAAA,GAAf,GAAuB,IAAKA,CAAAA,GAA5B,CAAiC,KAAUC,MAAJ,EAAN,CADL,IAGnBC,QAAU,IAAKC,CAAAA,OAASC,WAAAA,CAAUL,UAAWI,CAAAA,OAAtD,KAH4B,IAGmCE,GAAKH,OAAQI,CAAAA,MAHhD,CAG6EC,EAAIC,IAAKC,CAAAA,GAAL,CAASJ,EAAT,CAApBD,UAAQE,CAAAA,MAAY,CAHjF,CAGmGI,OAAaC,KAAJ,CAAUN,EAAV,CAH5G,CAG2HO,EAAI,CAA3J,CAA8JA,CAA9J,CAAkKL,CAAlK,CAAqK,EAAEK,CAAvK,CACE,IADwK,IAC/JC,OAASX,OAAA,CAAQU,CAAR,CADsJ,CAC1IE,OAASV,UAAA,CAAQQ,CAAR,CADiI,CACrHG,EAAIF,MAAOP,CAAAA,MAD0G,CAClGU,MAAQN,MAAA,CAAOE,CAAP,CAARI,CAAwBL,KAAJ,CAAUI,CAAV,CAD8E,CAChEE,IADgE,CAC1DC,EAAI,CAAlH,CAAqHA,CAArH,CAAyHH,CAAzH,CAA4H,EAAEG,CAA9H,CACE,GAAID,IAAJ;AAAWJ,MAAA,CAAOK,CAAP,CAAX,EAAwBJ,MAAA,CAAOI,CAAP,CAAxB,CACEF,KAAA,CAAME,CAAN,CAAA,CAAWD,IAKjB,KAAA,CAAOL,CAAP,CAAWP,EAAX,CAAe,EAAEO,CAAjB,CACEF,MAAA,CAAOE,CAAP,CAAA,CAAYV,OAAA,CAAQU,CAAR,CAGd,OAAO,KAAIO,MAAOC,CAAAA,UAAX,CAAsBV,MAAtB,CAA8B,IAAKW,CAAAA,QAAnC,CAA6C,IAAKC,CAAAA,KAAlD,CAAyD,IAAKtB,CAAAA,GAA9D,CAfqB,CAF9B,KAAImB,OAAS5B,OAAA,CAAQ,wDAAR,CARsG;",
"sources":["node_modules/d3-transition/src/transition/merge.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_transition$src$transition$merge\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _index = require(\"./index.js\");\n\nfunction _default(transition) {\n  if (transition._id !== this._id) throw new Error();\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new _index.Transition(merges, this._parents, this._name, this._id);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_default","transition","_id","Error","groups0","_groups","groups1","m0","length","m","Math","min","merges","Array","j","group0","group1","n","merge","node","i","_index","Transition","_parents","_name"]
}
