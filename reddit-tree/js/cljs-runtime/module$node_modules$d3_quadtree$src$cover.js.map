{
"version":3,
"file":"module$node_modules$d3_quadtree$src$cover.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAEAC,QAAiB,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACtB,GAAIC,KAAA,CAAMF,CAAN,CAAU,CAACA,CAAX,CAAJ,EAAqBE,KAAA,CAAMD,CAAN,CAAU,CAACA,CAAX,CAArB,CAAoC,MAAO,KADrB,KAGlBE,GAAK,IAAKC,CAAAA,GAHQ,CAIlBC,GAAK,IAAKC,CAAAA,GAJQ,CAKlBC,GAAK,IAAKC,CAAAA,GALQ,CAMlBC,GAAK,IAAKC,CAAAA,GAId,IAAIR,KAAA,CAAMC,EAAN,CAAJ,CACEI,EACA,EADMJ,EACN,CADWQ,IAAKC,CAAAA,KAAL,CAAWZ,CAAX,CACX,EAD4B,CAC5B,CAAAS,EAAA,EAAMJ,EAAN,CAAWM,IAAKC,CAAAA,KAAL,CAAWX,CAAX,CAAX,EAA4B,CAF9B,KAIK,CAMH,IANG,IACCY,EAAIN,EAAJM,CAASV,EAATU,EAAe,CADhB,CAECC,KAAO,IAAKC,CAAAA,KAFb,CAGCC,MAHD,CAICC,CAEJ,CAAOd,EAAP,CAAYH,CAAZ,EAAiBA,CAAjB,EAAsBO,EAAtB,EAA4BF,EAA5B,CAAiCJ,CAAjC,EAAsCA,CAAtC,EAA2CQ,EAA3C,CAAA,CAIE,OAHAQ,CAGQA,EAHHhB,CAGGgB,CAHCZ,EAGDY,GAHQ,CAGRA,CAHYjB,CAGZiB,CAHgBd,EAGhBc,CAFRD,MAEQC,CAFKC,KAAJ,CAAU,CAAV,CAEDD,CAFeD,MAAA,CAAOC,CAAP,CAEfA,CAF2BH,IAE3BG,CAFiCH,IAEjCG,CAFwCD,MAExCC,CAFgDJ,CAEhDI,EAFqD,CAErDA,CAAAA,CAAR,EACE,KAAK,CAAL,CACEV,EAAA,CAAKJ,EAAL,CAAUU,CAAGJ,GAAb;AAAkBJ,EAAlB,CAAuBQ,CACvB,MAEF,MAAK,CAAL,CACEV,EAAA,CAAKI,EAAL,CAAUM,CAAGJ,GAAb,CAAkBJ,EAAlB,CAAuBQ,CACvB,MAEF,MAAK,CAAL,CACEN,EAAA,CAAKJ,EAAL,CAAUU,CAAGR,GAAb,CAAkBI,EAAlB,CAAuBI,CACvB,MAEF,MAAK,CAAL,CACEV,EAAa,CAARI,EAAQ,CAAHM,CAAG,CAAAR,EAAA,CAAKI,EAAL,CAAUI,CAd3B,CAmBE,IAAKE,CAAAA,KAAT,EAAkB,IAAKA,CAAAA,KAAMI,CAAAA,MAA7B,GAAqC,IAAKJ,CAAAA,KAA1C,CAAkDD,IAAlD,CA7BG,CAgCL,IAAKV,CAAAA,GAAL,CAAWD,EACX,KAAKG,CAAAA,GAAL,CAAWD,EACX,KAAKG,CAAAA,GAAL,CAAWD,EACX,KAAKG,CAAAA,GAAL,CAAWD,EACX,OAAO,KAlDe,CAR8E;",
"sources":["node_modules/d3-quadtree/src/cover.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_quadtree$src$cover\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction _default(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1; // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don\u2019t change due to floating point error!\n\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  } // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | x < x0;\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n\n      switch (i) {\n        case 0:\n          x1 = x0 + z, y1 = y0 + z;\n          break;\n\n        case 1:\n          x0 = x1 - z, y1 = y0 + z;\n          break;\n\n        case 2:\n          x1 = x0 + z, y0 = y1 - z;\n          break;\n\n        case 3:\n          x0 = x1 - z, y0 = y1 - z;\n          break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","_default","x","y","isNaN","x0","_x0","y0","_y0","x1","_x1","y1","_y1","Math","floor","z","node","_root","parent","i","Array","length"]
}
