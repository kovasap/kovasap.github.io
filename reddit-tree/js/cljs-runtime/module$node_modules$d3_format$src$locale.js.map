{
"version":3,
"file":"module$node_modules$d3_format$src$locale.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/d3-format/src/locale.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_format$src$locale\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _exponent = _interopRequireDefault(require(\"./exponent.js\"));\n\nvar _formatGroup = _interopRequireDefault(require(\"./formatGroup.js\"));\n\nvar _formatNumerals = _interopRequireDefault(require(\"./formatNumerals.js\"));\n\nvar _formatSpecifier = _interopRequireDefault(require(\"./formatSpecifier.js\"));\n\nvar _formatTrim = _interopRequireDefault(require(\"./formatTrim.js\"));\n\nvar _formatTypes = _interopRequireDefault(require(\"./formatTypes.js\"));\n\nvar _formatPrefixAuto = require(\"./formatPrefixAuto.js\");\n\nvar _identity = _interopRequireDefault(require(\"./identity.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"\u00b5\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\n\nfunction _default(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"\u2212\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = (0, _formatSpecifier.default)(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type; // The \"n\" type is an alias for \",g\".\n\n    if (type === \"n\") comma = true, type = \"g\"; // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = \"g\"; // If zero fill is specified, padding goes after sign and before digits.\n\n    if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\"; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = _formatTypes.default[type],\n        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.\n\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.\n\n        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : minus : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer \u201cvalue\u201d part that can be\n        // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_default","locale","newFormat","specifier","format","valuePrefix","prefix","valueSuffix","suffix","n","c","type","formatType","valueNegative","isNaN","nan","Math","abs","precision","trim","_formatTrim","sign","minus","prefixes","_formatPrefixAuto","prefixExponent","maybeSuffix","i","length","charCodeAt","decimal","slice","comma","zero","group","Infinity","padding","width","Array","join","fill","align","numerals","_formatSpecifier","symbol","_formatTypes","undefined","currencyPrefix","test","toLowerCase","currencySuffix","percent","max","min","toString","format.toString","grouping","thousands","_identity","_formatGroup","map","call","Number","currency","_formatNumerals","String","formatPrefix","f","e","floor","_exponent","k","pow","prototype"]
}
