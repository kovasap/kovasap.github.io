shadow$provide.module$node_modules$d3_geo$src$clip$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function validSegment(segment){return 1<segment.length}function compareIntersection(a,b){return(0>(a=a.x)[0]?a[1]-_math.halfPi-_math.epsilon:_math.halfPi-a[1])-(0>(b=b.x)[0]?b[1]-_math.halfPi-_math.epsilon:_math.halfPi-b[1])}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(pointVisible,clipLine,
interpolate,start){return function(sink){function point$jscomp$0(lambda,phi){pointVisible(lambda,phi)&&sink.point(lambda,phi)}function pointLine(lambda,phi){line.point(lambda,phi)}function lineStart(){clip.point=pointLine;line.lineStart()}function lineEnd(){clip.point=point$jscomp$0;line.lineEnd()}function pointRing(lambda,phi){ring.push([lambda,phi]);ringSink.point(lambda,phi)}function ringStart(){ringSink.lineStart();ring=[]}function ringEnd(){pointRing(ring[0][0],ring[0][1]);ringSink.lineEnd();
var clean=ringSink.clean(),ringSegments=ringBuffer.result(),n=ringSegments.length,point;ring.pop();polygon.push(ring);ring=null;if(n)if(clean&1){if(n=ringSegments[0],0<(ringSegments=n.length-1)){polygonStarted||(sink.polygonStart(),polygonStarted=!0);sink.lineStart();for(clean=0;clean<ringSegments;++clean)sink.point((point=n[clean])[0],point[1]);sink.lineEnd()}}else 1<n&&clean&2&&ringSegments.push(ringSegments.pop().concat(ringSegments.shift())),segments.push(ringSegments.filter(validSegment))}var line=
clipLine(sink),ringBuffer=(0,_buffer.default)(),ringSink=clipLine(ringBuffer),polygonStarted=!1,polygon,segments,ring,clip={point:point$jscomp$0,lineStart,lineEnd,polygonStart:function(){clip.point=pointRing;clip.lineStart=ringStart;clip.lineEnd=ringEnd;segments=[];polygon=[]},polygonEnd:function(){clip.point=point$jscomp$0;clip.lineStart=lineStart;clip.lineEnd=lineEnd;segments=(0,_d3Array.merge)(segments);var startInside=(0,_polygonContains.default)(polygon,start);segments.length?(polygonStarted||
(sink.polygonStart(),polygonStarted=!0),(0,_rejoin.default)(segments,compareIntersection,startInside,interpolate,sink)):startInside&&(polygonStarted||(sink.polygonStart(),polygonStarted=!0),sink.lineStart(),interpolate(null,null,1,sink),sink.lineEnd());polygonStarted&&(sink.polygonEnd(),polygonStarted=!1);segments=polygon=null},sphere:function(){sink.polygonStart();sink.lineStart();interpolate(null,null,1,sink);sink.lineEnd();sink.polygonEnd()}};return clip}};var _buffer=_interopRequireDefault(require("module$node_modules$d3_geo$src$clip$buffer")),
_rejoin=_interopRequireDefault(require("module$node_modules$d3_geo$src$clip$rejoin")),_math=require("module$node_modules$d3_geo$src$math"),_polygonContains=_interopRequireDefault(require("module$node_modules$d3_geo$src$polygonContains")),_d3Array=require("module$node_modules$d3_array$src$index")}
//# sourceMappingURL=module$node_modules$d3_geo$src$clip$index.js.map
