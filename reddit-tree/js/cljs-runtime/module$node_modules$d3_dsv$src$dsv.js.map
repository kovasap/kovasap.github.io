{
"version":3,
"file":"module$node_modules$d3_dsv$src$dsv.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/d3-dsv/src/dsv.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_dsv$src$dsv\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function (name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function (row, i) {\n    return f(object(row), i, columns);\n  };\n} // Compute unique columns in order of discovery.\n\n\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n  rows.forEach(function (row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\",\n      length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6) : year > 9999 ? \"+\" + pad(year, 6) : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\" : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2) + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\" : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\" : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\" : \"\");\n}\n\nfunction _default(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert,\n        columns,\n        rows = parseRows(text, function (row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [],\n        // output rows\n    N = text.length,\n        I = 0,\n        // current character index\n    n = 0,\n        // current line number\n    t,\n        // current token\n    eof = N <= 0,\n        // current token followed by EOF?\n    eol = false; // current token followed by EOL?\n    // Strip the trailing newline.\n\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL; // Unescape quotes.\n\n      var i,\n          j = I,\n          c;\n\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n\n        if ((i = I) >= N) eof = true;else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      } // Find next delimiter or newline.\n\n\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;else if (c === RETURN) {\n          eol = true;\n          if (text.charCodeAt(I) === NEWLINE) ++I;\n        } else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      } // Return last token before EOF.\n\n\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function (row) {\n      return columns.map(function (column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\" : value instanceof Date ? formatDate(value) : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\" : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","objectConverter","columns","Function","map","name","i","JSON","stringify","join","customConverter","f","object","row","inferColumns","rows","columnSet","Object","create","forEach","column","push","pad","value","width","s","length","Array","defineProperty","default","_default","delimiter","parseRows","text","token","eof","EOF","eol","EOL","j","I","c","charCodeAt","QUOTE","N","NEWLINE","RETURN","slice","replace","DELIMITER","n","t","preformatBody","formatValue","formatRow","hours","date","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","year","reFormat","RegExp","parse","convert","format","concat","formatBody","formatRows"]
}
