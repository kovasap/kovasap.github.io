{
"version":3,
"file":"module$node_modules$d3_quadtree$src$add.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/d3-quadtree/src/add.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_quadtree$src$add\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nexports.addAll = addAll;\n\nfunction _default(d) {\n  const x = +this._x.call(null, d),\n        y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {\n    data: d\n  },\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j; // If the tree is empty, initialize the root as a leaf.\n\n  if (!node) return tree._root = leaf, tree; // Find the existing leaf for the new point, or add it.\n\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  } // Is the new point is exactly coincident with the existing point?\n\n\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree; // Otherwise, split the leaf node until the old and new point are separated.\n\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm;else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym;else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | xp >= xm));\n\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nfunction addAll(data) {\n  var d,\n      i,\n      n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity; // Compute the points and their extent.\n\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  } // If there were no (valid) points, abort.\n\n\n  if (x0 > x1 || y0 > y1) return this; // Expand the tree to cover the new points.\n\n  this.cover(x0, y0).cover(x1, y1); // Add the new points.\n\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","add","tree","x","y","d","isNaN","parent","node","_root","leaf","data","x0","_x0","y0","_y0","x1","_x1","y1","_y1","xm","ym","right","bottom","length","i","xp","_x","call","yp","_y","next","Array","j","Object","defineProperty","value","default","_default","cover","addAll","n","xz","yz","Infinity"]
}
