{"version":3,"sources":["cljs_http/core.cljs"],"mappings":"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","names":["cljs-http.core/pending-requests","cljs.core.atom","cljs-http.core/abort!","channel","temp__5753__auto__","req","fexpr__41246","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/dissoc","cljs.core.async/close!","cljs-http.core/aborted?","xhr","cljs.core._EQ_","js/goog.net.ErrorCode.ABORT","cljs-http.core/apply-default-headers!","headers","formatted-h","cljs.core/zipmap","cljs.core.map","cljs-http.util/camelize","cljs.core/keys","cljs.core/vals","cljs.core.dorun","p__41253","vec__41255","cljs.core.nth","k","v","cljs-http.core/apply-response-type!","response-type","G__41259","js/Error","goog.net.XhrIo/ResponseType","p__41266","map__41267","cljs.core/--destructure-map","cljs.core.get","cljs-http.core/build-xhr","with-credentials?","default-headers","request","timeout","or__4212__auto__","send-credentials","G__41268","js/goog.net.XhrIo","cljs-http.core/error-kw","p__41269","map__41271","cljs-http.core/xhr","request-method","body","cancel","progress","cljs.core.async.chan","request-url","cljs-http.util/build-url","method","cljs.core/name","cljs-http.util/build-headers","cljs.core/assoc","goog.net.EventType/COMPLETE","evt","target","response","cljs-http.util/parse-headers","G__41277","cljs.core.async.put_BANG_","listener","direction","cljs.core.merge","G__41284","goog.net.EventType/UPLOAD_PROGRESS","cljs.core.partial","goog.net.EventType/DOWNLOAD_PROGRESS","c__32333__auto__","cljs.core.async.impl.dispatch/run","f__32334__auto__","switch__32148__auto__","state_41297","state_val_41298","cljs.core.async.impl.ioc-helpers/take!","inst_41288","inst_41289","inst_41290","statearr-41303","statearr-41304","statearr-41305","inst_41292","statearr-41307","statearr-41309","inst_41295","cljs.core.async.impl.ioc-helpers/return-chan","statearr-41310","state-machine__32149__auto__","ret-value__32150__auto__","result__32151__auto__","cljs.core/keyword-identical?","ex__32152__auto__","e41311","statearr-41312","cljs.core/seq","statearr-41314","cljs.core/first","state__32335__auto__","statearr-41315","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core/not","p__41317","map__41318","cljs-http.core/jsonp","callback-name","keywordize-keys?","jsonp","js/goog.net.Jsonp","data","cljs.core.js__GT_clj","state_41329","state_val_41330","inst_41326","inst_41327","statearr-41334","statearr-41336","e41338","statearr-41340","statearr-41341","statearr-41343","p__41346","map__41347","cljs-http.core/request"],"sourcesContent":["(ns cljs-http.core\n  (:import [goog.net EventType ErrorCode XhrIo]\n           [goog.net Jsonp])\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.util :as util]\n            [cljs.core.async :as async]\n            [clojure.string :as s]))\n\n(def pending-requests (atom {}))\n\n(defn abort!\n  \"Attempt to close the given channel and abort the pending HTTP request\n  with which it is associated.\"\n  [channel]\n  (when-let [req (@pending-requests channel)]\n    (swap! pending-requests dissoc channel)\n    (async/close! channel)\n    (if (.hasOwnProperty req \"abort\")\n      (.abort req)\n      (.cancel (:jsonp req) (:request req)))))\n\n(defn- aborted? [xhr]\n  (= (.getLastErrorCode xhr) goog.net.ErrorCode.ABORT))\n\n(defn apply-default-headers!\n  \"Takes an XhrIo object and applies the default-headers to it.\"\n  [xhr headers]\n  (let [formatted-h (zipmap (map util/camelize (keys headers)) (vals headers))]\n    (dorun\n      (map (fn [[k v]]\n             (.set (.-headers xhr) k v))\n           formatted-h))))\n\n(defn apply-response-type!\n  \"Takes an XhrIo object and sets response-type if not nil.\"\n  [xhr response-type]\n  (.setResponseType xhr\n   (case response-type\n     :array-buffer XhrIo.ResponseType.ARRAY_BUFFER\n     :blob XhrIo.ResponseType.BLOB\n     :document XhrIo.ResponseType.DOCUMENT\n     :text XhrIo.ResponseType.TEXT\n     :default XhrIo.ResponseType.DEFAULT\n     nil XhrIo.ResponseType.DEFAULT)))\n\n(defn build-xhr\n  \"Builds an XhrIo object from the request parameters.\"\n  [{:keys [with-credentials? default-headers response-type] :as request}]\n  (let [timeout (or (:timeout request) 0)\n        send-credentials (if (nil? with-credentials?)\n                           true\n                           with-credentials?)]\n    (doto (XhrIo.)\n          (apply-default-headers! default-headers)\n          (apply-response-type! response-type)\n          (.setTimeoutInterval timeout)\n          (.setWithCredentials send-credentials))))\n\n;; goog.net.ErrorCode constants to CLJS keywords\n(def error-kw\n  {0 :no-error\n   1 :access-denied\n   2 :file-not-found\n   3 :ff-silent-error\n   4 :custom-error\n   5 :exception\n   6 :http-error\n   7 :abort\n   8 :timeout\n   9 :offline})\n\n(defn xhr\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method headers body with-credentials? cancel progress] :as request}]\n  (let [channel (async/chan)\n        request-url (util/build-url request)\n        method (name (or request-method :get))\n        headers (util/build-headers headers)\n        xhr (build-xhr request)]\n    (swap! pending-requests assoc channel xhr)\n    (.listen xhr EventType.COMPLETE\n             (fn [evt]\n               (let [target (.-target evt)\n                     response {:status (.getStatus target)\n                               :success (.isSuccess target)\n                               :body (.getResponse target)\n                               :headers (util/parse-headers (.getAllResponseHeaders target))\n                               :trace-redirects [request-url (.getLastUri target)]\n                               :error-code (error-kw (.getLastErrorCode target))\n                               :error-text (.getLastError target)}]\n                 (if-not (aborted? xhr)\n                   (async/put! channel response))\n                 (swap! pending-requests dissoc channel)\n                 (if cancel (async/close! cancel))\n                 (async/close! channel))))\n\n    (when progress\n      (let [listener (fn [direction evt]\n                       (async/put! progress (merge {:direction direction :loaded (.-loaded evt)}\n                                                   (if (.-lengthComputable evt) {:total (.-total evt)}))))]\n        (doto xhr\n          (.setProgressEventsEnabled true)\n          (.listen EventType.UPLOAD_PROGRESS (partial listener :upload))\n          (.listen EventType.DOWNLOAD_PROGRESS (partial listener :download)))))\n\n    (.send xhr request-url method body headers)\n    (if cancel\n      (go\n        (let [v (async/<! cancel)]\n          (if (not (.isComplete xhr))\n            (.abort xhr)))))\n    channel))\n\n(defn jsonp\n  \"Execute the JSONP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [timeout callback-name cancel keywordize-keys?]\n    :or {keywordize-keys? true}\n    :as request}]\n  (let [channel (async/chan)\n        jsonp (Jsonp. (util/build-url request) callback-name)]\n    (.setRequestTimeout jsonp timeout)\n    (let [req (.send jsonp nil\n                     (fn success-callback [data]\n                       (let [response {:status 200\n                                       :success true\n                                       :body (js->clj data :keywordize-keys keywordize-keys?)}]\n                         (async/put! channel response)\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))\n                     (fn error-callback []\n                         (swap! pending-requests dissoc channel)\n                         (if cancel (async/close! cancel))\n                         (async/close! channel)))]\n      (swap! pending-requests assoc channel {:jsonp jsonp :request req})\n      (if cancel\n        (go\n          (let [v (async/<! cancel)]\n            (.cancel jsonp req)))))\n    channel))\n\n(defn request\n  \"Execute the HTTP request corresponding to the given Ring request\n  map and return a core.async channel.\"\n  [{:keys [request-method] :as request}]\n  (if (= request-method :jsonp)\n    (jsonp request)\n    (xhr request)))\n"]}