{"version":3,"sources":["reddit_tree/graph.cljs"],"mappings":"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","names":["reddit-tree.graph/html","hiccup","sablono.server/render-static","sablono.interpreter/interpret","reddit-tree.graph/create-sim","viz-state","map__40413","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","width","height","G__40414","js/d3.forceSimulation","js/d3.forceLink","p1__40406#","js/d3.forceManyBody","js/d3.forceCenter","temp__5753__auto__","s","rid3.attrs/attrs","p1__40407#","p1__40408#","p1__40409#","p1__40410#","p1__40411#","p1__40412#","reddit-tree.graph/create-drag","sim","js/d3.drag","event","d","_","reddit-tree.graph/merge-nodes","orig","new","id","orig-map","cljs.core.into","cljs.core.map_indexed","i","n","seq__40424","cljs.core/seq","chunk__40425","count__40426","i__40427","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","old","G__40449","G__40458","x","y","vx","vy","fx","fy","p__40476","map__40477","reddit-tree.graph/update-sim!","alpha-target","links","nodes","old-nodes","new-nodes","p1__40475#","G__40482","reddit-tree.graph/viz","ratom","cljs.core.atom","drag","color","js/d3.scaleOrdinal","js/d3","rid3.core/viz","svg","map__40494","sel","_ratom","cljs.core.swap_BANG_","cljs.core/assoc","p1__40483#","js/Math.sqrt","p1__40484#","G__40504","p1__40485#","p1__40486#","_event","node","js/d3.selectAll","goog.string/format","js/window.open","p1__40491#","p1__40492#","reddit-tree.graph/prechew","app-state","cljs.core.update","cljs.core/clj->js"],"sourcesContent":[";; Taken from https://gist.github.com/prook/9e5cc9144d34a991978a2fd31b4ee487\n;; and comment thread https://github.com/gadfly361/rid3/issues/10.\n\n(ns reddit-tree.graph\n  (:require\n   [sablono.core :as sab]\n   [sablono.server :as server]\n   [goog.string :as gstring]\n   [goog.string.format]\n   [rid3.core :as rid3 :refer [rid3->]]))\n\n\n(defn html\n  \"Turns hiccup like syntax into an HTML string.\"\n  [hiccup]\n  (server/render-static (sab/html hiccup)))\n\n\n(defn create-sim\n  [viz-state]\n  (let [{:keys [width height]} @viz-state]\n    (doto (js/d3.forceSimulation)\n      (.stop)\n      (.force \"link\" (-> (js/d3.forceLink)\n                         (.strength 1.2)\n                         (.id #(.-index %))))\n      (.force \"charge\" (js/d3.forceManyBody))\n      (.force \"center\" (js/d3.forceCenter (/ width 2) (/ height 2)))\n      (.on \"tick\" (fn []\n                    (when-let [s (:links-sel @viz-state)]\n                      (rid3-> s\n                              {:x1 #(.. % -source -x)\n                               :y1 #(.. % -source -y)\n                               :x2 #(.. % -target -x)\n                               :y2 #(.. % -target -y)}))\n                    (when-let [s (:nodes-sel @viz-state)]\n                      (rid3-> s\n                              {:cx #(.-x %)}\n                              {:cy #(.-y %)})))))))\n\n(defn create-drag\n  [sim]\n  (-> (js/d3.drag)\n      (.on \"start\" (fn started\n                     [event d _]\n                     (when (-> event .-active zero?)\n                       (-> sim\n                           (.alphaTarget 0.3)\n                           (.restart)))\n                     (set! (.-fx d) (.-x d))\n                     (set! (.-fy d) (.-y d))))\n      (.on \"drag\" (fn dragged\n                    [event d _]\n                    (set! (.-fx d) (.-x event))\n                    (set! (.-fy d) (.-y event))))\n      (.on \"end\" (fn ended\n                   [event d _]\n                   (when (-> event .-active zero?)\n                     (-> sim\n                         (.alphaTarget 0)))\n                   (set! (.-fx d) nil)\n                   (set! (.-fy d) nil)))))\n\n(defn merge-nodes\n  [orig new id]\n  (let [orig-map (into {} (map-indexed (fn [i n] [(id n) i]) orig))]\n    (doseq [n new]\n      (when-let [old (aget orig (orig-map (id n)))]\n        (when-let [x (.-x old)] (set! (.-x n) x))\n        (when-let [y (.-y old)] (set! (.-y n) y))\n        (when-let [vx (.-vx old)] (set! (.-vx n) vx))\n        (when-let [vy (.-vy old)] (set! (.-vy n) vy))\n        (when-let [fx (.-fx old)] (set! (.-fx n) fx))\n        (when-let [fy (.-fy old)] (set! (.-fy n) fy))))\n    new))\n\n(defn update-sim! [sim alpha-target {:keys [links nodes]}]\n  (let [old-nodes (.nodes sim)\n        new-nodes (merge-nodes old-nodes nodes #(.-name %))]\n    (doto sim\n      (.nodes new-nodes)\n      (-> (.force \"link\") (.links links))\n      (.alpha alpha-target)\n      (.restart))))\n\n(defn viz\n  [ratom]\n  (let [viz-state (atom {:width 1000\n                         :height 1000\n                         :hover-text-sel nil\n                         :links-sel nil\n                         :nodes-sel nil})\n        sim (create-sim viz-state)\n        drag (create-drag sim)\n        ;; See\n        ;; https://github.com/d3/d3-scale-chromatic/blob/main/README.md#api-reference\n        ;; for options.\n        color (js/d3.scaleOrdinal (.-schemeSet1 js/d3))]\n    (fn [ratom]\n      [rid3/viz {:id     \"rid3-force-demo\"\n                 :ratom  ratom\n                 :svg    {:did-mount  (fn [svg ratom]\n                                        (let [{:keys [width height]} @viz-state]\n                                          (rid3-> svg\n                                                  {:width   width\n                                                   :height  height\n                                                   :viewBox #js [0 0 width height]}))\n                                        (update-sim! sim 1 @ratom))\n                          :did-update (fn [svg ratom]\n                                        (update-sim! sim 0.3 @ratom))}\n                 :pieces [{:kind            :elem-with-data\n                           :class           \"links\"\n                           :tag             \"line\"\n                           :prepare-dataset (fn [ratom] (:links @ratom))\n                           :did-mount       (fn [sel _ratom]\n                                              (swap! viz-state assoc :links-sel sel)\n                                              (rid3-> sel\n                                                      {:stroke         \"#999\"\n                                                       :stroke-opacity 0.6\n                                                       :stroke-width   #(-> (.-value %)\n                                                                            js/Math.sqrt)}))}\n                          {:kind            :elem-with-data\n                           :class           \"nodes\"\n                           :tag             \"circle\"\n                           :prepare-dataset (fn [ratom] (:nodes @ratom))\n                           :did-mount       (fn [sel _ratom]\n                                              (swap! viz-state assoc :nodes-sel sel)\n                                              (rid3-> sel\n                                                      {:stroke         \"#fff\"\n                                                       :stroke-width   1.5\n                                                       :r              #(.-size %)\n                                                       :fill           #(color (.-group %))\n                                                       :fill-opacity   #(.-opacity %)}\n                                                      (.on \"mouseover\" (fn [_event node]\n                                                                         (-> (js/d3.selectAll (gstring/format \".c%s\" (.-id node)))\n                                                                           (.attr \"pointer-events\" \"all\")\n                                                                           (.attr \"x\" (- (.-x node) 150))\n                                                                           (.attr \"y\" (+ (.-y node) 10))\n                                                                           (.classed \"hovered\" true)\n                                                                           (.classed \"fade-out-active\" false))))\n                                                      (.on \"mouseout\" (fn [_event node]\n                                                                        (-> (js/d3.selectAll (gstring/format \".c%s\" (.-id node)))  ;; :hover-text-sel @viz-state)\n                                                                          (.attr \"pointer-events\" \"none\")\n                                                                          (.classed \"fade-out-active\" true))))\n                                                      (.on \"dblclick\" (fn [_event node]\n                                                                        (js/window.open (str \"https://www.reddit.com\" (.-link node)))))\n                                                      (.call drag)))}\n                          ;; We put this last so that it renders above the\n                          ;; nodes and links - svg is order dependant like\n                          ;; that.\n                          {:kind            :elem-with-data\n                           :class           \"hover-text\"\n                           :tag             \"foreignObject\"\n                           :prepare-dataset (fn [ratom] (:nodes @ratom))\n                           :did-mount       (fn [sel _ratom]\n                                              (swap! viz-state assoc :hover-text-sel sel)\n                                              (rid3-> sel\n                                                      {:cx -100\n                                                       :cy -100\n                                                       :width 1\n                                                       :height 1\n                                                       :opacity 0\n                                                       :class #(str \"c\" (.-id %))}\n                                                      (.html #(html [:div {:class \"hover-text-div\"}\n                                                                     [:p (.-name %)]]))))}]}])))\n\n(defn prechew\n  [app-state]\n  (-> @app-state\n      (update :nodes clj->js)\n      (update :links clj->js)))\n"]}