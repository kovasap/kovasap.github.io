{"version":3,"sources":["rid3/elem_with_data.cljs"],"mappings":";AAOA,sCAAA,tCAAMA,oFAAiBC,MAAMC,KAAKC;AAAlC,AACE,IAAMC,KAAS,iDAAA,jDAACC,4CAAIH;IACdI,WAAS,AAACC,wBAAmBH,GAAGD;IAChCK,OAAS,AAACC,UAAaH;IACvBI,SAAS,kDAAA,lDAACL,4CAAIJ;IACdU,aAAS,kDAAA,lDAACN,4CAAIJ;AAJpB,AAKMO,AACA,YAAA,ZACA,sBAAA,QAAeE;;AACnB,oBAAIC;AACF,AAEE,AAACC,wBAAmBX,MAAMC,KAAKC;;AAC/B,AAACU,0BAAqBZ,MAAMC,KAAKC;;AACjC,OAACW,8BAAyBb,MAAMC,KAAKC;;AACvC,AAEE,AAACY,qBAAgBd,MAAMC,KAAKC;;AAC5B,AAACa,gCAA2Bf,MAAMC,KAAKC;;AACvC,OAACc,oBAAehB,MAAMC,KAAKC;;;AAGnC,uCAAA,vCAAMe,sFAAkBjB,MAAMC,KAAKC;AAAnC,AACE,IAAMQ,aAAK,kDAAA,lDAACN,4CAAIJ;AAAhB,AACE,oBAAIU;AACF,AAEE,AAACC,wBAAmBX,MAAMC,KAAKC;;AAC/B,AAACU,0BAAqBZ,MAAMC,KAAKC;;AACjC,OAACgB,yBAAoBlB,MAAMC,KAAKC;;AAClC,AAEE,AAACY,qBAAgBd,MAAMC,KAAKC;;AAC5B,AAACiB,iCAA4BnB,MAAMC,KAAKC;;AACxC,OAACc,oBAAehB,MAAMC,KAAKC","names":["rid3.elem-with-data/piece-did-mount","piece","opts","prev-classes","id","cljs.core.get","selector","rid3.util/node-selector","node","js/d3.select","class","gup?","rid3.data/gup-data-exit","rid3.data/gup-data-update","rid3.data/gup-data-enter-init","rid3.data/data-enter","rid3.data/did-mount-data-update","rid3.data/data-exit","rid3.elem-with-data/piece-did-update","rid3.data/gup-data-enter","rid3.data/did-update-data-update"],"sourcesContent":["(ns rid3.elem-with-data\n  (:require\n   [cljsjs.d3]\n   [rid3.util :as util]\n   [rid3.data :as data]))\n\n\n(defn piece-did-mount [piece opts prev-classes]\n  (let [id       (get opts :id)\n        selector (util/node-selector id prev-classes)\n        node     (js/d3.select selector)\n        class    (get piece :class)\n        gup?     (get piece :gup)]\n    (-> node\n        (.append \"g\")\n        (.attr \"class\" class))\n    (if gup?\n      (do\n        ;; enter needs to be after update\n        (data/gup-data-exit piece opts prev-classes)\n        (data/gup-data-update piece opts prev-classes)\n        (data/gup-data-enter-init piece opts prev-classes))\n      (do\n        ;; update needs to be after enter\n        (data/data-enter piece opts prev-classes)\n        (data/did-mount-data-update piece opts prev-classes)\n        (data/data-exit piece opts prev-classes)))))\n\n\n(defn piece-did-update [piece opts prev-classes]\n  (let [gup? (get piece :gup)]\n    (if gup?\n      (do\n        ;; enter needs to be after update\n        (data/gup-data-exit piece opts prev-classes)\n        (data/gup-data-update piece opts prev-classes)\n        (data/gup-data-enter piece opts prev-classes))\n      (do\n        ;; update needs to be after enter\n        (data/data-enter piece opts prev-classes)\n        (data/did-update-data-update piece opts prev-classes)\n        (data/data-exit piece opts prev-classes)))))\n"]}