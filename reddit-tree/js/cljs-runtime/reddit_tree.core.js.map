{"version":3,"sources":["reddit_tree/core.cljs"],"mappings":"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","names":["reddit-tree.core/print-comment-bodies","comments-json","cljs.core.prn","G__41526","cljs.core.mapv","var_args","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","reddit-tree.core/?assoc","seq41530","G__41531","cljs.core/first","cljs.core/next","self__4805__auto__","m","kvs","cljs.core.partition","cljs.core.filter","cljs.core/second","cljs.core.map","cljs.core/vec","cljs.core.into","reddit-tree.core/is-map","thing","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","reddit-tree.core/simplify-comment-tree","data","cljs.core.dissoc","reddit_tree.core._QMARK_assoc","G__41538","cljs.core._EQ_","G__41539","cljs.core/PersistentVector","reddit-tree.core/filter-fields","seq41540","G__41541","fields","non-nil-fields","f","cljs.core/zipmap","cljs.core.apply","e","reddit-tree.core/example-data","reddit-tree.core/example-graph","reddit-tree.core/score-to-value","score","Math/log10","reddit-tree.core/max-time-secs","reagent.core.atom","reddit-tree.core/slider-secs-after-op","reddit-tree.core/min-opacity","reddit-tree.core/max-opacity","reddit-tree.core/time-to-opacity","secs","time-frac","x__4298__auto__","y__4299__auto__","cljs.core/deref","G__41571","reddit-tree.core/get-nodes","js/Error","comment","reddit_tree.core.get_nodes","depth","is-hash","is-op","cljs.core/contains?","size","cljs.core.get","cljs.core/empty?","cljs.core/concat","cljs.core.partial","reddit-tree.core/get-links","parent-name","children","name","reddit-tree.core/named-links-to-indexed-links","nodes","links","name-to-idx","cljs.core.map_indexed","i","n","link","cljs.core.assoc","reddit-tree.core/make-reddit-comment-data-into-graph","reddit-tree.core/add-secs-after-op","post-data","comment-data","op-time","G__41587","G__41588","reddit-tree.core/get-max-time-secs","x__4295__auto__","y__4296__auto__","G__41592","cljs.core/max","reddit-tree.core/reddit-post-data","reddit-tree.core/reddit-comment-data","reddit-tree.core/reddit-comment-graph","reddit-tree.core/update-reddit-data!","c__32333__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__32334__auto__","switch__32148__auto__","state_41629","state_val_41630","inst_41599","inst_41600","inst_41601","inst_41602","inst_41603","cljs.core.async.impl.ioc-helpers/take!","inst_41605","inst_41611","inst_41613","inst_41614","inst_41615","cljs.core.nth","inst_41616","inst_41617","inst_41618","inst_41619","inst_41620","inst_41621","inst_41622","inst_41623","inst_41624","inst_41625","inst_41626","inst_41627","statearr-41631","cljs.core.async.impl.ioc-helpers/return-chan","statearr-41632","state-machine__32149__auto__","ret-value__32150__auto__","result__32151__auto__","cljs.core/keyword-identical?","ex__32152__auto__","e41633","statearr-41634","cljs.core/seq","statearr-41635","state__32335__auto__","statearr-41636","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs_http.client.get","reddit_tree.core.filter_fields","cljs.core/reset!","reddit-tree.core/format-reddit-timestamp","timestamp","cljs-time.format/unparse","cljs-time.format/formatters","cljs-time.coerce/from-long","reddit-tree.core/sanitize-reddit-url","url","cljs.core.subs","cljs.core/count","reddit-tree.core/url-input","value","reddit-tree.core/update-nodes!","update-func","cljs.core.swap_BANG_","cljs.core.update","reddit-tree.core/secs-after-op-log-slider","max","Math/log","new-value","Math/exp","node","selected-by-slider","reddit-tree.core/secs-after-op-slider","reddit-tree.core/secs-to-days-hrs-mins-secs-str","str-days","str-hours","cljs.core/mod","str-mins","str-secs","reddit-tree.core/test-urls","reddit-tree.core/home-page","input-value","reddit-tree.graph/viz","reagent.core.track","reddit-tree.graph/prechew","goog.string/format","p1__41637#","p1__41638#","p1__41639#","p1__41640#","p1__41641#","p1__41642#","p1__41643#","p1__41644#","reddit-tree.core/mount-root","reagent.dom.render","js/document","reddit-tree.core/init!"],"sourcesContent":["(ns reddit-tree.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require\n   [reddit-tree.graph :as rt-g]\n   [reddit-tree.miserables :as miserables]\n   [cljs-time.core :as time]\n   [cljs-time.coerce :as ctime]\n   [cljs-time.format :as ftime]\n   [rid3.core :as rid3 :refer [rid3->]]\n   [cljs-http.client :as http]\n   [cljs.core.async :refer [<!]]\n   [goog.string :as gstring]\n   [reagent.core :as r]\n   [reagent.dom :as d]))\n\n\n;; Useful for determining structure: https://jsonformatter.curiousconcept.com/#\n(defn print-comment-bodies [comments-json]\n  ;; (prn \"call\" (keys comments-json))\n  (prn (:body comments-json))\n  ;; json can either have :data or :comments, in alternating sub-dicts\n  (if (:data comments-json)\n     (print-comment-bodies (:data comments-json))\n     (if (:children comments-json)\n       (mapv print-comment-bodies (:children comments-json))\n       nil)))\n\n\n(defn ?assoc\n  \"Same as assoc, but skip the assoc if v is nil.\"\n  [m & kvs]\n  (->> kvs\n    (partition 2)\n    (filter second)\n    (map vec)\n    (into m)))\n\n\n(defn is-map [thing]\n  (or (instance? cljs.core/PersistentHashMap thing)\n      (instance? cljs.core/PersistentArrayMap thing)))\n\n\n(defn simplify-comment-tree\n  \"Removes redundant data fields levels from json. And collapses :replies to :children.\"\n  [comments-json]\n  (cond\n    (is-map comments-json)\n    (let [data (:data comments-json)]\n      (dissoc\n        (?assoc data\n                :children (cond\n                            (:children data) (simplify-comment-tree (:children data))\n                            (= \"\" (:replies data)) []\n                            (is-map (:replies data)) (simplify-comment-tree (:children (:data (:replies data))))\n                            :else []))\n        ;; Removes :replies because we already stored that information under\n        :replies))\n    (instance? cljs.core/PersistentVector comments-json)\n    (mapv simplify-comment-tree comments-json)\n    :else\n    comments-json))\n\n\n(defn filter-fields\n  \"Removes all nil values, and all non-provided fields from the input json structure.\"\n  [comments-json & fields]\n  (cond\n    (or (instance? cljs.core/PersistentHashMap comments-json) (instance? cljs.core/PersistentArrayMap comments-json))\n    (let [non-nil-fields (filter (fn [f] (some? (f comments-json))) fields)]\n      (zipmap non-nil-fields\n              (map (fn [f] (apply filter-fields (f comments-json) fields))\n                   non-nil-fields)))\n    ;; This is a way to do it with hard-coded fields, ignoring nils:\n    ;; (?assoc :score (filter-fields (:score comments-json))\n    ;;         :body (filter-fields (:body comments-json))\n    ;;         :replies (filter-fields (:replies comments-json))\n    ;;         :children (filter-fields (:children comments-json))\n    ;;         :data (filter-fields (:data comments-json)))\n    (instance? cljs.core/PersistentVector comments-json)\n    (mapv (fn [e] (apply filter-fields e fields)) comments-json)\n    :else\n    comments-json))\n\n\n(def example-data\n  [{:children [{:score 2, :children []}]}  ;; This is \"OP\" (Original Post)\n   {:children [{:score 1, :body \"A\", :children []}\n               {:score 1, :body \"B\", :children []}\n               {:score 1, :body \"C\", :children []}\n               {:score 0, :body \"D\",\n                :children [{:score 1, :body \"E\",\n                            :children [{:score 2, :body \"F\", :children []}]}\n                           {:score 1, :body \"G\", :children []}]}]}])\n\n(def example-graph\n  {:nodes [{:name \"OP\" :size 2}   ;; Index 0\n           {:name \"A\"  :size 1}   ;; Index 1\n           {:name \"B\"  :size 1}   ;; Index 2\n           {:name \"C\"  :size 1}   ;; Index 3\n           {:name \"D\"  :size 1}   ;; Index 4\n           {:name \"E\"  :size 1}   ;; Index 5\n           {:name \"F\"  :size 1}   ;; Index 6\n           {:name \"G\"  :size 1}]  ;; Index 7\n   :links [\n           ;; These are special cases pointing OP to the direct children.\n           {:source \"OP\" :target \"A\" :value 1}\n           {:source \"OP\" :target \"B\" :value 1}\n           {:source \"OP\" :target \"C\" :value 1}\n           {:source \"OP\" :target \"D\" :value 1}\n           ;; These are parents pointing to their children.\n           {:source \"D\" :target \"E\" :value 1}\n           {:source \"D\" :target \"G\" :value 1}\n           {:source \"E\" :target \"F\" :value 1}]})\n\n\n;; Converts a reddit score to a value that can be used as a :size for nodes or\n;; a :value for edges.\n(defn score-to-value [score]\n  (if (<= score 0)\n    1\n    (+ 5 (* 2 (Math/log10 score)))))\n\n(def max-time-secs (r/atom 0))\n(def slider-secs-after-op (r/atom 0))\n  \n;; Converts a time a comment was posted after OP into an opacity with which to\n;; display that comment.\n(def min-opacity 0.1)\n(def max-opacity 1.0)\n(defn time-to-opacity [secs]\n  (let [time-frac (- 1 (min 1.0 (/ (float secs) @max-time-secs)))]\n    (+ min-opacity (* (- max-opacity min-opacity) time-frac))))\n\n\n;; Note that the into calls in get-nodes/get-links may be O(n) (prepending to a\n;; vector).\n\n(defn get-nodes\n  ([comment] (get-nodes 0 comment))\n  ([depth comment]\n   ;; Some comments in the returned json are just hash strings, presumably to\n   ;; save bandwidth. This is determined by the \"limit\" query parameter\n   ;; provided.\n   (let [is-hash (string? comment)\n         is-op (and (not is-hash) (not (contains? comment :body)))\n         size (score-to-value (get comment :score 10))]\n     ;; Not sure where the extra OP node is coming from, we ignore it here when\n     ;; making the graph.\n     (if (and is-op (empty? (:children comment)))\n       []\n       (into [{:name (cond is-op \"OP\" is-hash (str \"hash_\" comment) :else (:body comment))\n               :group depth  ;; (if is-op 1 2)\n               :depth depth\n               :size size\n               :link (get comment :permalink \"\")\n               :id (get comment :secs-after-op 0)\n               :score (get comment :score 0)\n               :secs-after-op (get comment :secs-after-op 0)\n               :opacity (if is-op 1.0 (time-to-opacity (get comment :secs-after-op 0)))}]\n             (apply concat (mapv (partial get-nodes (+ 1 depth)) (:children comment))))))))\n\n(defn get-links\n  ([parent-name comment]\n   (let [children (:children comment)\n         is-hash (string? comment)\n         name (if is-hash comment (get comment :body \"OP\"))]\n     (into [{:source parent-name :target name :value 1}]\n           (apply concat (mapv (partial get-links name) children))))))\n\n(defn named-links-to-indexed-links [nodes links]\n  (let [name-to-idx (into {} (map-indexed (fn [i n] [(:name n) i]) nodes))]\n    (mapv (fn [link] (assoc link\n                            :source (get name-to-idx (:source link))\n                            :target (get name-to-idx (:target link))))\n          links)))\n\n;; Takes return from simplify-comment-tree and creates nodes/links dataset like\n;; found in miserables.cljs. In other words, converts map like example-data to\n;; example-graph.\n(defn make-reddit-comment-data-into-graph [data]\n  (let [nodes (get-nodes data)\n        links (get-links \"OP\" data)]\n    {:nodes nodes\n     :links (named-links-to-indexed-links nodes links)}))\n\n;; (prn \"hello\" (make-reddit-comment-data-into-graph example-data))\n\n(defn add-secs-after-op [post-data comment-data]\n  (let [op-time (:created (first (:children post-data)))]\n    (cond\n      (is-map comment-data)\n      (assoc comment-data\n             :secs-after-op (- (:created comment-data) op-time)\n             :children (add-secs-after-op post-data (:children comment-data)))\n      (instance? cljs.core/PersistentVector comment-data)\n      (mapv (partial add-secs-after-op post-data) comment-data)\n      :else\n      comment-data)))\n\n(defn get-max-time-secs [comment-data]\n  (cond\n    (is-map comment-data)\n    (max (:secs-after-op comment-data) (get-max-time-secs (:children comment-data)))\n    (instance? cljs.core/PersistentVector comment-data)\n    (if (empty? comment-data) 0\n      (apply max (mapv get-max-time-secs comment-data)))\n    :else\n    comment-data))\n\n(def reddit-post-data (r/atom {:empty \"map\"}))\n(def reddit-comment-data (r/atom {:empty \"map\"}))\n(def reddit-comment-graph (r/atom {:nodes [] :links []}))\n\n(defn update-reddit-data! [link]\n  (go\n    (let [response (<! (http/get (str link \".json?limit=10000\")\n                                 {:with-credentials? false}))]\n      ;; (prn \"response\" (count (:body response)) (type (:body response)))\n      ;; We are updating the reddit-comment-data atom here with info in this\n      ;; async function. This means that when we access the atom later it's\n      ;; possible that this code hasn't run yet, and that it is still empty!\n      (let [simplified-data\n            (simplify-comment-tree\n              (filter-fields\n                (:body response) :title :selftext :score :body :replies :children :data :created :permalink))\n            [post-data comment-data] simplified-data\n            time-updated-comment-data (add-secs-after-op post-data comment-data)]\n         (reset! max-time-secs (get-max-time-secs time-updated-comment-data))\n         (reset! slider-secs-after-op @max-time-secs)\n         (reset! reddit-post-data (first (:children post-data)))\n         (reset! reddit-comment-data time-updated-comment-data)\n         (reset! reddit-comment-graph\n                 (make-reddit-comment-data-into-graph time-updated-comment-data))))))\n\n\n(defn format-reddit-timestamp [timestamp]\n  (ftime/unparse (:rfc822 ftime/formatters) (ctime/from-long (* 1000 timestamp))))\n\n\n(defn sanitize-reddit-url\n  \"Makes sure we can append .json to the given url and get a proper response from reddit.\"\n  [url]\n  (if (= \"/\" (subs url (count url) (count url)))\n    (subs url 0 (count url))\n    url))\n\n\n(defn url-input [value]\n  [:input {:type \"text\"\n           :size 100\n           :value @value\n           :on-change (fn [e]\n                        (reset! value (sanitize-reddit-url (-> e .-target .-value)))\n                        (update-reddit-data! @value))}])\n\n(defn update-nodes!\n  \"Updates all nodes in reddit-comment-graph with the given function (that takes and returns a node).\"\n  [update-func]\n  (swap! reddit-comment-graph\n         (fn [data]\n           (update data :nodes\n                   (fn [nodes] (map update-func nodes))))))\n\n(defn secs-after-op-log-slider [value max]\n  [:input {:type \"range\"\n           :value (Math/log value)\n           :step 0.1\n           :min 0.01\n           :max (Math/log max)\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (.. e -target -value)]\n                          (reset! slider-secs-after-op (Math/exp new-value))\n                          (update-nodes!\n                            (fn [node]\n                              (let [selected-by-slider\n                                    (<= 0 (- @slider-secs-after-op (:secs-after-op node)))]\n                                (assoc node :opacity\n                                       (if selected-by-slider 1 0)))))))}])\n\n(defn secs-after-op-slider [value max]\n  [:input {:type \"range\"\n           :value value\n           :min 0\n           :max max\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (.. e -target -value)]\n                          (reset! slider-secs-after-op  new-value)\n                          (update-nodes!\n                            (fn [node]\n                              (let [selected-by-slider\n                                    (<= 0 (- @slider-secs-after-op (:secs-after-op node)))]\n                                (assoc node :opacity\n                                       (if selected-by-slider 1 0)))))))}])\n\n(defn secs-to-days-hrs-mins-secs-str\n  \"Converts seconds to a string with hours, minutes, and seconds.\"\n  [secs]\n  (let [str-days (int (/ secs 60 60 24))\n        str-hours (int (mod (/ secs 60 60) 24))\n        str-mins (int (mod (/ secs 60) 60))\n        str-secs (int (mod secs 60))]\n    (str str-days \" days, \" str-hours \" hours, \" str-mins \" minutes, and \"\n         str-secs \" seconds.\")))\n  \n\n;; -------------------------\n;; Views\n\n(def test-urls\n  [\"https://www.reddit.com/r/interestingasfuck/comments/qew7al/train_to_machu_picchu_with_a_balcony/\"\n   \"https://www.reddit.com/r/Hydroponics/comments/p6jlip/growing_medium_falling_out_of_net_pots\"])\n\n(defn home-page []\n  (let [input-value (r/atom (nth test-urls 0))]\n    (update-reddit-data! @input-value)\n    (fn [] [:div [:h2 \"Reddit Comment Analyzer\"]\n            [:div\n             [:p \"Enter URL Here:\" [:br] [url-input input-value]]\n             [:p [:b (:title @reddit-post-data)] [:br] \" posted on \"\n              (format-reddit-timestamp (:created @reddit-post-data))]\n             ;; [:p \"Post Text: \" (:selftext @reddit-post-data)]\n             [:span \"Scroll through time:\" [secs-after-op-slider @slider-secs-after-op @max-time-secs]]\n             [:span \"Log scale:\" [secs-after-op-log-slider @slider-secs-after-op @max-time-secs]]\n             [:p \"Time after OP: \"\n              (secs-to-days-hrs-mins-secs-str @slider-secs-after-op)]]\n             ;; [:p \"Secs after OP: \" @slider-secs-after-op]\n            [rt-g/viz (r/track rt-g/prechew reddit-comment-graph)]\n            [:p \"Double click on nodes to go directly to the comment they \"\n             \"represent.\"]\n            [:p \"Each node in the graph is a comment. The nodes are sized by \"\n             \"their score (upvotes - downvotes). Their opacity represents \"\n             \"their posting time relative to the original post (OP) - darker \"\n             \"is older (closer to OP). All comments will have the same \"\n             \"(minimum) opacity if they were posted more than \"\n             (gstring/format \"%.2f\" (/ @max-time-secs 60 60 24))\n             \" days after the original post.\"]\n            [:div (count (:nodes @reddit-comment-graph)) \" total comments,\"\n             [:ul\n              [:li (count (filter #(>= (:score %) 1000) (:nodes @reddit-comment-graph))) \" with score greater than 1000,\"]\n              [:li (count (filter #(< 99 (:score %) 1001) (:nodes @reddit-comment-graph))) \" with score between 100 and 1000,\"]\n              [:li (count (filter #(< 49 (:score %) 101) (:nodes @reddit-comment-graph))) \" with score between 50 and 100,\"]\n              [:li (count (filter #(< 14 (:score %) 51) (:nodes @reddit-comment-graph))) \" with score between 15 and 50,\"]\n              [:li (count (filter #(< 6 (:score %) 16) (:nodes @reddit-comment-graph))) \" with score between 5 and 15,\"]\n              [:li (count (filter #(< 2 (:score %) 6) (:nodes @reddit-comment-graph))) \" with score between 2 and 5,\"]\n              [:li (count (filter #(= (:score %) 1) (:nodes @reddit-comment-graph))) \" with score of 1,\"]\n              [:li (count (filter #(< (:score %) 0) (:nodes @reddit-comment-graph))) \" with score less than 0.\"]]]\n            [:div {:class \"dev-notes\"} \"Source code can be found at \" [:a {:href \"https://github.com/kovasap/reddit-tree\"} \"github.com/kovasap/reddit-tree\"] \".\"\n              [:details\n               [:summary \"Raw Data\"]\n               [:p \"Graph Data: \" @reddit-comment-graph]\n               [:p \"Post Data: \" @reddit-post-data]\n               [:p \"Comment Data: \" @reddit-comment-data]]]])))\n\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (d/render [home-page] (.getElementById js/document \"app\")))\n\n(defn ^:export init! []\n  (mount-root))\n"]}