shadow$provide.module$node_modules$d3_hierarchy$src$treemap$squarify=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function squarifyRatio(ratio,parent,x0,y0,x1,y1){for(var rows=[],nodes=parent.children,row,nodeValue,i1=row=0,n=nodes.length,dy,value=parent.value,sumValue,minValue,maxValue,newRatio,minRatio,alpha;row<n;){parent=x1-x0;dy=y1-y0;do sumValue=nodes[i1++].value;while(!sumValue&&i1<n);minValue=maxValue=sumValue;alpha=
Math.max(dy/parent,parent/dy)/(value*ratio);newRatio=sumValue*sumValue*alpha;for(minRatio=Math.max(maxValue/newRatio,newRatio/minValue);i1<n;++i1){sumValue+=nodeValue=nodes[i1].value;nodeValue<minValue&&(minValue=nodeValue);nodeValue>maxValue&&(maxValue=nodeValue);newRatio=sumValue*sumValue*alpha;newRatio=Math.max(maxValue/newRatio,newRatio/minValue);if(newRatio>minRatio){sumValue-=nodeValue;break}minRatio=newRatio}rows.push(row={value:sumValue,dice:parent<dy,children:nodes.slice(row,i1)});row.dice?
(0,_dice.default)(row,x0,y0,x1,value?y0+=dy*sumValue/value:y1):(0,_slice.default)(row,x0,y0,value?x0+=parent*sumValue/value:x1,y1);value-=sumValue;row=i1}return rows}Object.defineProperty(exports,"__esModule",{value:!0});exports.squarifyRatio=squarifyRatio;exports.default=exports.phi=void 0;var _dice=_interopRequireDefault(require("module$node_modules$d3_hierarchy$src$treemap$dice")),_slice=_interopRequireDefault(require("module$node_modules$d3_hierarchy$src$treemap$slice"));global=(1+Math.sqrt(5))/
2;exports.phi=global;global=function custom(ratio){function squarify(parent,x0,y0,x1,y1){squarifyRatio(ratio,parent,x0,y0,x1,y1)}squarify.ratio=function(x){return custom(1<(x=+x)?x:1)};return squarify}(global);exports.default=global}
//# sourceMappingURL=module$node_modules$d3_hierarchy$src$treemap$squarify.js.map
