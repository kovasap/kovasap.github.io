shadow$provide.module$node_modules$d3_array$src$fsum=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.fsum=function(values,valueof){const adder=new Adder;if(void 0===valueof)for(var value$jscomp$0 of values)(value$jscomp$0=+value$jscomp$0)&&adder.add(value$jscomp$0);else{value$jscomp$0=-1;for(let value of values)(value=+valueof(value,++value$jscomp$0,values))&&adder.add(value)}return+adder};exports.fcumsum=function(values,valueof){const adder=
new Adder;let index=-1;return Float64Array.from(values,void 0===valueof?v=>adder.add(+v||0):v=>adder.add(+valueof(v,++index,values)||0))};exports.Adder=void 0;class Adder{constructor(){this._partials=new Float64Array(32);this._n=0}add(x){const p=this._partials;let i=0;for(let j=0;j<this._n&&32>j;j++){const y=p[j],hi=x+y;(x=Math.abs(x)<Math.abs(y)?x-(hi-y):y-(hi-x))&&(p[i++]=x);x=hi}p[i]=x;this._n=i+1;return this}valueOf(){const p=this._partials;let n=this._n;let y,hi=0;if(0<n){for(hi=p[--n];0<n;){var x=
hi;y=p[--n];hi=x+y;if(x=y-(hi-x))break}0<n&&(0>x&&0>p[n-1]||0<x&&0<p[n-1])&&(y=2*x,x=hi+y,y==x-hi&&(hi=x))}return hi}}exports.Adder=Adder}
//# sourceMappingURL=module$node_modules$d3_array$src$fsum.js.map
