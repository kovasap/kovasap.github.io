{"version":3,"sources":["rid3/data.cljs"],"mappings":"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","names":["rid3.data/data-join","piece","opts","prev-classes","map__39954","cljs.core/--destructure-map","cljs.core.get","map__39955","id","ratom","tag","class","prepare-dataset","key-fn","dataset","cljs.core/clj->js","cljs.core/deref","selector","rid3.util/node-selector","node","js/d3.select","rid3.data/data-enter","map__39977","map__39978","rid3.data/did-mount-data-update","map__39991","map__39992","did-mount","on-update","or__4212__auto__","ref","rid3.data/did-update-data-update","map__39997","map__39998","did-update","rid3.data/data-exit","map__40018","rid3.data/gup-data-enter-init","map__40020","map__40021","map__40022","gup","enter","enter-init","on-enter","G__40027","G__40028","rid3.data/gup-data-enter","map__40036","map__40037","map__40038","G__40039","G__40040","rid3.data/gup-data-update","map__40041","map__40042","map__40043","gup-update","rid3.data/gup-data-exit","map__40044","map__40045","map__40046","exit","on-exit","G__40047","G__40048"],"sourcesContent":["(ns rid3.data\n  (:require\n   [rid3.util :as util]))\n\n\n(defn data-join [piece opts prev-classes]\n  (let [{:keys [id\n                ratom]}  opts\n        {:keys [tag\n                class\n                prepare-dataset\n                key-fn]} piece\n        dataset          (if prepare-dataset\n                           (prepare-dataset ratom)\n                           (clj->js (get @ratom :dataset)))\n        selector         (util/node-selector id prev-classes)\n        node             (js/d3.select selector)]\n    (-> node\n        (.select (str \".\" class))\n        (.selectAll tag)\n        (.data dataset key-fn))))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Normal\n\n(defn data-enter [piece opts prev-classes]\n  (let [{:keys [ratom]} opts\n        {:keys [tag]}   piece]\n    (-> (data-join piece opts prev-classes)\n        .enter\n        (.append tag))))\n\n(defn did-mount-data-update [piece opts prev-classes]\n  (let [{:keys [ratom]}     opts\n        {:keys [did-mount]} piece\n        on-update           (or did-mount\n                                (fn [node ratom] node))\n        ref                 (data-join piece opts prev-classes)]\n    (on-update ref ratom)))\n\n(defn did-update-data-update [piece opts prev-classes]\n  (let [{:keys [ratom]}      opts\n        {:keys [did-mount\n                did-update]} piece\n        on-update            (or did-update\n                                 did-mount ;; sane fallback\n                                 (fn [node ratom] node))\n        ref                  (data-join piece opts prev-classes)]\n    (on-update ref ratom)))\n\n(defn data-exit [piece opts prev-classes]\n  (let [{:keys [ratom]} opts]\n    (-> (data-join piece opts prev-classes)\n        .exit\n        .remove)))\n\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; GUP\n\n(defn gup-data-enter-init [piece opts prev-classes]\n  (let [{:keys [ratom]}      opts\n        {:keys [tag\n                gup]}        piece\n        {:keys [enter\n                enter-init]} gup\n        on-enter             (or enter-init\n                                 enter ;; sane alternative\n                                 (fn [node ratom] node))]\n    (-> (data-join piece opts prev-classes)\n        .enter\n        (.append tag)\n        (on-enter ratom))))\n\n(defn gup-data-enter [piece opts prev-classes]\n  (let [{:keys [ratom]} opts\n        {:keys [tag\n                gup]}   piece\n        {enter :enter}  gup\n        on-enter        (or enter\n                            (fn [node ratom] node))]\n    (-> (data-join piece opts prev-classes)\n        .enter\n        (.append tag)\n        (on-enter ratom))))\n\n(defn gup-data-update [piece opts prev-classes]\n  (let [{:keys [ratom]}      opts\n        {:keys [gup]}        piece\n        {gup-update :update} gup\n        on-update            (or gup-update\n                                 (fn [node ratom] node))\n        ref                  (data-join piece opts prev-classes)]\n    (on-update ref ratom)))\n\n(defn gup-data-exit [piece opts prev-classes]\n  (let [{:keys [ratom]} opts\n        {:keys [gup]}   piece\n        {:keys [exit]}  gup\n        on-exit         (or exit\n                            (fn [node ratom] node))]\n    (-> (data-join piece opts prev-classes)\n        .exit\n        (on-exit ratom)\n        .remove)))\n"]}