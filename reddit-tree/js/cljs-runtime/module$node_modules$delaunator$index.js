shadow$provide.module$node_modules$delaunator$index=function(global,require,module,exports){function dist(ax,ay,bx,by){ax-=bx;ay-=by;return ax*ax+ay*ay}function quicksort(ids,dists,left,right){if(20>=right-left)for(var i=left+1;i<=right;i++){for(var temp=ids[i],tempDist=dists[temp],j=i-1;j>=left&&dists[ids[j]]>tempDist;)ids[j+1]=ids[j--];ids[j+1]=temp}else{i=left+1;temp=right;swap(ids,left+right>>1,i);dists[ids[left]]>dists[ids[right]]&&swap(ids,left,right);dists[ids[i]]>dists[ids[right]]&&swap(ids,
i,right);dists[ids[left]]>dists[ids[i]]&&swap(ids,left,i);tempDist=ids[i];for(j=dists[tempDist];;){do i++;while(dists[ids[i]]<j);do temp--;while(dists[ids[temp]]>j);if(temp<i)break;swap(ids,i,temp)}ids[left+1]=ids[temp];ids[temp]=tempDist;right-i+1>=temp-left?(quicksort(ids,dists,i,right),quicksort(ids,dists,left,temp-1)):(quicksort(ids,dists,left,temp-1),quicksort(ids,dists,i,right))}}function swap(arr,i,j){const tmp=arr[i];arr[i]=arr[j];arr[j]=tmp}function defaultGetX(p){return p[0]}function defaultGetY(p){return p[1]}
Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _robustPredicates=require("module$node_modules$robust_predicates$index");const EPSILON=Math.pow(2,-52),EDGE_STACK=new Uint32Array(512);class Delaunator{static from(points,getX=defaultGetX,getY=defaultGetY){const n=points.length,coords=new Float64Array(2*n);for(let i=0;i<n;i++){const p=points[i];coords[2*i]=getX(p);coords[2*i+1]=getY(p)}return new Delaunator(coords)}constructor(coords){const n=coords.length>>1;if(0<n&&
"number"!==typeof coords[0])throw Error("Expected coords to contain numbers.");this.coords=coords;coords=Math.max(2*n-5,0);this._triangles=new Uint32Array(3*coords);this._halfedges=new Int32Array(3*coords);this._hashSize=Math.ceil(Math.sqrt(n));this._hullPrev=new Uint32Array(n);this._hullNext=new Uint32Array(n);this._hullTri=new Uint32Array(n);this._hullHash=(new Int32Array(this._hashSize)).fill(-1);this._ids=new Uint32Array(n);this._dists=new Float64Array(n);this.update()}update(){const {coords,
_hullPrev:hullPrev,_hullNext:hullNext,_hullTri:hullTri,_hullHash:hullHash}=this;var n=coords.length>>1,minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity;for(var i$jscomp$0=0;i$jscomp$0<n;i$jscomp$0++){var x=coords[2*i$jscomp$0];var JSCompiler_object_inline_x_1782=coords[2*i$jscomp$0+1];x<minX&&(minX=x);JSCompiler_object_inline_x_1782<minY&&(minY=JSCompiler_object_inline_x_1782);x>maxX&&(maxX=x);JSCompiler_object_inline_x_1782>maxY&&(maxY=JSCompiler_object_inline_x_1782);this._ids[i$jscomp$0]=
i$jscomp$0}maxX=(minX+maxX)/2;minY=(minY+maxY)/2;minX=Infinity;for(maxY=0;maxY<n;maxY++)if(i$jscomp$0=dist(maxX,minY,coords[2*maxY],coords[2*maxY+1]),i$jscomp$0<minX){var i0=maxY;minX=i$jscomp$0}minY=coords[2*i0];maxY=coords[2*i0+1];minX=Infinity;for(maxX=0;maxX<n;maxX++)if(maxX!==i0&&(i$jscomp$0=dist(minY,maxY,coords[2*maxX],coords[2*maxX+1]),i$jscomp$0<minX&&0<i$jscomp$0)){var i1=maxX;minX=i$jscomp$0}minX=coords[2*i1];maxX=coords[2*i1+1];JSCompiler_object_inline_x_1782=Infinity;for(i$jscomp$0=0;i$jscomp$0<
n;i$jscomp$0++)if(i$jscomp$0!==i0&&i$jscomp$0!==i1){x=minX-minY;var dy=maxX-maxY;var JSCompiler_object_inline_y_1783=coords[2*i$jscomp$0]-minY;var ey=coords[2*i$jscomp$0+1]-maxY,bl=x*x+dy*dy,cl=JSCompiler_object_inline_y_1783*JSCompiler_object_inline_y_1783+ey*ey,d=.5/(x*ey-dy*JSCompiler_object_inline_y_1783);dy=(ey*bl-dy*cl)*d;x=(x*cl-JSCompiler_object_inline_y_1783*bl)*d;x=dy*dy+x*x;if(x<JSCompiler_object_inline_x_1782){var i2=i$jscomp$0;JSCompiler_object_inline_x_1782=x}}i$jscomp$0=coords[2*i2];
x=coords[2*i2+1];if(Infinity===JSCompiler_object_inline_x_1782){for(i0=0;i0<n;i0++)this._dists[i0]=coords[2*i0]-coords[0]||coords[2*i0+1]-coords[1];quicksort(this._ids,this._dists,0,n-1);i0=new Uint32Array(n);i1=0;for(let i=0,d0=-Infinity;i<n;i++)i2=this._ids[i],this._dists[i2]>d0&&(i0[i1++]=i2,d0=this._dists[i2]);this.hull=i0.subarray(0,i1);this.triangles=new Uint32Array(0);this.halfedges=new Uint32Array(0)}else{0>(0,_robustPredicates.orient2d)(minY,maxY,minX,maxX,i$jscomp$0,x)&&(JSCompiler_object_inline_x_1782=
i1,JSCompiler_object_inline_y_1783=minX,bl=maxX,i1=i2,minX=i$jscomp$0,maxX=x,i2=JSCompiler_object_inline_x_1782,i$jscomp$0=JSCompiler_object_inline_y_1783,x=bl);JSCompiler_object_inline_y_1783=minX-minY;JSCompiler_object_inline_x_1782=maxX-maxY;bl=i$jscomp$0-minY;ey=x-maxY;cl=JSCompiler_object_inline_y_1783*JSCompiler_object_inline_y_1783+JSCompiler_object_inline_x_1782*JSCompiler_object_inline_x_1782;d=bl*bl+ey*ey;dy=.5/(JSCompiler_object_inline_y_1783*ey-JSCompiler_object_inline_x_1782*bl);JSCompiler_object_inline_x_1782=
minY+(ey*cl-JSCompiler_object_inline_x_1782*d)*dy;JSCompiler_object_inline_y_1783=maxY+(JSCompiler_object_inline_y_1783*d-bl*cl)*dy;this._cx=JSCompiler_object_inline_x_1782;this._cy=JSCompiler_object_inline_y_1783;for(bl=0;bl<n;bl++)this._dists[bl]=dist(coords[2*bl],coords[2*bl+1],JSCompiler_object_inline_x_1782,JSCompiler_object_inline_y_1783);quicksort(this._ids,this._dists,0,n-1);this._hullStart=i0;n=3;hullNext[i0]=hullPrev[i2]=i1;hullNext[i1]=hullPrev[i0]=i2;hullNext[i2]=hullPrev[i1]=i0;hullTri[i0]=
0;hullTri[i1]=1;hullTri[i2]=2;hullHash.fill(-1);hullHash[this._hashKey(minY,maxY)]=i0;hullHash[this._hashKey(minX,maxX)]=i1;hullHash[this._hashKey(i$jscomp$0,x)]=i2;this.trianglesLen=0;this._addTriangle(i0,i1,i2,-1,-1,-1);for(let k=0,xp,yp;k<this._ids.length;k++){minY=this._ids[k];maxY=coords[2*minY];minX=coords[2*minY+1];if(0<k&&Math.abs(maxY-xp)<=EPSILON&&Math.abs(minX-yp)<=EPSILON)continue;xp=maxY;yp=minX;if(minY===i0||minY===i1||minY===i2)continue;maxX=0;for(let j=0,key=this._hashKey(maxY,minX);j<
this._hashSize&&(maxX=hullHash[(key+j)%this._hashSize],-1===maxX||maxX===hullNext[maxX]);j++);i$jscomp$0=maxX=hullPrev[maxX];let q;for(;q=hullNext[i$jscomp$0],0<=(0,_robustPredicates.orient2d)(maxY,minX,coords[2*i$jscomp$0],coords[2*i$jscomp$0+1],coords[2*q],coords[2*q+1]);)if(i$jscomp$0=q,i$jscomp$0===maxX){i$jscomp$0=-1;break}if(-1!==i$jscomp$0){x=this._addTriangle(i$jscomp$0,minY,hullNext[i$jscomp$0],-1,-1,hullTri[i$jscomp$0]);hullTri[minY]=this._legalize(x+2);hullTri[i$jscomp$0]=x;n++;for(JSCompiler_object_inline_x_1782=
hullNext[i$jscomp$0];q=hullNext[JSCompiler_object_inline_x_1782],0>(0,_robustPredicates.orient2d)(maxY,minX,coords[2*JSCompiler_object_inline_x_1782],coords[2*JSCompiler_object_inline_x_1782+1],coords[2*q],coords[2*q+1]);)x=this._addTriangle(JSCompiler_object_inline_x_1782,minY,q,hullTri[minY],-1,hullTri[JSCompiler_object_inline_x_1782]),hullTri[minY]=this._legalize(x+2),hullNext[JSCompiler_object_inline_x_1782]=JSCompiler_object_inline_x_1782,n--,JSCompiler_object_inline_x_1782=q;if(i$jscomp$0===
maxX)for(;q=hullPrev[i$jscomp$0],0>(0,_robustPredicates.orient2d)(maxY,minX,coords[2*q],coords[2*q+1],coords[2*i$jscomp$0],coords[2*i$jscomp$0+1]);)x=this._addTriangle(q,minY,i$jscomp$0,-1,hullTri[i$jscomp$0],hullTri[q]),this._legalize(x+2),hullTri[q]=x,hullNext[i$jscomp$0]=i$jscomp$0,n--,i$jscomp$0=q;this._hullStart=hullPrev[minY]=i$jscomp$0;hullNext[i$jscomp$0]=hullPrev[JSCompiler_object_inline_x_1782]=minY;hullNext[minY]=JSCompiler_object_inline_x_1782;hullHash[this._hashKey(maxY,minX)]=minY;hullHash[this._hashKey(coords[2*
i$jscomp$0],coords[2*i$jscomp$0+1])]=i$jscomp$0}}this.hull=new Uint32Array(n);for(let i=0,e=this._hullStart;i<n;i++)this.hull[i]=e,e=hullNext[e];this.triangles=this._triangles.subarray(0,this.trianglesLen);this.halfedges=this._halfedges.subarray(0,this.trianglesLen)}}_hashKey(x,y){var JSCompiler_temp_const=Math;x-=this._cx;y-=this._cy;x/=Math.abs(x)+Math.abs(y);return JSCompiler_temp_const.floor.call(JSCompiler_temp_const,(0<y?3-x:1+x)/4*this._hashSize)%this._hashSize}_legalize(a){const {_triangles:triangles,
_halfedges:halfedges,coords}=this;let i=0;for(var ar;;){const b=halfedges[a];var a0=a-a%3;ar=a0+(a+2)%3;if(-1===b){if(0===i)break;a=EDGE_STACK[--i];continue}const b0=b-b%3,bl=b0+(b+2)%3;var p0=triangles[ar],pr=triangles[a],pl=triangles[a0+(a+1)%3];a0=triangles[bl];var px=coords[2*a0],py=coords[2*a0+1];const dx=coords[2*p0]-px,dy=coords[2*p0+1]-py,ex=coords[2*pr]-px;pr=coords[2*pr+1]-py;px=coords[2*pl]-px;py=coords[2*pl+1]-py;pl=ex*ex+pr*pr;const cp=px*px+py*py;if(0>dx*(pr*cp-pl*py)-dy*(ex*cp-pl*px)+
(dx*dx+dy*dy)*(ex*py-pr*px)){triangles[a]=a0;triangles[b]=p0;p0=halfedges[bl];if(-1===p0){a0=this._hullStart;do{if(this._hullTri[a0]===bl){this._hullTri[a0]=a;break}a0=this._hullPrev[a0]}while(a0!==this._hullStart)}this._link(a,p0);this._link(b,halfedges[ar]);this._link(ar,bl);ar=b0+(b+1)%3;i<EDGE_STACK.length&&(EDGE_STACK[i++]=ar)}else{if(0===i)break;a=EDGE_STACK[--i]}}return ar}_link(a,b){this._halfedges[a]=b;-1!==b&&(this._halfedges[b]=a)}_addTriangle(i0,i1,i2,a,b,c){const t=this.trianglesLen;
this._triangles[t]=i0;this._triangles[t+1]=i1;this._triangles[t+2]=i2;this._link(t,a);this._link(t+1,b);this._link(t+2,c);this.trianglesLen+=3;return t}}exports.default=Delaunator}
//# sourceMappingURL=module$node_modules$delaunator$index.js.map
