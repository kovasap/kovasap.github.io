{
"version":3,
"file":"goog.i18n.numberformat.js",
"lineCount":823,
"mappings":"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",
"sources":["goog/i18n/numberformat.js"],
"sourcesContent":["/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Number format/parse library with locale support.\n */\n\n\n/**\n * Namespace for locale number format functions\n */\ngoog.provide('goog.i18n.NumberFormat');\ngoog.provide('goog.i18n.NumberFormat.CurrencyStyle');\ngoog.provide('goog.i18n.NumberFormat.Format');\n\ngoog.require('goog.asserts');\ngoog.require('goog.i18n.CompactNumberFormatSymbols');\ngoog.require('goog.i18n.NumberFormatSymbols');\ngoog.require('goog.i18n.NumberFormatSymbols_u_nu_latn');\ngoog.require('goog.i18n.currency');\ngoog.require('goog.math');\ngoog.require('goog.string');\n\n\n\n/**\n * Constructor of NumberFormat.\n * @param {number|string} pattern The number that indicates a predefined\n *     number format pattern.\n * @param {string=} opt_currency Optional international currency\n *     code. This determines the currency code/symbol used in format/parse. If\n *     not given, the currency code for the current locale will be used.\n * @param {number=} opt_currencyStyle currency style, value defined in\n *     goog.i18n.NumberFormat.CurrencyStyle. If not given, the currency style\n *     for the current locale will be used.\n * @param {!Object<string, string>=} opt_symbols Optional number format symbols\n *     map, analogous to goog.i18n.NumberFormatSymbols. If present, this\n *     overrides the symbols from the current locale, such as the percent sign\n *     and minus sign.\n * @constructor\n */\ngoog.i18n.NumberFormat = function(\n    pattern, opt_currency, opt_currencyStyle, opt_symbols) {\n  'use strict';\n  if (opt_currency && !goog.i18n.currency.isValid(opt_currency)) {\n    throw new TypeError('Currency must be valid ISO code');\n  }\n\n  /** @const @private {?string} */\n  this.intlCurrencyCode_ = opt_currency ? opt_currency.toUpperCase() : null;\n\n  /** @const @private {number} */\n  this.currencyStyle_ =\n      opt_currencyStyle || goog.i18n.NumberFormat.CurrencyStyle.LOCAL;\n\n  /** @const @private {?Object<string, string>} */\n  this.overrideNumberFormatSymbols_ = opt_symbols || null;\n\n  /** @private {number} */\n  this.maximumIntegerDigits_ = 40;\n  /** @private {number} */\n  this.minimumIntegerDigits_ = 1;\n  /** @private {number} */\n  this.significantDigits_ = 0;  // invariant, <= maximumFractionDigits\n  /** @private {number} */\n  this.maximumFractionDigits_ = 3;  // invariant, >= minFractionDigits\n  /** @private {number} */\n  this.minimumFractionDigits_ = 0;\n  /** @private {number} */\n  this.minExponentDigits_ = 0;\n  /** @private {boolean} */\n  this.useSignForPositiveExponent_ = false;\n\n  /**\n   * Whether to show trailing zeros in the fraction when significantDigits_ is\n   * positive.\n   * @private {boolean}\n   */\n  this.showTrailingZeros_ = false;\n\n  /** @private {string} */\n  this.positivePrefix_ = '';\n  /** @private {string} */\n  this.positiveSuffix_ = '';\n  /** @private {string} */\n  this.negativePrefix_ = this.getNumberFormatSymbols_().MINUS_SIGN;\n  /** @private {string} */\n  this.negativeSuffix_ = '';\n\n  // The multiplier for use in percent, per mille, etc.\n  /** @private {number} */\n  this.multiplier_ = 1;\n\n  /**\n   * True if the percent/permill sign of the negative pattern is expected.\n   * @private {boolean}\n   */\n  this.negativePercentSignExpected_ = false;\n\n  /**\n   * The grouping array is used to store the values of each number group\n   * following left of the decimal place. For example, a number group with\n   * goog.i18n.NumberFormat('#,##,###') should have [3,2] where 2 is the\n   * repeated number group following a fixed number grouping of size 3.\n   * @private {!Array<number>}\n   */\n  this.groupingArray_ = [];\n\n  /** @private {boolean} */\n  this.decimalSeparatorAlwaysShown_ = false;\n  /** @private {boolean} */\n  this.useExponentialNotation_ = false;\n  /** @private {goog.i18n.NumberFormat.CompactStyle} */\n  this.compactStyle_ = goog.i18n.NumberFormat.CompactStyle.NONE;\n\n  /**\n   * The number to base the formatting on when using compact styles, or null\n   * if formatting should not be based on another number.\n   * @type {?number}\n   * @private\n   */\n  this.baseFormattingNumber_ = null;\n\n  /** @private {string} */\n  this.pattern_;\n\n  if (typeof pattern == 'number') {\n    this.applyStandardPattern_(pattern);\n  } else {\n    this.applyPattern_(pattern);\n  }\n};\n\n\n/**\n * Standard number formatting patterns.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.Format = {\n  DECIMAL: 1,\n  SCIENTIFIC: 2,\n  PERCENT: 3,\n  CURRENCY: 4,\n  COMPACT_SHORT: 5,\n  COMPACT_LONG: 6\n};\n\n\n/**\n * Currency styles.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.CurrencyStyle = {\n  LOCAL: 0,     // currency style as it is used in its circulating country.\n  PORTABLE: 1,  // currency style that differentiate it from other popular ones.\n  GLOBAL: 2     // currency style that is unique among all currencies.\n};\n\n\n/**\n * Compacting styles.\n * @enum {number}\n */\ngoog.i18n.NumberFormat.CompactStyle = {\n  NONE: 0,   // Don't compact.\n  SHORT: 1,  // Short compact form, such as 1.2B.\n  LONG: 2    // Long compact form, such as 1.2 billion.\n};\n\n\n/**\n * If the usage of Ascii digits should be enforced.\n * @type {boolean}\n * @private\n */\ngoog.i18n.NumberFormat.enforceAsciiDigits_ = false;\n\n\n/**\n * Set if the usage of Ascii digits in formatting should be enforced.\n * NOTE: This function must be called before constructing NumberFormat.\n *\n * @param {boolean} doEnforce Boolean value about if Ascii digits should be\n *     enforced.\n */\ngoog.i18n.NumberFormat.setEnforceAsciiDigits = function(doEnforce) {\n  'use strict';\n  goog.i18n.NumberFormat.enforceAsciiDigits_ = doEnforce;\n};\n\n\n/**\n * Return if Ascii digits is enforced.\n * @return {boolean} If Ascii digits is enforced.\n */\ngoog.i18n.NumberFormat.isEnforceAsciiDigits = function() {\n  'use strict';\n  return goog.i18n.NumberFormat.enforceAsciiDigits_;\n};\n\n\n/**\n * Returns the current NumberFormatSymbols.\n * @return {?}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getNumberFormatSymbols_ = function() {\n  'use strict';\n  return this.overrideNumberFormatSymbols_ ||\n      (goog.i18n.NumberFormat.enforceAsciiDigits_ ?\n           goog.i18n.NumberFormatSymbols_u_nu_latn :\n           goog.i18n.NumberFormatSymbols);\n};\n\n\n/**\n * Returns the currency code.\n * @return {string}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getCurrencyCode_ = function() {\n  'use strict';\n  return this.intlCurrencyCode_ ||\n      this.getNumberFormatSymbols_().DEF_CURRENCY_CODE;\n};\n\n\n/**\n * Sets minimum number of fraction digits.\n * @param {number} min the minimum.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setMinimumFractionDigits = function(min) {\n  'use strict';\n  if (this.significantDigits_ > 0 && min > 0) {\n    throw new Error(\n        'Can\\'t combine significant digits and minimum fraction digits');\n  }\n  this.minimumFractionDigits_ = min;\n  return this;\n};\n\n\n/**\n * Gets minimum number of fraction digits.\n * @return {number} The number of minimum fraction digits.\n */\ngoog.i18n.NumberFormat.prototype.getMinimumFractionDigits = function() {\n  'use strict';\n  return this.minimumFractionDigits_;\n};\n\n\n/**\n * Sets maximum number of fraction digits.\n * @param {number} max the maximum.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setMaximumFractionDigits = function(max) {\n  'use strict';\n  if (max > 308) {\n    // Math.pow(10, 309) becomes Infinity which breaks the logic in this class.\n    throw new Error('Unsupported maximum fraction digits: ' + max);\n  }\n  this.maximumFractionDigits_ = max;\n  return this;\n};\n\n\n/**\n * Gets maximum number of fraction digits.\n * @return {number} The number of maximum fraction digits.\n */\ngoog.i18n.NumberFormat.prototype.getMaximumFractionDigits = function() {\n  'use strict';\n  return this.maximumFractionDigits_;\n};\n\n/**\n * Sets number of significant digits to show. Only fractions will be rounded.\n * Regardless of the number of significant digits set, the number of fractional\n * digits shown will always be capped by the maximum number of fractional digits\n * set on {@link #setMaximumFractionDigits}.\n * @param {number} number The number of significant digits to include.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setSignificantDigits = function(number) {\n  'use strict';\n  if (this.minimumFractionDigits_ > 0 && number >= 0) {\n    throw new Error(\n        'Can\\'t combine significant digits and minimum fraction digits');\n  }\n  this.significantDigits_ = number;\n  return this;\n};\n\n\n/**\n * Gets number of significant digits to show. Only fractions will be rounded.\n * @return {number} The number of significant digits to include.\n */\ngoog.i18n.NumberFormat.prototype.getSignificantDigits = function() {\n  'use strict';\n  return this.significantDigits_;\n};\n\n\n/**\n * Sets whether trailing fraction zeros should be shown when significantDigits_\n * is positive. If this is true and significantDigits_ is 2, 1 will be formatted\n * as '1.0'.\n * @param {boolean} showTrailingZeros Whether trailing zeros should be shown.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setShowTrailingZeros = function(\n    showTrailingZeros) {\n  'use strict';\n  this.showTrailingZeros_ = showTrailingZeros;\n  return this;\n};\n\n\n/**\n * Sets a number to base the formatting on when compact style formatting is\n * used. If this is null, the formatting should be based only on the number to\n * be formatting.\n *\n * This base formatting number can be used to format the target number as\n * another number would be formatted. For example, 100,000 is normally formatted\n * as \"100K\" in the COMPACT_SHORT format. To instead format it as '0.1M', the\n * base number could be set to 1,000,000 in order to force all numbers to be\n * formatted in millions. Similarly, 1,000,000,000 would normally be formatted\n * as '1B' and setting the base formatting number to 1,000,000, would cause it\n * to be formatted instead as '1,000M'.\n *\n * @param {?number} baseFormattingNumber The number to base formatting on, or\n * null if formatting should not be based on another number.\n * @return {!goog.i18n.NumberFormat} Reference to this NumberFormat object.\n */\ngoog.i18n.NumberFormat.prototype.setBaseFormatting = function(\n    baseFormattingNumber) {\n  'use strict';\n  goog.asserts.assert(\n      baseFormattingNumber === null || isFinite(baseFormattingNumber));\n  this.baseFormattingNumber_ = baseFormattingNumber;\n  return this;\n};\n\n\n/**\n * Gets the number on which compact formatting is currently based, or null if\n * no such number is set. See setBaseFormatting() for more information.\n * @return {?number}\n */\ngoog.i18n.NumberFormat.prototype.getBaseFormatting = function() {\n  'use strict';\n  return this.baseFormattingNumber_;\n};\n\n\n/**\n * Apply provided pattern, result are stored in member variables.\n *\n * @param {string} pattern String pattern being applied.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyPattern_ = function(pattern) {\n  'use strict';\n  this.pattern_ = pattern.replace(/ /g, '\\u00a0');\n  var pos = [0];\n\n  this.positivePrefix_ = this.parseAffix_(pattern, pos);\n  var trunkStart = pos[0];\n  this.parseTrunk_(pattern, pos);\n  var trunkLen = pos[0] - trunkStart;\n  this.positiveSuffix_ = this.parseAffix_(pattern, pos);\n  if (pos[0] < pattern.length &&\n      pattern.charAt(pos[0]) == goog.i18n.NumberFormat.PATTERN_SEPARATOR_) {\n    pos[0]++;\n    if (this.multiplier_ != 1) this.negativePercentSignExpected_ = true;\n    this.negativePrefix_ = this.parseAffix_(pattern, pos);\n    // we assume this part is identical to positive part.\n    // user must make sure the pattern is correctly constructed.\n    pos[0] += trunkLen;\n    this.negativeSuffix_ = this.parseAffix_(pattern, pos);\n  } else {\n    // if no negative affix specified, they share the same positive affix\n    this.negativePrefix_ += this.positivePrefix_;\n    this.negativeSuffix_ += this.positiveSuffix_;\n  }\n};\n\n\n/**\n * Apply a predefined pattern to NumberFormat object.\n * @param {number} patternType The number that indicates a predefined number\n *     format pattern.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyStandardPattern_ = function(patternType) {\n  'use strict';\n  switch (patternType) {\n    case goog.i18n.NumberFormat.Format.DECIMAL:\n      this.applyPattern_(this.getNumberFormatSymbols_().DECIMAL_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.SCIENTIFIC:\n      this.applyPattern_(this.getNumberFormatSymbols_().SCIENTIFIC_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.PERCENT:\n      this.applyPattern_(this.getNumberFormatSymbols_().PERCENT_PATTERN);\n      break;\n    case goog.i18n.NumberFormat.Format.CURRENCY:\n      this.applyPattern_(goog.i18n.currency.adjustPrecision(\n          this.getNumberFormatSymbols_().CURRENCY_PATTERN,\n          this.getCurrencyCode_()));\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_SHORT:\n      this.applyCompactStyle_(goog.i18n.NumberFormat.CompactStyle.SHORT);\n      break;\n    case goog.i18n.NumberFormat.Format.COMPACT_LONG:\n      this.applyCompactStyle_(goog.i18n.NumberFormat.CompactStyle.LONG);\n      break;\n    default:\n      throw new Error('Unsupported pattern type.');\n  }\n};\n\n\n/**\n * Apply a predefined pattern for shorthand formats.\n * @param {goog.i18n.NumberFormat.CompactStyle} style the compact style to\n *     set defaults for.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.applyCompactStyle_ = function(style) {\n  'use strict';\n  this.compactStyle_ = style;\n  this.applyPattern_(this.getNumberFormatSymbols_().DECIMAL_PATTERN);\n  this.setMinimumFractionDigits(0);\n  this.setMaximumFractionDigits(2);\n  this.setSignificantDigits(2);\n};\n\n\n/**\n * Parses text string to produce a Number.\n *\n * This method attempts to parse text starting from position \"opt_pos\" if it\n * is given. Otherwise the parse will start from the beginning of the text.\n * When opt_pos presents, opt_pos will be updated to the character next to where\n * parsing stops after the call. If an error occurs, opt_pos won't be updated.\n *\n * @param {string} text The string to be parsed.\n * @param {Array<number>=} opt_pos Position to pass in and get back.\n * @return {number} Parsed number. This throws an error if the text cannot be\n *     parsed.\n */\ngoog.i18n.NumberFormat.prototype.parse = function(text, opt_pos) {\n  'use strict';\n  var pos = opt_pos || [0];\n\n  if (this.compactStyle_ != goog.i18n.NumberFormat.CompactStyle.NONE) {\n    throw new Error('Parsing of compact numbers is unimplemented');\n  }\n\n  var ret = NaN;\n\n  // We don't want to handle multiple kinds of space in parsing, normalize the\n  // regular and narrow nbsp to nbsp.\n  text = text.replace(/ |\\u202f/g, '\\u00a0');\n\n  var gotPositive = text.indexOf(this.positivePrefix_, pos[0]) == pos[0];\n  var gotNegative = text.indexOf(this.negativePrefix_, pos[0]) == pos[0];\n\n  // check for the longest match\n  if (gotPositive && gotNegative) {\n    if (this.positivePrefix_.length > this.negativePrefix_.length) {\n      gotNegative = false;\n    } else if (this.positivePrefix_.length < this.negativePrefix_.length) {\n      gotPositive = false;\n    }\n  }\n\n  if (gotPositive) {\n    pos[0] += this.positivePrefix_.length;\n  } else if (gotNegative) {\n    pos[0] += this.negativePrefix_.length;\n  }\n\n  // process digits or Inf, find decimal position\n  if (text.indexOf(this.getNumberFormatSymbols_().INFINITY, pos[0]) == pos[0]) {\n    pos[0] += this.getNumberFormatSymbols_().INFINITY.length;\n    ret = Infinity;\n  } else {\n    ret = this.parseNumber_(text, pos);\n  }\n\n  // check for suffix\n  if (gotPositive) {\n    if (!(text.indexOf(this.positiveSuffix_, pos[0]) == pos[0])) {\n      return NaN;\n    }\n    pos[0] += this.positiveSuffix_.length;\n  } else if (gotNegative) {\n    if (!(text.indexOf(this.negativeSuffix_, pos[0]) == pos[0])) {\n      return NaN;\n    }\n    pos[0] += this.negativeSuffix_.length;\n  }\n\n  return gotNegative ? -ret : ret;\n};\n\n\n/**\n * This function will parse a \"localized\" text into a Number. It needs to\n * handle locale specific decimal, grouping, exponent and digits.\n *\n * @param {string} text The text that need to be parsed.\n * @param {Array<number>} pos  In/out parsing position. In case of failure,\n *    pos value won't be changed.\n * @return {number} Number value, or NaN if nothing can be parsed.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseNumber_ = function(text, pos) {\n  'use strict';\n  var sawDecimal = false;\n  var sawExponent = false;\n  var sawDigit = false;\n  var exponentPos = -1;\n  var scale = 1;\n  var decimal = this.getNumberFormatSymbols_().DECIMAL_SEP;\n  var grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  var exponentChar = this.getNumberFormatSymbols_().EXP_SYMBOL;\n\n  if (this.compactStyle_ != goog.i18n.NumberFormat.CompactStyle.NONE) {\n    throw new Error('Parsing of compact style numbers is not implemented');\n  }\n\n  // We don't want to handle multiple kinds of space in parsing, normalize the\n  // narrow nbsp to nbsp.\n  grouping = grouping.replace(/\\u202f/g, '\\u00a0');\n\n  var normalizedText = '';\n  for (; pos[0] < text.length; pos[0]++) {\n    var ch = text.charAt(pos[0]);\n    var digit = this.getDigit_(ch);\n    if (digit >= 0 && digit <= 9) {\n      normalizedText += digit;\n      sawDigit = true;\n    } else if (ch == decimal.charAt(0)) {\n      if (sawDecimal || sawExponent) {\n        break;\n      }\n      normalizedText += '.';\n      sawDecimal = true;\n    } else if (\n        ch == grouping.charAt(0) &&\n        ('\\u00a0' != grouping.charAt(0) ||\n         pos[0] + 1 < text.length &&\n             this.getDigit_(text.charAt(pos[0] + 1)) >= 0)) {\n      // Got a grouping character here. When grouping character is nbsp, need\n      // to make sure the character following it is a digit.\n      if (sawDecimal || sawExponent) {\n        break;\n      }\n      continue;\n    } else if (ch == exponentChar.charAt(0)) {\n      if (sawExponent) {\n        break;\n      }\n      normalizedText += 'E';\n      sawExponent = true;\n      exponentPos = pos[0];\n    } else if (ch == '+' || ch == '-') {\n      // Stop parsing if a '+' or '-' sign is found after digits have been found\n      // but it's not located right after an exponent sign.\n      if (sawDigit && exponentPos != pos[0] - 1) {\n        break;\n      }\n      normalizedText += ch;\n    } else if (\n        this.multiplier_ == 1 &&\n        ch == this.getNumberFormatSymbols_().PERCENT.charAt(0)) {\n      // Parse the percent character as part of the number only when it's\n      // not already included in the pattern.\n      if (scale != 1) {\n        break;\n      }\n      scale = 100;\n      if (sawDigit) {\n        pos[0]++;  // eat this character if parse end here\n        break;\n      }\n    } else if (\n        this.multiplier_ == 1 &&\n        ch == this.getNumberFormatSymbols_().PERMILL.charAt(0)) {\n      // Parse the permill character as part of the number only when it's\n      // not already included in the pattern.\n      if (scale != 1) {\n        break;\n      }\n      scale = 1000;\n      if (sawDigit) {\n        pos[0]++;  // eat this character if parse end here\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n\n  // Scale the number when the percent/permill character was included in\n  // the pattern.\n  if (this.multiplier_ != 1) {\n    scale = this.multiplier_;\n  }\n\n  return parseFloat(normalizedText) / scale;\n};\n\n\n/**\n * Formats a Number to produce a string.\n *\n * @param {number} number The Number to be formatted.\n * @return {string} The formatted number string.\n */\ngoog.i18n.NumberFormat.prototype.format = function(number) {\n  'use strict';\n  if (isNaN(number)) {\n    return this.getNumberFormatSymbols_().NAN;\n  }\n\n  var parts = [];\n  var baseFormattingNumber = (this.baseFormattingNumber_ === null) ?\n      number :\n      this.baseFormattingNumber_;\n  var unit = this.getUnitAfterRounding_(baseFormattingNumber, number);\n  number = goog.i18n.NumberFormat.decimalShift_(number, -unit.divisorBase);\n\n  // in icu code, it is commented that certain computation need to keep the\n  // negative sign for 0.\n  var isNegative = number < 0.0 || number == 0.0 && 1 / number < 0.0;\n\n  if (isNegative) {\n    // Also handle compact number formats\n    if (unit.negative_prefix) {\n      // Compact form includes the negative sign\n      parts.push(unit.negative_prefix);\n    } else {\n      parts.push(unit.prefix);\n      parts.push(this.negativePrefix_);\n    }\n  } else {\n    parts.push(unit.prefix);\n    parts.push(this.positivePrefix_);\n  }\n\n\n  if (!isFinite(number)) {\n    parts.push(this.getNumberFormatSymbols_().INFINITY);\n  } else {\n    // convert number to non-negative value\n    number *= isNegative ? -1 : 1;\n\n    number *= this.multiplier_;\n    this.useExponentialNotation_ ?\n        this.subformatExponential_(number, parts) :\n        this.subformatFixed_(number, this.minimumIntegerDigits_, parts);\n  }\n\n  if (isNegative) {\n    // Also handle compact number formats\n    if (unit.negative_suffix) {\n      // Compact form includes the negative sign\n      parts.push(unit.negative_suffix);\n    } else {\n      parts.push(unit.suffix);\n      parts.push(this.negativeSuffix_);\n    }\n  } else {\n    parts.push(unit.suffix);\n    parts.push(this.positiveSuffix_);\n  }\n  return parts.join('');\n};\n\n\n/**\n * Round a number into an integer and fractional part\n * based on the rounding rules for this NumberFormat.\n * @param {number} number The number to round.\n * @return {{intValue: number, fracValue: number}} The integer and fractional\n *     part after rounding.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.roundNumber_ = function(number) {\n  'use strict';\n  var shift = goog.i18n.NumberFormat.decimalShift_;\n\n  var shiftedNumber = shift(number, this.maximumFractionDigits_);\n  if (this.significantDigits_ > 0) {\n    shiftedNumber = this.roundToSignificantDigits_(\n        shiftedNumber, this.significantDigits_, this.maximumFractionDigits_);\n  }\n  shiftedNumber = Math.round(shiftedNumber);\n\n  var intValue, fracValue;\n  if (isFinite(shiftedNumber)) {\n    intValue = Math.floor(shift(shiftedNumber, -this.maximumFractionDigits_));\n    fracValue = Math.floor(\n        shiftedNumber - shift(intValue, this.maximumFractionDigits_));\n  } else {\n    intValue = number;\n    fracValue = 0;\n  }\n  return {intValue: intValue, fracValue: fracValue};\n};\n\n\n/**\n * Formats a number with the appropriate groupings when there are repeating\n * digits present. Repeating digits exists when the length of the digits left\n * of the decimal place exceeds the number of non-repeating digits.\n *\n * Formats a number by iterating through the integer number (intPart) from the\n * most left of the decimal place by inserting the appropriate number grouping\n * separator for the repeating digits until all of the repeating digits is\n * iterated. Then iterate through the non-repeating digits by inserting the\n * appropriate number grouping separator until all the non-repeating digits\n * is iterated through.\n *\n * In the number grouping concept, anything left of the decimal\n * place is followed by non-repeating digits and then repeating digits. If the\n * pattern is #,##,###, then we first (from the left of the decimal place) have\n * a non-repeating digit of size 3 followed by repeating digits of size 2\n * separated by a thousand separator. If the length of the digits are six or\n * more, there may be repeating digits required. For example, the value of\n * 12345678 would format as 1,23,45,678 where the repeating digit is length 2.\n *\n * @param {!Array<string>} parts An array to build the 'parts' of the formatted\n *  number including the values and separators.\n * @param {number} zeroCode The value of the zero digit whether or not\n *  goog.i18n.NumberFormat.enforceAsciiDigits_ is enforced.\n * @param {string} intPart The integer representation of the number to be\n *  formatted and referenced.\n * @param {!Array<number>} groupingArray The array of numbers to determine the\n *  grouping of repeated and non-repeated digits.\n * @param {number} repeatedDigitLen The length of the repeated digits left of\n *  the non-repeating digits left of the decimal.\n * @return {!Array<string>} Returns the resulting parts variable containing\n *  how numbers are to be grouped and appear.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.formatNumberGroupingRepeatingDigitsParts_ =\n    function(parts, zeroCode, intPart, groupingArray, repeatedDigitLen) {\n  'use strict';\n  // Keep track of how much has been completed on the non repeated groups\n  var nonRepeatedGroupCompleteCount = 0;\n  var currentGroupSizeIndex = 0;\n  var currentGroupSize = 0;\n\n  var grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  var digitLen = intPart.length;\n\n  // There are repeating digits and non-repeating digits\n  for (var i = 0; i < digitLen; i++) {\n    parts.push(String.fromCharCode(zeroCode + Number(intPart.charAt(i)) * 1));\n    if (digitLen - i > 1) {\n      currentGroupSize = groupingArray[currentGroupSizeIndex];\n      if (i < repeatedDigitLen) {\n        // Process the left side (the repeated number groups)\n        var repeatedDigitIndex = repeatedDigitLen - i;\n        // Edge case if there's a number grouping asking for \"1\" group at\n        // a time; otherwise, if the remainder is 1, there's the separator\n        if (currentGroupSize === 1 ||\n            (currentGroupSize > 0 &&\n             (repeatedDigitIndex % currentGroupSize) === 1)) {\n          parts.push(grouping);\n        }\n      } else if (currentGroupSizeIndex < groupingArray.length) {\n        // Process the right side (the non-repeated fixed number groups)\n        if (i === repeatedDigitLen) {\n          // Increase the group index because a separator\n          // has previously added in the earlier logic\n          currentGroupSizeIndex += 1;\n        } else if (\n            currentGroupSize ===\n            i - repeatedDigitLen - nonRepeatedGroupCompleteCount + 1) {\n          // Otherwise, just iterate to the right side and\n          // add a separator once the length matches to the expected\n          parts.push(grouping);\n          // Keep track of what has been completed on the right\n          nonRepeatedGroupCompleteCount += currentGroupSize;\n          currentGroupSizeIndex += 1;  // Get to the next number grouping\n        }\n      }\n    }\n  }\n  return parts;\n};\n\n\n/**\n * Formats a number with the appropriate groupings when there are no repeating\n * digits present. Non-repeating digits exists when the length of the digits\n * left of the decimal place is equal or lesser than the length of\n * non-repeating digits.\n *\n * Formats a number by iterating through the integer number (intPart) from the\n * right most non-repeating number group of the decimal place. For each group,\n * inserting the appropriate number grouping separator for the non-repeating\n * digits until the number is completely iterated.\n *\n * In the number grouping concept, anything left of the decimal\n * place is followed by non-repeating digits and then repeating digits. If the\n * pattern is #,##,###, then we first (from the left of the decimal place) have\n * a non-repeating digit of size 3 followed by repeating digits of size 2\n * separated by a thousand separator. If the length of the digits are five or\n * less, there won't be any repeating digits required. For example, the value\n * of 12345 would be formatted as 12,345 where the non-repeating digit is of\n * length 3.\n *\n * @param {!Array<string>} parts An array to build the 'parts' of the formatted\n *  number including the values and separators.\n * @param {number} zeroCode The value of the zero digit whether or not\n *  goog.i18n.NumberFormat.enforceAsciiDigits_ is enforced.\n * @param {string} intPart The integer representation of the number to be\n *  formatted and referenced.\n * @param {!Array<number>} groupingArray The array of numbers to determine the\n *  grouping of repeated and non-repeated digits.\n * @return {!Array<string>} Returns the resulting parts variable containing\n *  how numbers are to be grouped and appear.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.formatNumberGroupingNonRepeatingDigitsParts_ =\n    function(parts, zeroCode, intPart, groupingArray) {\n  'use strict';\n  // Keep track of how much has been completed on the non repeated groups\n  var grouping = this.getNumberFormatSymbols_().GROUP_SEP;\n  var currentGroupSizeIndex;\n  var currentGroupSize = 0;\n  var digitLenLeft = intPart.length;\n  var rightToLeftParts = [];\n\n  // Start from the right most non-repeating group and work inwards\n  for (currentGroupSizeIndex = groupingArray.length - 1;\n       currentGroupSizeIndex >= 0 && digitLenLeft > 0;\n       currentGroupSizeIndex--) {\n    currentGroupSize = groupingArray[currentGroupSizeIndex];\n    // Iterate from the right most digit\n    for (var rightDigitIndex = 0; rightDigitIndex < currentGroupSize &&\n         ((digitLenLeft - rightDigitIndex - 1) >= 0);\n         rightDigitIndex++) {\n      rightToLeftParts.push(String.fromCharCode(\n          zeroCode +\n          Number(intPart.charAt(digitLenLeft - rightDigitIndex - 1)) * 1));\n    }\n    // Update the number of digits left\n    digitLenLeft -= currentGroupSize;\n    if (digitLenLeft > 0) {\n      rightToLeftParts.push(grouping);\n    }\n  }\n  // Reverse and push onto the remaining parts\n  parts.push.apply(parts, rightToLeftParts.reverse());\n\n  return parts;\n};\n\n\n/**\n * Formats a Number in fraction format.\n *\n * @param {number} number\n * @param {number} minIntDigits Minimum integer digits.\n * @param {Array<string>} parts\n *     This array holds the pieces of formatted string.\n *     This function will add its formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.subformatFixed_ = function(\n    number, minIntDigits, parts) {\n  'use strict';\n  if (this.minimumFractionDigits_ > this.maximumFractionDigits_) {\n    throw new Error('Min value must be less than max value');\n  }\n\n  if (!parts) {\n    parts = [];\n  }\n\n  var rounded = this.roundNumber_(number);\n  var intValue = rounded.intValue;\n  var fracValue = rounded.fracValue;\n\n  var numIntDigits = (intValue == 0) ? 0 : this.intLog10_(intValue) + 1;\n  var fractionPresent = this.minimumFractionDigits_ > 0 || fracValue > 0 ||\n      (this.showTrailingZeros_ && numIntDigits < this.significantDigits_);\n  var minimumFractionDigits = this.minimumFractionDigits_;\n  if (fractionPresent) {\n    if (this.showTrailingZeros_ && this.significantDigits_ > 0) {\n      minimumFractionDigits = this.significantDigits_ - numIntDigits;\n    } else {\n      minimumFractionDigits = this.minimumFractionDigits_;\n    }\n  }\n\n  var intPart = '';\n  var translatableInt = intValue;\n  while (translatableInt > 1E20) {\n    // here it goes beyond double precision, add '0' make it look better\n    intPart = '0' + intPart;\n    translatableInt =\n        Math.round(goog.i18n.NumberFormat.decimalShift_(translatableInt, -1));\n  }\n  intPart = translatableInt + intPart;\n\n  var decimal = this.getNumberFormatSymbols_().DECIMAL_SEP;\n  var zeroCode = this.getNumberFormatSymbols_().ZERO_DIGIT.charCodeAt(0);\n  var digitLen = intPart.length;\n  var nonRepeatedGroupCount = 0;\n\n  if (intValue > 0 || minIntDigits > 0) {\n    for (var i = digitLen; i < minIntDigits; i++) {\n      parts.push(String.fromCharCode(zeroCode));\n    }\n\n    // If there's more than 1 number grouping,\n    // figure out the length of the non-repeated groupings (on the right)\n    if (this.groupingArray_.length >= 2) {\n      for (var j = 1; j < this.groupingArray_.length; j++) {\n        nonRepeatedGroupCount += this.groupingArray_[j];\n      }\n    }\n\n    // Anything left of the fixed number grouping is repeated,\n    // figure out the length of repeated groupings (on the left)\n    var repeatedDigitLen = digitLen - nonRepeatedGroupCount;\n    if (repeatedDigitLen > 0) {\n      // There are repeating digits and non-repeating digits\n      parts = this.formatNumberGroupingRepeatingDigitsParts_(\n          parts, zeroCode, intPart, this.groupingArray_, repeatedDigitLen);\n    } else {\n      // There are no repeating digits and only non-repeating digits\n      parts = this.formatNumberGroupingNonRepeatingDigitsParts_(\n          parts, zeroCode, intPart, this.groupingArray_);\n    }\n  } else if (!fractionPresent) {\n    // If there is no fraction present, and we haven't printed any\n    // integer digits, then print a zero.\n    parts.push(String.fromCharCode(zeroCode));\n  }\n\n  // Output the decimal separator if we always do so.\n  if (this.decimalSeparatorAlwaysShown_ || fractionPresent) {\n    parts.push(decimal);\n  }\n\n  var fracPart = String(fracValue);\n  // Handle case where fracPart is in scientific notation.\n  var fracPartSplit = fracPart.split('e+');\n  if (fracPartSplit.length == 2) {\n    // Only keep significant digits.\n    var floatFrac = parseFloat(fracPartSplit[0]);\n    fracPart = String(\n        this.roundToSignificantDigits_(floatFrac, this.significantDigits_, 1));\n    fracPart = fracPart.replace('.', '');\n    // Append zeroes based on the exponent.\n    var exp = parseInt(fracPartSplit[1], 10);\n    fracPart += goog.string.repeat('0', exp - fracPart.length + 1);\n  }\n\n  // Add Math.pow(10, this.maximumFractionDigits) to fracPart. Uses string ops\n  // to avoid complexity with scientific notation and overflows.\n  if (this.maximumFractionDigits_ + 1 > fracPart.length) {\n    var zeroesToAdd = this.maximumFractionDigits_ - fracPart.length;\n    fracPart = '1' + goog.string.repeat('0', zeroesToAdd) + fracPart;\n  }\n\n  var fracLen = fracPart.length;\n  while (fracPart.charAt(fracLen - 1) == '0' &&\n         fracLen > minimumFractionDigits + 1) {\n    fracLen--;\n  }\n\n  for (var i = 1; i < fracLen; i++) {\n    parts.push(String.fromCharCode(zeroCode + Number(fracPart.charAt(i)) * 1));\n  }\n};\n\n\n/**\n * Formats exponent part of a Number.\n *\n * @param {number} exponent Exponential value.\n * @param {Array<string>} parts The array that holds the pieces of formatted\n *     string. This function will append more formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.addExponentPart_ = function(exponent, parts) {\n  'use strict';\n  parts.push(this.getNumberFormatSymbols_().EXP_SYMBOL);\n\n  if (exponent < 0) {\n    exponent = -exponent;\n    parts.push(this.getNumberFormatSymbols_().MINUS_SIGN);\n  } else if (this.useSignForPositiveExponent_) {\n    parts.push(this.getNumberFormatSymbols_().PLUS_SIGN);\n  }\n\n  var exponentDigits = '' + exponent;\n  var zeroChar = this.getNumberFormatSymbols_().ZERO_DIGIT;\n  for (var i = exponentDigits.length; i < this.minExponentDigits_; i++) {\n    parts.push(zeroChar);\n  }\n  parts.push(exponentDigits);\n};\n\n/**\n * Returns the mantissa for the given value and its exponent.\n *\n * @param {number} value\n * @param {number} exponent\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getMantissa_ = function(value, exponent) {\n  'use strict';\n  return goog.i18n.NumberFormat.decimalShift_(value, -exponent);\n};\n\n/**\n * Formats Number in exponential format.\n *\n * @param {number} number Value need to be formatted.\n * @param {Array<string>} parts The array that holds the pieces of formatted\n *     string. This function will append more formatted pieces to the array.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.subformatExponential_ = function(\n    number, parts) {\n  'use strict';\n  if (number == 0.0) {\n    this.subformatFixed_(number, this.minimumIntegerDigits_, parts);\n    this.addExponentPart_(0, parts);\n    return;\n  }\n\n  var exponent = goog.math.safeFloor(Math.log(number) / Math.log(10));\n  number = this.getMantissa_(number, exponent);\n\n  var minIntDigits = this.minimumIntegerDigits_;\n  if (this.maximumIntegerDigits_ > 1 &&\n      this.maximumIntegerDigits_ > this.minimumIntegerDigits_) {\n    // A repeating range is defined; adjust to it as follows.\n    // If repeat == 3, we have 6,5,4=>3; 3,2,1=>0; 0,-1,-2=>-3;\n    // -3,-4,-5=>-6, etc. This takes into account that the\n    // exponent we have here is off by one from what we expect;\n    // it is for the format 0.MMMMMx10^n.\n    var remainder = exponent % this.maximumIntegerDigits_;\n    if (remainder < 0) {\n      remainder = this.maximumIntegerDigits_ + remainder;\n    }\n\n    number = goog.i18n.NumberFormat.decimalShift_(number, remainder);\n    exponent -= remainder;\n\n    minIntDigits = 1;\n  } else {\n    // No repeating range is defined; use minimum integer digits.\n    if (this.minimumIntegerDigits_ < 1) {\n      exponent++;\n      number = goog.i18n.NumberFormat.decimalShift_(number, -1);\n    } else {\n      exponent -= this.minimumIntegerDigits_ - 1;\n      number = goog.i18n.NumberFormat.decimalShift_(\n          number, this.minimumIntegerDigits_ - 1);\n    }\n  }\n  this.subformatFixed_(number, minIntDigits, parts);\n  this.addExponentPart_(exponent, parts);\n};\n\n\n/**\n * Returns the digit value of current character. The character could be either\n * '0' to '9', or a locale specific digit.\n *\n * @param {string} ch Character that represents a digit.\n * @return {number} The digit value, or -1 on error.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getDigit_ = function(ch) {\n  'use strict';\n  var code = ch.charCodeAt(0);\n  // between '0' to '9'\n  if (48 <= code && code < 58) {\n    return code - 48;\n  } else {\n    var zeroCode = this.getNumberFormatSymbols_().ZERO_DIGIT.charCodeAt(0);\n    return zeroCode <= code && code < zeroCode + 10 ? code - zeroCode : -1;\n  }\n};\n\n\n// ----------------------------------------------------------------------\n// CONSTANTS\n// ----------------------------------------------------------------------\n// Constants for characters used in programmatic (unlocalized) patterns.\n/**\n * A zero digit character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_ = '0';\n\n\n/**\n * A grouping separator character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_ = ',';\n\n\n/**\n * A decimal separator character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_ = '.';\n\n\n/**\n * A per mille character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_PER_MILLE_ = '\\u2030';\n\n\n/**\n * A percent character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_PERCENT_ = '%';\n\n\n/**\n * A digit character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_DIGIT_ = '#';\n\n\n/**\n * A separator character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_SEPARATOR_ = ';';\n\n\n/**\n * An exponent character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_EXPONENT_ = 'E';\n\n\n/**\n * A plus character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_PLUS_ = '+';\n\n\n/**\n * A generic currency sign character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_ = '\\u00A4';\n\n\n/**\n * A quote character.\n * @type {string}\n * @private\n */\ngoog.i18n.NumberFormat.QUOTE_ = '\\'';\n\n\n/**\n * Parses affix part of pattern.\n *\n * @param {string} pattern Pattern string that need to be parsed.\n * @param {Array<number>} pos One element position array to set and receive\n *     parsing position.\n *\n * @return {string} Affix received from parsing.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseAffix_ = function(pattern, pos) {\n  'use strict';\n  var affix = '';\n  var inQuote = false;\n  var len = pattern.length;\n\n  for (; pos[0] < len; pos[0]++) {\n    var ch = pattern.charAt(pos[0]);\n    if (ch == goog.i18n.NumberFormat.QUOTE_) {\n      if (pos[0] + 1 < len &&\n          pattern.charAt(pos[0] + 1) == goog.i18n.NumberFormat.QUOTE_) {\n        pos[0]++;\n        affix += '\\'';  // 'don''t'\n      } else {\n        inQuote = !inQuote;\n      }\n      continue;\n    }\n\n    if (inQuote) {\n      affix += ch;\n    } else {\n      switch (ch) {\n        case goog.i18n.NumberFormat.PATTERN_DIGIT_:\n        case goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_:\n        case goog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_:\n        case goog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_:\n        case goog.i18n.NumberFormat.PATTERN_SEPARATOR_:\n          return affix;\n        case goog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_:\n          if ((pos[0] + 1) < len &&\n              pattern.charAt(pos[0] + 1) ==\n                  goog.i18n.NumberFormat.PATTERN_CURRENCY_SIGN_) {\n            pos[0]++;\n            affix += this.getCurrencyCode_();\n          } else {\n            switch (this.currencyStyle_) {\n              case goog.i18n.NumberFormat.CurrencyStyle.LOCAL:\n                affix += goog.i18n.currency.getLocalCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              case goog.i18n.NumberFormat.CurrencyStyle.GLOBAL:\n                affix += goog.i18n.currency.getGlobalCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              case goog.i18n.NumberFormat.CurrencyStyle.PORTABLE:\n                affix += goog.i18n.currency.getPortableCurrencySignWithFallback(\n                    this.getCurrencyCode_());\n                break;\n              default:\n                break;\n            }\n          }\n          break;\n        case goog.i18n.NumberFormat.PATTERN_PERCENT_:\n          if (!this.negativePercentSignExpected_ && this.multiplier_ != 1) {\n            throw new Error('Too many percent/permill');\n          } else if (\n              this.negativePercentSignExpected_ && this.multiplier_ != 100) {\n            throw new Error('Inconsistent use of percent/permill characters');\n          }\n          this.multiplier_ = 100;\n          this.negativePercentSignExpected_ = false;\n          affix += this.getNumberFormatSymbols_().PERCENT;\n          break;\n        case goog.i18n.NumberFormat.PATTERN_PER_MILLE_:\n          if (!this.negativePercentSignExpected_ && this.multiplier_ != 1) {\n            throw new Error('Too many percent/permill');\n          } else if (\n              this.negativePercentSignExpected_ && this.multiplier_ != 1000) {\n            throw new Error('Inconsistent use of percent/permill characters');\n          }\n          this.multiplier_ = 1000;\n          this.negativePercentSignExpected_ = false;\n          affix += this.getNumberFormatSymbols_().PERMILL;\n          break;\n        default:\n          affix += ch;\n      }\n    }\n  }\n\n  return affix;\n};\n\n\n/**\n * Parses the trunk part of a pattern.\n *\n * @param {string} pattern Pattern string that need to be parsed.\n * @param {Array<number>} pos One element position array to set and receive\n *     parsing position.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.parseTrunk_ = function(pattern, pos) {\n  'use strict';\n  var decimalPos = -1;\n  var digitLeftCount = 0;\n  var zeroDigitCount = 0;\n  var digitRightCount = 0;\n  var groupingCount = -1;\n  var len = pattern.length;\n  for (var loop = true; pos[0] < len && loop; pos[0]++) {\n    var ch = pattern.charAt(pos[0]);\n    switch (ch) {\n      case goog.i18n.NumberFormat.PATTERN_DIGIT_:\n        if (zeroDigitCount > 0) {\n          digitRightCount++;\n        } else {\n          digitLeftCount++;\n        }\n        if (groupingCount >= 0 && decimalPos < 0) {\n          groupingCount++;\n        }\n        break;\n      case goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_:\n        if (digitRightCount > 0) {\n          throw new Error('Unexpected \"0\" in pattern \"' + pattern + '\"');\n        }\n        zeroDigitCount++;\n        if (groupingCount >= 0 && decimalPos < 0) {\n          groupingCount++;\n        }\n        break;\n      case goog.i18n.NumberFormat.PATTERN_GROUPING_SEPARATOR_:\n        if (groupingCount > 0) {\n          this.groupingArray_.push(groupingCount);\n        }\n        groupingCount = 0;\n        break;\n      case goog.i18n.NumberFormat.PATTERN_DECIMAL_SEPARATOR_:\n        if (decimalPos >= 0) {\n          throw new Error(\n              'Multiple decimal separators in pattern \"' + pattern + '\"');\n        }\n        decimalPos = digitLeftCount + zeroDigitCount + digitRightCount;\n        break;\n      case goog.i18n.NumberFormat.PATTERN_EXPONENT_:\n        if (this.useExponentialNotation_) {\n          throw new Error(\n              'Multiple exponential symbols in pattern \"' + pattern + '\"');\n        }\n        this.useExponentialNotation_ = true;\n        this.minExponentDigits_ = 0;\n\n        // exponent pattern can have a optional '+'.\n        if ((pos[0] + 1) < len &&\n            pattern.charAt(pos[0] + 1) ==\n                goog.i18n.NumberFormat.PATTERN_PLUS_) {\n          pos[0]++;\n          this.useSignForPositiveExponent_ = true;\n        }\n\n        // Use lookahead to parse out the exponential part\n        // of the pattern, then jump into phase 2.\n        while ((pos[0] + 1) < len &&\n               pattern.charAt(pos[0] + 1) ==\n                   goog.i18n.NumberFormat.PATTERN_ZERO_DIGIT_) {\n          pos[0]++;\n          this.minExponentDigits_++;\n        }\n\n        if ((digitLeftCount + zeroDigitCount) < 1 ||\n            this.minExponentDigits_ < 1) {\n          throw new Error('Malformed exponential pattern \"' + pattern + '\"');\n        }\n        loop = false;\n        break;\n      default:\n        pos[0]--;\n        loop = false;\n        break;\n    }\n  }\n\n  if (zeroDigitCount == 0 && digitLeftCount > 0 && decimalPos >= 0) {\n    // Handle '###.###' and '###.' and '.###'\n    var n = decimalPos;\n    if (n == 0) {  // Handle '.###'\n      n++;\n    }\n    digitRightCount = digitLeftCount - n;\n    digitLeftCount = n - 1;\n    zeroDigitCount = 1;\n  }\n\n  // Do syntax checking on the digits.\n  if (decimalPos < 0 && digitRightCount > 0 ||\n      decimalPos >= 0 && (decimalPos < digitLeftCount ||\n                          decimalPos > digitLeftCount + zeroDigitCount) ||\n      groupingCount == 0) {\n    throw new Error('Malformed pattern \"' + pattern + '\"');\n  }\n  var totalDigits = digitLeftCount + zeroDigitCount + digitRightCount;\n\n  this.maximumFractionDigits_ = decimalPos >= 0 ? totalDigits - decimalPos : 0;\n  if (decimalPos >= 0) {\n    this.minimumFractionDigits_ = digitLeftCount + zeroDigitCount - decimalPos;\n    if (this.minimumFractionDigits_ < 0) {\n      this.minimumFractionDigits_ = 0;\n    }\n  }\n\n  // The effectiveDecimalPos is the position the decimal is at or would be at\n  // if there is no decimal. Note that if decimalPos<0, then digitTotalCount ==\n  // digitLeftCount + zeroDigitCount.\n  var effectiveDecimalPos = decimalPos >= 0 ? decimalPos : totalDigits;\n  this.minimumIntegerDigits_ = effectiveDecimalPos - digitLeftCount;\n  if (this.useExponentialNotation_) {\n    this.maximumIntegerDigits_ = digitLeftCount + this.minimumIntegerDigits_;\n\n    // in exponential display, we need to at least show something.\n    if (this.maximumFractionDigits_ == 0 && this.minimumIntegerDigits_ == 0) {\n      this.minimumIntegerDigits_ = 1;\n    }\n  }\n\n  // Add another number grouping at the end\n  this.groupingArray_.push(Math.max(0, groupingCount));\n  this.decimalSeparatorAlwaysShown_ =\n      decimalPos == 0 || decimalPos == totalDigits;\n};\n\n\n/**\n * Alias for the compact format 'unit' object.\n * @typedef {{\n *     divisorBase: number,\n *     negative_prefix: string,\n *     negative_suffix: string,\n *     prefix: string,\n *     suffix: string\n * }}\n */\ngoog.i18n.NumberFormat.CompactNumberUnit;\n\n\n/**\n * The empty unit, corresponding to a base of 0.\n * @private {!goog.i18n.NumberFormat.CompactNumberUnit}\n */\ngoog.i18n.NumberFormat.NULL_UNIT_ = {\n  divisorBase: 0,\n  negative_prefix: '',\n  negative_suffix: '',\n  prefix: '',\n  suffix: ''\n};\n\n\n/**\n * Get compact unit for a certain number of digits\n *\n * @param {number} base The number of digits to get the unit for.\n * @param {string} plurality The plurality of the number.\n * @return {!goog.i18n.NumberFormat.CompactNumberUnit} The compact unit.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getUnitFor_ = function(base, plurality) {\n  'use strict';\n  var table = this.compactStyle_ == goog.i18n.NumberFormat.CompactStyle.SHORT ?\n      goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_SHORT_PATTERN :\n      goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_LONG_PATTERN;\n\n  if (table == null) {\n    table = goog.i18n.CompactNumberFormatSymbols.COMPACT_DECIMAL_SHORT_PATTERN;\n  }\n\n  if (base < 3) {\n    return goog.i18n.NumberFormat.NULL_UNIT_;\n  } else {\n    var shift = goog.i18n.NumberFormat.decimalShift_;\n\n    base = Math.min(14, base);\n    var patterns = table[shift(1, base)];\n    var previousNonNullBase = base - 1;\n    while (!patterns && previousNonNullBase >= 3) {\n      patterns = table[shift(1, previousNonNullBase)];\n      previousNonNullBase--;\n    }\n    if (!patterns) {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    var pattern = patterns[plurality];\n\n    // Return pattern for negative formatting, if present\n    var neg_prefix = '';\n    var neg_suffix = '';\n    var index_of_neg_part = pattern.indexOf(';');\n    var neg_pattern = null;\n    if (index_of_neg_part >= 0) {\n      // Trim positive pattern\n      pattern = pattern.substring(0, index_of_neg_part);\n      neg_pattern = pattern.substring(index_of_neg_part + 1);\n      if (neg_pattern) {\n        var neg_parts = /([^0]*)(0+)(.*)/.exec(neg_pattern);\n        neg_prefix = neg_parts[1];\n        neg_suffix = neg_parts[3];\n      }\n    }\n\n    if (!pattern || pattern == '0') {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    var parts = /([^0]*)(0+)(.*)/.exec(pattern);\n    if (!parts) {\n      return goog.i18n.NumberFormat.NULL_UNIT_;\n    }\n\n    return {\n      divisorBase: (previousNonNullBase + 1) - (parts[2].length - 1),\n      negative_prefix: neg_prefix,\n      negative_suffix: neg_suffix,\n      prefix: parts[1],\n      suffix: parts[3]\n    };\n  }\n};\n\n\n/**\n * Get the compact unit divisor, accounting for rounding of the quantity.\n *\n * @param {number} formattingNumber The number to base the formatting on. The\n *     unit will be calculated from this number.\n * @param {number} pluralityNumber The number to use for calculating the\n *     plurality.\n * @return {!goog.i18n.NumberFormat.CompactNumberUnit} The unit after rounding.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.getUnitAfterRounding_ = function(\n    formattingNumber, pluralityNumber) {\n  'use strict';\n  if (this.compactStyle_ == goog.i18n.NumberFormat.CompactStyle.NONE) {\n    return goog.i18n.NumberFormat.NULL_UNIT_;\n  }\n\n  formattingNumber = Math.abs(formattingNumber);\n  pluralityNumber = Math.abs(pluralityNumber);\n\n  var initialPlurality = this.pluralForm_(formattingNumber);\n  // Compute the exponent from the formattingNumber, to compute the unit.\n  var base = formattingNumber <= 1 ? 0 : this.intLog10_(formattingNumber);\n  var initialDivisor = this.getUnitFor_(base, initialPlurality).divisorBase;\n  // Round both numbers based on the unit used.\n  var pluralityAttempt =\n      goog.i18n.NumberFormat.decimalShift_(pluralityNumber, -initialDivisor);\n  var pluralityRounded = this.roundNumber_(pluralityAttempt);\n  var formattingAttempt =\n      goog.i18n.NumberFormat.decimalShift_(formattingNumber, -initialDivisor);\n  var formattingRounded = this.roundNumber_(formattingAttempt);\n  // Compute the plurality of the pluralityNumber when formatted using the name\n  // units as the formattingNumber.\n  var finalPlurality =\n      this.pluralForm_(pluralityRounded.intValue + pluralityRounded.fracValue);\n  // Get the final unit, using the rounded formatting number to get the correct\n  // unit, and the plurality computed from the pluralityNumber.\n  return this.getUnitFor_(\n      initialDivisor + this.intLog10_(formattingRounded.intValue),\n      finalPlurality);\n};\n\n\n/**\n * Get the integer base 10 logarithm of a number.\n *\n * @param {number} number The number to log.\n * @return {number} The lowest integer n such that 10^n >= number.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.intLog10_ = function(number) {\n  'use strict';\n  // Handle infinity.\n  if (!isFinite(number)) {\n    return number > 0 ? number : 0;\n  }\n  // Turns out Math.log(1000000)/Math.LN10 is strictly less than 6.\n  // TODO(nickreid): Make this use `decimalShift_` or use another more effecient\n  // string-based method.\n  var i = 0;\n  while ((number /= 10) >= 1) i++;\n  return i;\n};\n\n/**\n * Shifts `number` by `digitCount` decimal digits.\n *\n * This function corrects for rounding error that may occur when naively\n * multiplying or dividing by a power of 10. See:\n * https://en.wikipedia.org/wiki/Floating-point_arithmetic#Accuracy_problems\n * Example: `1.1e27 / Math.pow(10, 12)  != 1.1e15`.\n *\n * This function does not correct for inherent limitations in the precision of\n * JavaScript numbers.\n *\n * @param {number} number The number to shift.\n * @param {number} digitCount The number of places by which to shift number.\n *     Must be an integer. May be positive or negative.\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.decimalShift_ = function(number, digitCount) {\n  'use strict';\n  goog.asserts.assert(\n      digitCount % 1 == 0, 'Cannot shift by fractional digits \"%s\".',\n      digitCount);\n\n  // Make sure to cover all numbers that stringify to something that doesn't\n  // look like a number.\n  if (!number || !isFinite(number) || digitCount == 0) {\n    return number;\n  }\n\n  // This method isn't efficient, but it has the exact behaviour we want without\n  // worrying about floating-point math edge cases.\n  var numParts = String(number).split('e');\n  var magnitude = parseInt(numParts[1] || 0, 10) + digitCount;\n  return parseFloat(numParts[0] + 'e' + magnitude);\n};\n\n/**\n * Rounds `number` to `decimalCount` decimal places.\n *\n * Negative values of `decimalCount` will eliminate integeral digits.\n *\n * This function corrects for rounding error that may occur when naively\n * multiplying by a power of 10.\n *\n * This function does not correct for inherent limitations in the precision of\n * JavaScript numbers.\n *\n * @param {number} number The number to round.\n * @param {number} decimalCount The number of decimal places to retain.\n *     Must be an integer. May be positive or negative.\n * @return {number}\n * @private\n */\ngoog.i18n.NumberFormat.decimalRound_ = function(number, decimalCount) {\n  'use strict';\n  goog.asserts.assert(\n      decimalCount % 1 == 0, 'Cannot round to fractional digits \"%s\".',\n      decimalCount);\n\n  if (!number || !isFinite(number)) {\n    return number;\n  }\n\n  var shift = goog.i18n.NumberFormat.decimalShift_;\n  return shift(Math.round(shift(number, decimalCount)), -decimalCount);\n};\n\n\n/**\n * Round to a certain number of significant digits.\n *\n * @param {number} number The number to round.\n * @param {number} significantDigits The number of significant digits\n *     to round to.\n * @param {number} scale Treat number as fixed point times 10^scale.\n * @return {number} The rounded number.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.roundToSignificantDigits_ = function(\n    number, significantDigits, scale) {\n  'use strict';\n  if (!number) return number;\n\n  var digits = this.intLog10_(number);\n  var magnitude = significantDigits - digits - 1;\n\n  // Only round fraction, not (potentially shifted) integers.\n  if (magnitude < -scale) {\n    return goog.i18n.NumberFormat.decimalRound_(number, -scale);\n  } else {\n    return goog.i18n.NumberFormat.decimalRound_(number, magnitude);\n  }\n};\n\n\n/**\n * Get the plural form of a number.\n * @param {number} quantity The quantity to find plurality of.\n * @return {string} One of 'zero', 'one', 'two', 'few', 'many', 'other'.\n * @private\n */\ngoog.i18n.NumberFormat.prototype.pluralForm_ = function(quantity) {\n  'use strict';\n  /* TODO: Implement */\n  return 'other';\n};\n\n\n/**\n * Checks if the currency symbol comes before the value ($12) or after (12$)\n * Handy for applications that need to have separate UI fields for the currency\n * value and symbol, especially for input: Price: [USD] [123.45]\n * The currency symbol might be a combo box, or a label.\n *\n * @return {boolean} true if currency is before value.\n */\ngoog.i18n.NumberFormat.prototype.isCurrencyCodeBeforeValue = function() {\n  'use strict';\n  var posCurrSymbol = this.pattern_.indexOf('\\u00A4');  // '\u00a4' Currency sign\n  var posPound = this.pattern_.indexOf('#');\n  var posZero = this.pattern_.indexOf('0');\n\n  // posCurrValue is the first '#' or '0' found.\n  // If none of them is found (not possible, but still),\n  // the result is true (postCurrSymbol < MAX_VALUE)\n  // That is OK, matches the en_US and ROOT locales.\n  var posCurrValue = Number.MAX_VALUE;\n  if (posPound >= 0 && posPound < posCurrValue) {\n    posCurrValue = posPound;\n  }\n  if (posZero >= 0 && posZero < posCurrValue) {\n    posCurrValue = posZero;\n  }\n\n  // No need to test, it is guaranteed that both these symbols exist.\n  // If not, we have bigger problems than this.\n  return posCurrSymbol < posCurrValue;\n};\n"],
"names":["goog","provide","require","i18n","NumberFormat","goog.i18n.NumberFormat","pattern","opt_currency","opt_currencyStyle","opt_symbols","currency","isValid","TypeError","intlCurrencyCode_","toUpperCase","currencyStyle_","CurrencyStyle","LOCAL","overrideNumberFormatSymbols_","maximumIntegerDigits_","minimumIntegerDigits_","significantDigits_","maximumFractionDigits_","minimumFractionDigits_","minExponentDigits_","useSignForPositiveExponent_","showTrailingZeros_","positivePrefix_","positiveSuffix_","negativePrefix_","getNumberFormatSymbols_","MINUS_SIGN","negativeSuffix_","multiplier_","negativePercentSignExpected_","groupingArray_","decimalSeparatorAlwaysShown_","useExponentialNotation_","compactStyle_","CompactStyle","NONE","baseFormattingNumber_","pattern_","applyStandardPattern_","applyPattern_","Format","DECIMAL","SCIENTIFIC","PERCENT","CURRENCY","COMPACT_SHORT","COMPACT_LONG","PORTABLE","GLOBAL","SHORT","LONG","enforceAsciiDigits_","setEnforceAsciiDigits","goog.i18n.NumberFormat.setEnforceAsciiDigits","doEnforce","isEnforceAsciiDigits","goog.i18n.NumberFormat.isEnforceAsciiDigits","prototype","goog.i18n.NumberFormat.prototype.getNumberFormatSymbols_","NumberFormatSymbols_u_nu_latn","NumberFormatSymbols","getCurrencyCode_","goog.i18n.NumberFormat.prototype.getCurrencyCode_","DEF_CURRENCY_CODE","setMinimumFractionDigits","goog.i18n.NumberFormat.prototype.setMinimumFractionDigits","min","Error","getMinimumFractionDigits","goog.i18n.NumberFormat.prototype.getMinimumFractionDigits","setMaximumFractionDigits","goog.i18n.NumberFormat.prototype.setMaximumFractionDigits","max","getMaximumFractionDigits","goog.i18n.NumberFormat.prototype.getMaximumFractionDigits","setSignificantDigits","goog.i18n.NumberFormat.prototype.setSignificantDigits","number","getSignificantDigits","goog.i18n.NumberFormat.prototype.getSignificantDigits","setShowTrailingZeros","goog.i18n.NumberFormat.prototype.setShowTrailingZeros","showTrailingZeros","setBaseFormatting","goog.i18n.NumberFormat.prototype.setBaseFormatting","baseFormattingNumber","asserts","assert","isFinite","getBaseFormatting","goog.i18n.NumberFormat.prototype.getBaseFormatting","goog.i18n.NumberFormat.prototype.applyPattern_","replace","pos","parseAffix_","trunkStart","parseTrunk_","trunkLen","length","charAt","PATTERN_SEPARATOR_","goog.i18n.NumberFormat.prototype.applyStandardPattern_","patternType","DECIMAL_PATTERN","SCIENTIFIC_PATTERN","PERCENT_PATTERN","adjustPrecision","CURRENCY_PATTERN","applyCompactStyle_","goog.i18n.NumberFormat.prototype.applyCompactStyle_","style","parse","goog.i18n.NumberFormat.prototype.parse","text","opt_pos","ret","NaN","gotPositive","indexOf","gotNegative","INFINITY","Infinity","parseNumber_","goog.i18n.NumberFormat.prototype.parseNumber_","sawDecimal","sawExponent","sawDigit","exponentPos","scale","decimal","DECIMAL_SEP","grouping","GROUP_SEP","exponentChar","EXP_SYMBOL","normalizedText","ch","digit","getDigit_","PERMILL","parseFloat","format","goog.i18n.NumberFormat.prototype.format","isNaN","NAN","parts","unit","getUnitAfterRounding_","decimalShift_","divisorBase","isNegative","negative_prefix","push","prefix","subformatExponential_","subformatFixed_","negative_suffix","suffix","join","roundNumber_","goog.i18n.NumberFormat.prototype.roundNumber_","shift","shiftedNumber","roundToSignificantDigits_","Math","round","intValue","fracValue","floor","formatNumberGroupingRepeatingDigitsParts_","goog.i18n.NumberFormat.prototype.formatNumberGroupingRepeatingDigitsParts_","zeroCode","intPart","groupingArray","repeatedDigitLen","nonRepeatedGroupCompleteCount","currentGroupSizeIndex","currentGroupSize","digitLen","i","String","fromCharCode","Number","repeatedDigitIndex","formatNumberGroupingNonRepeatingDigitsParts_","goog.i18n.NumberFormat.prototype.formatNumberGroupingNonRepeatingDigitsParts_","digitLenLeft","rightToLeftParts","rightDigitIndex","apply","reverse","goog.i18n.NumberFormat.prototype.subformatFixed_","minIntDigits","rounded","numIntDigits","intLog10_","fractionPresent","minimumFractionDigits","translatableInt","ZERO_DIGIT","charCodeAt","nonRepeatedGroupCount","j","fracPart","fracPartSplit","split","floatFrac","exp","parseInt","string","repeat","zeroesToAdd","fracLen","addExponentPart_","goog.i18n.NumberFormat.prototype.addExponentPart_","exponent","PLUS_SIGN","exponentDigits","zeroChar","getMantissa_","goog.i18n.NumberFormat.prototype.getMantissa_","value","goog.i18n.NumberFormat.prototype.subformatExponential_","math","safeFloor","log","remainder","goog.i18n.NumberFormat.prototype.getDigit_","code","PATTERN_ZERO_DIGIT_","PATTERN_GROUPING_SEPARATOR_","PATTERN_DECIMAL_SEPARATOR_","PATTERN_PER_MILLE_","PATTERN_PERCENT_","PATTERN_DIGIT_","PATTERN_EXPONENT_","PATTERN_PLUS_","PATTERN_CURRENCY_SIGN_","QUOTE_","goog.i18n.NumberFormat.prototype.parseAffix_","affix","inQuote","len","getLocalCurrencySignWithFallback","getGlobalCurrencySignWithFallback","getPortableCurrencySignWithFallback","goog.i18n.NumberFormat.prototype.parseTrunk_","decimalPos","digitLeftCount","zeroDigitCount","digitRightCount","groupingCount","loop","n","totalDigits","effectiveDecimalPos","CompactNumberUnit","NULL_UNIT_","getUnitFor_","goog.i18n.NumberFormat.prototype.getUnitFor_","base","plurality","table","CompactNumberFormatSymbols","COMPACT_DECIMAL_SHORT_PATTERN","COMPACT_DECIMAL_LONG_PATTERN","patterns","previousNonNullBase","neg_prefix","neg_suffix","index_of_neg_part","neg_pattern","substring","neg_parts","exec","goog.i18n.NumberFormat.prototype.getUnitAfterRounding_","formattingNumber","pluralityNumber","abs","initialPlurality","pluralForm_","initialDivisor","pluralityAttempt","pluralityRounded","formattingAttempt","formattingRounded","finalPlurality","goog.i18n.NumberFormat.prototype.intLog10_","goog.i18n.NumberFormat.decimalShift_","digitCount","numParts","magnitude","decimalRound_","goog.i18n.NumberFormat.decimalRound_","decimalCount","goog.i18n.NumberFormat.prototype.roundToSignificantDigits_","significantDigits","digits","goog.i18n.NumberFormat.prototype.pluralForm_","quantity","isCurrencyCodeBeforeValue","goog.i18n.NumberFormat.prototype.isCurrencyCodeBeforeValue","posCurrSymbol","posPound","posZero","posCurrValue","MAX_VALUE"]
}
