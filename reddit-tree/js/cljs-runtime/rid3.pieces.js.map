{"version":3,"sources":["rid3/pieces.cljs"],"mappings":"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","names":["rid3.pieces/warn-if-piece-needs-class","kind","class","cljs.core/not","cljs.core._EQ_","js/console.warn","rid3.pieces/warn-if-piece-is-keyword","piece","rid3.pieces/warn-if-piece-is-vector","rid3.pieces/warn-if-piece-is-missing-kind","rid3.pieces/warn-if-piece-has-unknown-kind","rid3.pieces/warn-if-piece-shouldnt-have-children","var_args","G__40075","rid3.pieces/handle-piece-did-mount","js/Error","opts","rid3.pieces.handle_piece_did_mount","prev-classes","map__40079","cljs.core/--destructure-map","cljs.core.get","did-mount","rid3.container/piece-did-mount","rid3.elem/piece-did-mount","rid3.elem-with-data/piece-did-mount","rid3.raw/piece-did-mount","cljs.core/Keyword","cljs.core/vector?","children","and__4210__auto__","seq__40083","cljs.core/seq","chunk__40084","count__40085","i__40086","temp__5753__auto__","cljs.core/chunked-seq?","c__4638__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","child","cljs.core.conj","G__40092","rid3.pieces/handle-piece-did-update","rid3.pieces.handle_piece_did_update","map__40093","map__40094","id","ratom","rid3.container/piece-did-update","rid3.elem/piece-did-update","rid3.elem-with-data/piece-did-update","rid3.raw/piece-did-update","seq__40096","chunk__40097","count__40098","i__40099"],"sourcesContent":["(ns rid3.pieces\n  (:require\n   [cljsjs.d3]\n   [rid3.util :as util]\n   [rid3.container :as container]\n   [rid3.elem :as elem]\n   [rid3.elem-with-data :as elem-with-data]\n   [rid3.raw :as raw]\n   ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Warnings\n\n(defn warn-if-piece-needs-class [kind class]\n  (when (and (not class)\n             (or (= kind :container)\n                 (= kind :elem)\n                 (= kind :elem-with-data)))\n    (js/console.warn (str \"[rid3] a \" kind \" needs to have a class\"))))\n\n\n(defn warn-if-piece-is-keyword [piece]\n  (js/console.warn (str \"[rid3] a piece needs to be a hash-map, you provided a keyword --> \" piece)))\n\n\n(defn warn-if-piece-is-vector [piece]\n  (js/console.warn (str \"[rid3] a piece needs to be a hash-map, you provided a vector --> \" piece)))\n\n\n(defn warn-if-piece-is-missing-kind []\n  (js/console.warn (str \"[rid3] every piece needs to have a kind\")))\n\n\n(defn warn-if-piece-has-unknown-kind [kind]\n  (js/console.warn (str \"[rid3] unknown kind --> \" kind)))\n\n\n(defn warn-if-piece-shouldnt-have-children [kind]\n  (js/console.warn (str \"[rid3] \" kind \" piece cannot have children\")))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Handlers\n\n(defn handle-piece-did-mount\n  ([piece opts]\n   (handle-piece-did-mount piece opts []))\n\n  ([piece opts prev-classes]\n   (let [{:keys [kind\n                 class\n                 did-mount]} piece]\n\n     (warn-if-piece-needs-class kind class)\n\n     (cond\n       (= kind :container)\n       (container/piece-did-mount piece opts prev-classes)\n\n       (= kind :elem)\n       (elem/piece-did-mount piece opts prev-classes)\n\n       (= kind :elem-with-data)\n       (elem-with-data/piece-did-mount piece opts prev-classes)\n\n       (= kind :raw)\n       (raw/piece-did-mount piece opts)\n\n       ;; warn on mistakes\n\n       (keyword? piece)\n       (warn-if-piece-is-keyword piece)\n\n       (vector? piece)\n       (warn-if-piece-is-vector piece)\n\n       (not kind)\n       (warn-if-piece-is-missing-kind)\n\n       :else\n       (warn-if-piece-has-unknown-kind kind))\n\n\n     (let [children (get piece :children)]\n       (cond\n         (and children\n              (= kind :container))\n         (doseq [child children]\n           (handle-piece-did-mount child opts (conj prev-classes class)))\n\n         children\n         (warn-if-piece-shouldnt-have-children kind)\n\n         :else nil)))))\n\n\n(defn handle-piece-did-update\n  ([piece opts]\n   (handle-piece-did-update piece opts []))\n\n  ([piece opts prev-classes]\n   (let [{:keys [id\n                 ratom]} opts\n         {:keys [kind\n                 class]} piece]\n\n     (warn-if-piece-needs-class kind class)\n\n     (cond\n       (= kind :container)\n       (container/piece-did-update piece opts prev-classes)\n\n       (= kind :elem)\n       (elem/piece-did-update piece opts prev-classes)\n\n       (= kind :elem-with-data)\n       (elem-with-data/piece-did-update piece opts prev-classes)\n\n       (= kind :raw)\n       (raw/piece-did-update piece opts)\n\n       ;; warn on mistakes\n\n       (keyword? piece)\n       (warn-if-piece-is-keyword piece)\n\n       (vector? piece)\n       (warn-if-piece-is-vector piece)\n\n       (not kind)\n       (warn-if-piece-is-missing-kind)\n\n       :else\n       (warn-if-piece-has-unknown-kind kind))\n\n\n     (let [children (get piece :children)]\n       (cond\n         (and children\n              (= kind :container))\n         (doseq [child children]\n           (handle-piece-did-update child opts (conj prev-classes class)))\n\n         children\n         (warn-if-piece-shouldnt-have-children kind)\n\n         :else nil)))))\n"]}